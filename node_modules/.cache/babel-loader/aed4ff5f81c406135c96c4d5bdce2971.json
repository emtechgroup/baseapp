{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/screens/SignInScreen/index.tsx\";\nimport cx from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { SignInComponent, TwoFactorAuth } from '../../components';\nimport { EMAIL_REGEX, ERROR_EMPTY_PASSWORD, ERROR_INVALID_EMAIL, setDocumentTitle } from '../../helpers';\nimport { selectAlertState, selectSignInRequire2FA, selectSignUpRequireVerification, selectUserFetching, selectUserLoggedIn, signIn as _signIn, signInError as _signInError, signInRequire2FA as _signInRequire2FA, signUpRequireVerification as _signUpRequireVerification } from '../../modules';\n\nvar SignIn = /*#__PURE__*/function (_React$Component) {\n  _inherits(SignIn, _React$Component);\n\n  var _super = _createSuper(SignIn);\n\n  function SignIn() {\n    var _this;\n\n    _classCallCheck(this, SignIn);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      email: '',\n      emailError: '',\n      emailFocused: false,\n      password: '',\n      passwordError: '',\n      passwordFocused: false,\n      otpCode: '',\n      error2fa: '',\n      codeFocused: false\n    };\n\n    _this.renderSignInForm = function () {\n      var loading = _this.props.loading;\n      var _this$state = _this.state,\n          email = _this$state.email,\n          emailError = _this$state.emailError,\n          emailFocused = _this$state.emailFocused,\n          password = _this$state.password,\n          passwordError = _this$state.passwordError,\n          passwordFocused = _this$state.passwordFocused;\n      return /*#__PURE__*/React.createElement(SignInComponent, {\n        email: email,\n        emailError: emailError,\n        emailFocused: emailFocused,\n        emailPlaceholder: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.email'\n        }),\n        password: password,\n        passwordError: passwordError,\n        passwordFocused: passwordFocused,\n        passwordPlaceholder: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.password'\n        }),\n        labelSignIn: _this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        labelSignUp: _this.props.intl.formatMessage({\n          id: 'page.header.signUp'\n        }),\n        emailLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.email'\n        }),\n        passwordLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.password'\n        }),\n        receiveConfirmationLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.receiveConfirmation'\n        }),\n        forgotPasswordLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.forgotPassword'\n        }),\n        isLoading: loading,\n        onForgotPassword: _this.forgotPassword,\n        onSignUp: _this.handleSignUp,\n        onSignIn: _this.handleSignIn,\n        handleChangeFocusField: _this.handleFieldFocus,\n        isFormValid: _this.validateForm,\n        refreshError: _this.refreshError,\n        changeEmail: _this.handleChangeEmailValue,\n        changePassword: _this.handleChangePasswordValue,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      });\n    };\n\n    _this.render2FA = function () {\n      var loading = _this.props.loading;\n      var _this$state2 = _this.state,\n          otpCode = _this$state2.otpCode,\n          error2fa = _this$state2.error2fa,\n          codeFocused = _this$state2.codeFocused;\n      return /*#__PURE__*/React.createElement(TwoFactorAuth, {\n        isLoading: loading,\n        onSubmit: _this.handle2FASignIn,\n        title: _this.props.intl.formatMessage({\n          id: 'page.password2fa'\n        }),\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.code2fa'\n        }),\n        buttonLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        message: _this.props.intl.formatMessage({\n          id: 'page.password2fa.message'\n        }),\n        codeFocused: codeFocused,\n        otpCode: otpCode,\n        error: error2fa,\n        handleOtpCodeChange: _this.handleChangeOtpCode,\n        handleChangeFocusField: _this.handle2faFocus,\n        handleClose2fa: _this.handleClose,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      });\n    };\n\n    _this.refreshError = function () {\n      _this.setState({\n        emailError: '',\n        passwordError: ''\n      });\n    };\n\n    _this.handleChangeOtpCode = function (value) {\n      _this.setState({\n        error2fa: '',\n        otpCode: value\n      });\n    };\n\n    _this.handleSignIn = function () {\n      var _this$state3 = _this.state,\n          email = _this$state3.email,\n          password = _this$state3.password;\n\n      _this.props.signIn({\n        email,\n        password\n      });\n    };\n\n    _this.handle2FASignIn = function () {\n      var _this$state4 = _this.state,\n          email = _this$state4.email,\n          password = _this$state4.password,\n          otpCode = _this$state4.otpCode;\n\n      if (!otpCode) {\n        _this.setState({\n          error2fa: 'Please enter 2fa code'\n        });\n      } else {\n        _this.props.signIn({\n          email,\n          password,\n          otp_code: otpCode\n        });\n      }\n    };\n\n    _this.handleSignUp = function () {\n      _this.props.history.push('/signup');\n    };\n\n    _this.forgotPassword = function () {\n      _this.props.history.push('/forgot_password');\n    };\n\n    _this.handleFieldFocus = function (field) {\n      switch (field) {\n        case 'email':\n          _this.setState(function (prev) {\n            return {\n              emailFocused: !prev.emailFocused\n            };\n          });\n\n          break;\n\n        case 'password':\n          _this.setState(function (prev) {\n            return {\n              passwordFocused: !prev.passwordFocused\n            };\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handle2faFocus = function () {\n      _this.setState(function (prev) {\n        return {\n          codeFocused: !prev.codeFocused\n        };\n      });\n    };\n\n    _this.validateForm = function () {\n      var _this$state5 = _this.state,\n          email = _this$state5.email,\n          password = _this$state5.password;\n      var isEmailValid = email.match(EMAIL_REGEX);\n\n      if (!isEmailValid) {\n        _this.setState({\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: ''\n        });\n\n        return;\n      }\n\n      if (!password) {\n        _this.setState({\n          emailError: '',\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_EMPTY_PASSWORD\n          })\n        });\n\n        return;\n      }\n    };\n\n    _this.handleChangeEmailValue = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n\n    _this.handleChangePasswordValue = function (value) {\n      _this.setState({\n        password: value\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.props.signInRequire2FA({\n        require2fa: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SignIn, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Sign In');\n      this.props.signInError({\n        code: 0,\n        message: ['']\n      });\n      this.props.signUpRequireVerification({\n        requireVerification: false\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!this.props.isLoggedIn && nextProps.isLoggedIn) {\n        this.props.history.push('/wallets');\n      }\n\n      if (this.props.requireEmailVerification) {\n        this.props.history.push('/email-verification');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          loading = _this$props.loading,\n          require2FA = _this$props.require2FA;\n      var className = cx('pg-sign-in-screen__container', {\n        loading\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-sign-in-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, require2FA ? this.render2FA() : this.renderSignInForm()));\n    }\n  }]);\n\n  return SignIn;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    alert: selectAlertState(state),\n    isLoggedIn: selectUserLoggedIn(state),\n    loading: selectUserFetching(state),\n    require2FA: selectSignInRequire2FA(state),\n    requireEmailVerification: selectSignUpRequireVerification(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(data) {\n      return dispatch(_signIn(data));\n    },\n    signInError: function signInError(error) {\n      return dispatch(_signInError(error));\n    },\n    signInRequire2FA: function signInRequire2FA(payload) {\n      return dispatch(_signInRequire2FA(payload));\n    },\n    signUpRequireVerification: function signUpRequireVerification(data) {\n      return dispatch(_signUpRequireVerification(data));\n    }\n  };\n};\n\nexport var SignInScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(SignIn);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/screens/SignInScreen/index.tsx"],"names":["cx","React","injectIntl","connect","withRouter","compose","SignInComponent","TwoFactorAuth","EMAIL_REGEX","ERROR_EMPTY_PASSWORD","ERROR_INVALID_EMAIL","setDocumentTitle","selectAlertState","selectSignInRequire2FA","selectSignUpRequireVerification","selectUserFetching","selectUserLoggedIn","signIn","signInError","signInRequire2FA","signUpRequireVerification","SignIn","state","email","emailError","emailFocused","password","passwordError","passwordFocused","otpCode","error2fa","codeFocused","renderSignInForm","loading","props","intl","formatMessage","id","forgotPassword","handleSignUp","handleSignIn","handleFieldFocus","validateForm","refreshError","handleChangeEmailValue","handleChangePasswordValue","render2FA","handle2FASignIn","handleChangeOtpCode","handle2faFocus","handleClose","setState","value","otp_code","history","push","field","prev","isEmailValid","match","require2fa","code","message","requireVerification","nextProps","isLoggedIn","requireEmailVerification","require2FA","className","Component","mapStateToProps","alert","mapDispatchToProps","dispatch","data","error","payload","SignInScreen"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction, MapStateToProps } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { SignInComponent, TwoFactorAuth } from '../../components';\nimport { EMAIL_REGEX, ERROR_EMPTY_PASSWORD, ERROR_INVALID_EMAIL, setDocumentTitle } from '../../helpers';\nimport {\n    RootState,\n    selectAlertState,\n    selectSignInRequire2FA,\n    selectSignUpRequireVerification,\n    selectUserFetching,\n    selectUserLoggedIn,\n    signIn,\n    signInError,\n    signInRequire2FA,\n    signUpRequireVerification,\n} from '../../modules';\n\ninterface ReduxProps {\n    isLoggedIn: boolean;\n    loading?: boolean;\n    require2FA?: boolean;\n    requireEmailVerification?: boolean;\n}\n\ninterface DispatchProps {\n    signIn: typeof signIn;\n    signInError: typeof signInError;\n    signInRequire2FA: typeof signInRequire2FA;\n    signUpRequireVerification: typeof signUpRequireVerification;\n}\n\ninterface SignInState {\n    email: string;\n    emailError: string;\n    emailFocused: boolean;\n    password: string;\n    passwordError: string;\n    passwordFocused: boolean;\n    otpCode: string;\n    error2fa: string;\n    codeFocused: boolean;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps;\n\nclass SignIn extends React.Component<Props, SignInState> {\n    public state = {\n        email: '',\n        emailError: '',\n        emailFocused: false,\n        password: '',\n        passwordError: '',\n        passwordFocused: false,\n        otpCode: '',\n        error2fa: '',\n        codeFocused: false,\n    };\n\n    public componentDidMount() {\n        setDocumentTitle('Sign In');\n        this.props.signInError({ code: 0, message: [''] });\n        this.props.signUpRequireVerification({requireVerification: false});\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        if (!this.props.isLoggedIn && nextProps.isLoggedIn) {\n            this.props.history.push('/wallets');\n        }\n        if (this.props.requireEmailVerification) {\n            this.props.history.push('/email-verification');\n        }\n    }\n\n    public render() {\n        const { loading, require2FA } = this.props;\n\n        const className = cx('pg-sign-in-screen__container', { loading });\n\n        return (\n            <div className=\"pg-sign-in-screen\">\n                <div className={className}>{require2FA ? this.render2FA() : this.renderSignInForm()}</div>\n            </div>\n        );\n    }\n\n    private renderSignInForm = () => {\n        const { loading } = this.props;\n        const { email, emailError, emailFocused, password, passwordError, passwordFocused } = this.state;\n\n        return (\n            <SignInComponent\n                email={email}\n                emailError={emailError}\n                emailFocused={emailFocused}\n                emailPlaceholder={this.props.intl.formatMessage({ id: 'page.header.signIn.email' })}\n                password={password}\n                passwordError={passwordError}\n                passwordFocused={passwordFocused}\n                passwordPlaceholder={this.props.intl.formatMessage({ id: 'page.header.signIn.password' })}\n                labelSignIn={this.props.intl.formatMessage({ id: 'page.header.signIn' })}\n                labelSignUp={this.props.intl.formatMessage({ id: 'page.header.signUp' })}\n                emailLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.email' })}\n                passwordLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.password' })}\n                receiveConfirmationLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.receiveConfirmation' })}\n                forgotPasswordLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.forgotPassword' })}\n                isLoading={loading}\n                onForgotPassword={this.forgotPassword}\n                onSignUp={this.handleSignUp}\n                onSignIn={this.handleSignIn}\n                handleChangeFocusField={this.handleFieldFocus}\n                isFormValid={this.validateForm}\n                refreshError={this.refreshError}\n                changeEmail={this.handleChangeEmailValue}\n                changePassword={this.handleChangePasswordValue}\n            />\n        );\n    };\n\n    private render2FA = () => {\n        const { loading } = this.props;\n        const { otpCode, error2fa, codeFocused } = this.state;\n\n        return (\n            <TwoFactorAuth\n                isLoading={loading}\n                onSubmit={this.handle2FASignIn}\n                title={this.props.intl.formatMessage({ id: 'page.password2fa' })}\n                label={this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.code2fa' })}\n                buttonLabel={this.props.intl.formatMessage({ id: 'page.header.signIn' })}\n                message={this.props.intl.formatMessage({ id: 'page.password2fa.message' })}\n                codeFocused={codeFocused}\n                otpCode={otpCode}\n                error={error2fa}\n                handleOtpCodeChange={this.handleChangeOtpCode}\n                handleChangeFocusField={this.handle2faFocus}\n                handleClose2fa={this.handleClose}\n            />\n        );\n    };\n\n    private refreshError = () => {\n        this.setState({\n            emailError: '',\n            passwordError: '',\n        });\n    };\n\n    private handleChangeOtpCode = (value: string) => {\n        this.setState({\n            error2fa: '',\n            otpCode: value,\n        });\n    };\n\n    private handleSignIn = () => {\n        const { email, password } = this.state;\n\n        this.props.signIn({\n            email,\n            password,\n        });\n    };\n\n    private handle2FASignIn = () => {\n        const { email, password, otpCode } = this.state;\n\n        if (!otpCode) {\n            this.setState({\n                error2fa: 'Please enter 2fa code',\n            });\n        } else {\n            this.props.signIn({\n                email,\n                password,\n                otp_code: otpCode,\n            });\n        }\n    };\n\n    private handleSignUp = () => {\n        this.props.history.push('/signup');\n    };\n\n    private forgotPassword = () => {\n        this.props.history.push('/forgot_password');\n    };\n\n    private handleFieldFocus = (field: string) => {\n        switch (field) {\n            case 'email':\n                this.setState(prev => ({\n                    emailFocused: !prev.emailFocused,\n                }));\n                break;\n            case 'password':\n                this.setState(prev => ({\n                    passwordFocused: !prev.passwordFocused,\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handle2faFocus = () => {\n        this.setState(prev => ({\n            codeFocused: !prev.codeFocused,\n        }));\n    };\n\n    private validateForm = () => {\n        const { email, password } = this.state;\n        const isEmailValid = email.match(EMAIL_REGEX);\n\n        if (!isEmailValid) {\n            this.setState({\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: '',\n            });\n\n            return;\n        }\n        if (!password) {\n            this.setState({\n                emailError: '',\n                passwordError: this.props.intl.formatMessage({ id: ERROR_EMPTY_PASSWORD }),\n            });\n\n            return;\n        }\n    };\n\n    private handleChangeEmailValue = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private handleChangePasswordValue = (value: string) => {\n        this.setState({\n            password: value,\n        });\n    };\n\n    private handleClose = () => {\n        this.props.signInRequire2FA({ require2fa: false });\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    alert: selectAlertState(state),\n    isLoggedIn: selectUserLoggedIn(state),\n    loading: selectUserFetching(state),\n    require2FA: selectSignInRequire2FA(state),\n    requireEmailVerification: selectSignUpRequireVerification(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    signIn: data => dispatch(signIn(data)),\n    signInError: error => dispatch(signInError(error)),\n    signInRequire2FA: payload => dispatch(signInRequire2FA(payload)),\n    signUpRequireVerification: data => dispatch(signUpRequireVerification(data)),\n});\n\nexport const SignInScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(SignIn) as React.ComponentClass;\n"]},"metadata":{},"sourceType":"module"}