{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/GeetestCaptcha/index.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { initGeetest } from '../../helpers/geetest';\nimport { geetestCaptchaFetch, selectCaptchaKeys, selectCurrentLanguage } from '../../modules';\n\nvar GeetestCaptchaComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(GeetestCaptchaComponent, _React$Component);\n\n  var _super = _createSuper(GeetestCaptchaComponent);\n\n  function GeetestCaptchaComponent(props) {\n    var _this;\n\n    _classCallCheck(this, GeetestCaptchaComponent);\n\n    _this = _super.call(this, props);\n    _this.captchaContainerRef = void 0;\n    _this.captcha = void 0;\n\n    _this.validate = function () {\n      return _this.captcha && _this.captcha.getValidate();\n    };\n\n    _this.reset = function () {\n      return _this.captcha && _this.captcha.reset();\n    };\n\n    _this.captchaComingHandler = function (captcha) {\n      _this.captcha = captcha;\n\n      _this.captcha.appendTo(_this.captchaContainerRef.current);\n\n      _this.captcha.onSuccess(_this.captchaSuccessHandler);\n    };\n\n    _this.captchaSuccessHandler = function () {\n      if (_this.props.onSuccess) {\n        _this.props.onSuccess(_this.validate());\n      }\n    };\n\n    _this.captchaContainerRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(GeetestCaptchaComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.geetestCaptchaFetch();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (this.props.geetestCaptchaKeys !== next.geetestCaptchaKeys && next.geetestCaptchaKeys !== undefined) {\n        var geetestCaptchaKeys = next.geetestCaptchaKeys,\n            lang = next.lang;\n        initGeetest({\n          gt: geetestCaptchaKeys.gt,\n          challenge: geetestCaptchaKeys.challenge,\n          offline: 0,\n          new_captcha: false,\n          product: 'popup',\n          width: '100%',\n          lang: lang,\n          https: true\n        }, this.captchaComingHandler);\n      }\n\n      if (next.shouldCaptchaReset && !this.props.shouldCaptchaReset) {\n        this.reset();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.captchaContainerRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 16\n        }\n      });\n    }\n  }]);\n\n  return GeetestCaptchaComponent;\n}(React.Component);\n\nvar mapDispatchProps = {\n  geetestCaptchaFetch\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    lang: selectCurrentLanguage(state),\n    geetestCaptchaKeys: selectCaptchaKeys(state)\n  };\n};\n\nexport var GeetestCaptcha = connect(mapStateToProps, mapDispatchProps)(GeetestCaptchaComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/GeetestCaptcha/index.tsx"],"names":["React","connect","initGeetest","geetestCaptchaFetch","selectCaptchaKeys","selectCurrentLanguage","GeetestCaptchaComponent","props","captchaContainerRef","captcha","validate","getValidate","reset","captchaComingHandler","appendTo","current","onSuccess","captchaSuccessHandler","createRef","next","geetestCaptchaKeys","undefined","lang","gt","challenge","offline","new_captcha","product","width","https","shouldCaptchaReset","Component","mapDispatchProps","mapStateToProps","state","GeetestCaptcha"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,OADJ,QAGO,aAHP;AAIA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SACIC,mBADJ,EAKIC,iBALJ,EAMIC,qBANJ,QAOO,eAPP;;IAyBMC,uB;;;;;AAEF,mCAAmBC,KAAnB,EAA0B;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;AADsB,UAKlBC,mBALkB;AAAA,UAMlBC,OANkB;;AAAA,UAmCnBC,QAnCmB,GAmCR,YAAM;AACpB,aAAO,MAAKD,OAAL,IAAgB,MAAKA,OAAL,CAAaE,WAAb,EAAvB;AACH,KArCyB;;AAAA,UAuCnBC,KAvCmB,GAuCX,YAAM;AACjB,aAAO,MAAKH,OAAL,IAAgB,MAAKA,OAAL,CAAaG,KAAb,EAAvB;AACH,KAzCyB;;AAAA,UA+ClBC,oBA/CkB,GA+CK,UAAAJ,OAAO,EAAI;AACtC,YAAKA,OAAL,GAAeA,OAAf;;AACA,YAAKA,OAAL,CAAaK,QAAb,CAAsB,MAAKN,mBAAL,CAAyBO,OAA/C;;AACA,YAAKN,OAAL,CAAaO,SAAb,CAAuB,MAAKC,qBAA5B;AACH,KAnDyB;;AAAA,UAqDlBA,qBArDkB,GAqDM,YAAM;AAClC,UAAI,MAAKV,KAAL,CAAWS,SAAf,EAA0B;AACtB,cAAKT,KAAL,CAAWS,SAAX,CAAqB,MAAKN,QAAL,EAArB;AACH;AACJ,KAzDyB;;AAEtB,UAAKF,mBAAL,GAA2BR,KAAK,CAACkB,SAAN,EAA3B;AAFsB;AAGzB;;;;wCAK0B;AACvB,WAAKX,KAAL,CAAWJ,mBAAX;AACH;;;8CAEgCgB,I,EAAa;AAC1C,UAAI,KAAKZ,KAAL,CAAWa,kBAAX,KAAkCD,IAAI,CAACC,kBAAvC,IAA6DD,IAAI,CAACC,kBAAL,KAA4BC,SAA7F,EAAwG;AAAA,YAEhGD,kBAFgG,GAIhGD,IAJgG,CAEhGC,kBAFgG;AAAA,YAGhGE,IAHgG,GAIhGH,IAJgG,CAGhGG,IAHgG;AAKpGpB,QAAAA,WAAW,CAAC;AACRqB,UAAAA,EAAE,EAAEH,kBAAkB,CAACG,EADf;AAERC,UAAAA,SAAS,EAAEJ,kBAAkB,CAACI,SAFtB;AAGRC,UAAAA,OAAO,EAAE,CAHD;AAIRC,UAAAA,WAAW,EAAE,KAJL;AAKRC,UAAAA,OAAO,EAAE,OALD;AAMRC,UAAAA,KAAK,EAAE,MANC;AAORN,UAAAA,IAAI,EAAEA,IAPE;AAQRO,UAAAA,KAAK,EAAE;AARC,SAAD,EASR,KAAKhB,oBATG,CAAX;AAUH;;AAED,UAAIM,IAAI,CAACW,kBAAL,IAA2B,CAAC,KAAKvB,KAAL,CAAWuB,kBAA3C,EAA+D;AAC3D,aAAKlB,KAAL;AACH;AACJ;;;6BAUe;AACZ,0BAAO;AAAK,QAAA,GAAG,EAAE,KAAKJ,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;;EA/CiCR,KAAK,CAAC+B,S;;AA8D5C,IAAMC,gBAAgB,GAAG;AACrB7B,EAAAA;AADqB,CAAzB;;AAIA,IAAM8B,eAA2D,GAC7D,SADEA,eACF,CAACC,KAAD;AAAA,SAAmC;AAC/BZ,IAAAA,IAAI,EAAEjB,qBAAqB,CAAC6B,KAAD,CADI;AAE/Bd,IAAAA,kBAAkB,EAAEhB,iBAAiB,CAAC8B,KAAD;AAFN,GAAnC;AAAA,CADJ;;AAMA,OAAO,IAAMC,cAAc,GAAGlC,OAAO,CAACgC,eAAD,EAAkBD,gBAAlB,CAAP,CAA2C1B,uBAA3C,CAAvB","sourcesContent":["import * as React from 'react';\nimport {\n    connect,\n    MapStateToProps,\n} from 'react-redux';\nimport { initGeetest } from '../../helpers/geetest';\nimport {\n    geetestCaptchaFetch,\n    GeetestCaptchaKeys,\n    GeetestCaptchaResponse,\n    RootState,\n    selectCaptchaKeys,\n    selectCurrentLanguage,\n} from '../../modules';\n\ninterface OwnProps {\n    shouldCaptchaReset?: boolean;\n    onSuccess?: (value?: GeetestCaptchaResponse) => void;\n}\n\ninterface ReduxProps {\n    lang: string;\n    geetestCaptchaKeys?: GeetestCaptchaKeys;\n}\n\ninterface DispatchProps {\n    geetestCaptchaFetch: typeof geetestCaptchaFetch;\n}\n\ntype Props = ReduxProps & DispatchProps & OwnProps;\n\nclass GeetestCaptchaComponent extends React.Component<Props> {\n\n    public constructor(props) {\n        super(props);\n        this.captchaContainerRef = React.createRef();\n    }\n\n    private captchaContainerRef;\n    private captcha;\n\n    public componentDidMount() {\n        this.props.geetestCaptchaFetch();\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        if (this.props.geetestCaptchaKeys !== next.geetestCaptchaKeys && next.geetestCaptchaKeys !== undefined) {\n            const {\n                geetestCaptchaKeys,\n                lang,\n            } = next;\n            initGeetest({\n                gt: geetestCaptchaKeys.gt,\n                challenge: geetestCaptchaKeys.challenge,\n                offline: 0,\n                new_captcha: false,\n                product: 'popup',\n                width: '100%',\n                lang: lang,\n                https: true,\n            }, this.captchaComingHandler);\n        }\n\n        if (next.shouldCaptchaReset && !this.props.shouldCaptchaReset) {\n            this.reset();\n        }\n    }\n\n    public validate = () => {\n        return this.captcha && this.captcha.getValidate();\n    };\n\n    public reset = () => {\n        return this.captcha && this.captcha.reset();\n    };\n\n    public render() {\n        return <div ref={this.captchaContainerRef} />;\n    }\n\n    private captchaComingHandler = captcha => {\n        this.captcha = captcha;\n        this.captcha.appendTo(this.captchaContainerRef.current);\n        this.captcha.onSuccess(this.captchaSuccessHandler);\n    };\n\n    private captchaSuccessHandler = () => {\n        if (this.props.onSuccess) {\n            this.props.onSuccess(this.validate());\n        }\n    };\n}\n\nconst mapDispatchProps = {\n    geetestCaptchaFetch,\n};\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> =\n    (state: RootState): ReduxProps => ({\n        lang: selectCurrentLanguage(state),\n        geetestCaptchaKeys: selectCaptchaKeys(state),\n    });\n\nexport const GeetestCaptcha = connect(mapStateToProps, mapDispatchProps)(GeetestCaptchaComponent);\n"]},"metadata":{},"sourceType":"module"}