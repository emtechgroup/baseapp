{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(ordersHistoryCancelSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, isFinexEnabled } from '../../../../api';\nimport { getCsrfToken, getOrderAPI } from '../../../../helpers';\nimport { ordersHistoryCancelError } from '../actions';\n\nvar ordersCancelOptions = function ordersCancelOptions(csrfToken) {\n  return {\n    apiVersion: getOrderAPI(),\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function ordersHistoryCancelSaga(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function ordersHistoryCancelSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          id = action.payload.id;\n\n          if (!isFinexEnabled()) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 5;\n          return call(API.post(ordersCancelOptions(getCsrfToken())), \"/market/orders/cancel/\".concat(id), {\n            id\n          });\n\n        case 5:\n          _context.next = 9;\n          break;\n\n        case 7:\n          _context.next = 9;\n          return call(API.post(ordersCancelOptions(getCsrfToken())), \"/market/orders/\".concat(id, \"/cancel\"), {\n            id\n          });\n\n        case 9:\n          _context.next = 11;\n          return put(alertPush({\n            message: ['success.order.cancelling'],\n            type: 'success'\n          }));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: ordersHistoryCancelError\n            }\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/ordersHistory/sagas/ordersHistoryCancelSaga.ts"],"names":["ordersHistoryCancelSaga","call","put","alertPush","sendError","API","isFinexEnabled","getCsrfToken","getOrderAPI","ordersHistoryCancelError","ordersCancelOptions","csrfToken","apiVersion","headers","action","id","payload","post","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,uB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,EAAcC,cAAd,QAAoD,iBAApD;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,qBAA1C;AACA,SAASC,wBAAT,QAAmE,YAAnE;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,SAAD,EAAwC;AAChE,SAAO;AACHC,IAAAA,UAAU,EAAEJ,WAAW,EADpB;AAEHK,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,uBAAV,CAAkCc,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAESC,UAAAA,EAFT,GAEgBD,MAAM,CAACE,OAFvB,CAESD,EAFT;;AAAA,eAIKT,cAAc,EAJnB;AAAA;AAAA;AAAA;;AAAA;AAKK,iBAAML,IAAI,CAACI,GAAG,CAACY,IAAJ,CAASP,mBAAmB,CAACH,YAAY,EAAb,CAA5B,CAAD,kCAAyEQ,EAAzE,GAA+E;AAAEA,YAAAA;AAAF,WAA/E,CAAV;;AALL;AAAA;AAAA;;AAAA;AAAA;AAOK,iBAAMd,IAAI,CAACI,GAAG,CAACY,IAAJ,CAASP,mBAAmB,CAACH,YAAY,EAAb,CAA5B,CAAD,2BAAkEQ,EAAlE,cAA+E;AAAEA,YAAAA;AAAF,WAA/E,CAAV;;AAPL;AAAA;AAUC,iBAAMb,GAAG,CAACC,SAAS,CAAC;AAAEe,YAAAA,OAAO,EAAE,CAAC,0BAAD,CAAX;AAAyCC,YAAAA,IAAI,EAAE;AAA/C,WAAD,CAAV,CAAT;;AAVD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYC,iBAAMjB,GAAG,CAACE,SAAS,CAAC;AAChBgB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEd;AADH;AAHE,WAAD,CAAV,CAAT;;AAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, isFinexEnabled, RequestOptions } from '../../../../api';\nimport { getCsrfToken, getOrderAPI } from '../../../../helpers';\nimport { ordersHistoryCancelError, OrdersHistoryCancelFetch } from '../actions';\n\nconst ordersCancelOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: getOrderAPI(),\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* ordersHistoryCancelSaga(action: OrdersHistoryCancelFetch) {\n    try {\n        const { id } = action.payload;\n\n        if (isFinexEnabled()) {\n            yield call(API.post(ordersCancelOptions(getCsrfToken())), `/market/orders/cancel/${id}`, { id });\n        } else {\n            yield call(API.post(ordersCancelOptions(getCsrfToken())), `/market/orders/${id}/cancel`, { id });\n        }\n\n        yield put(alertPush({ message: ['success.order.cancelling'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: ordersHistoryCancelError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}