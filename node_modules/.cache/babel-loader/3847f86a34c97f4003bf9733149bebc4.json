{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(resendCodeSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../../';\nimport { API } from '../../../../../api';\nimport { getCsrfToken } from '../../../../../helpers';\nimport { resendCodeData, resendCodeError } from '../actions';\n\nvar sessionsConfig = function sessionsConfig(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function resendCodeSaga(action) {\n  return _regeneratorRuntime.wrap(function resendCodeSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig(getCsrfToken())), '/resource/phones/send_code', action.payload);\n\n        case 3:\n          _context.next = 5;\n          return put(resendCodeData());\n\n        case 5:\n          _context.next = 7;\n          return put(alertPush({\n            message: ['success.phone.verification.send'],\n            type: 'success'\n          }));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: resendCodeError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/kyc/phone/sagas/resendCodeSaga.ts"],"names":["resendCodeSaga","call","put","alertPush","sendError","API","getCsrfToken","resendCodeData","resendCodeError","sessionsConfig","csrfToken","apiVersion","headers","action","post","payload","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,c;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,cAArC;AACA,SAASC,GAAT,QAAoC,oBAApC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAiE,YAAjE;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAwC;AAC3D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUV,cAAV,CAAyBa,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMZ,IAAI,CAACI,GAAG,CAACS,IAAJ,CAASL,cAAc,CAACH,YAAY,EAAb,CAAvB,CAAD,EAA2C,4BAA3C,EAAyEO,MAAM,CAACE,OAAhF,CAAV;;AAFD;AAAA;AAGC,iBAAMb,GAAG,CAACK,cAAc,EAAf,CAAT;;AAHD;AAAA;AAIC,iBAAML,GAAG,CAACC,SAAS,CAAC;AAAEa,YAAAA,OAAO,EAAE,CAAC,iCAAD,CAAX;AAAgDC,YAAAA,IAAI,EAAE;AAAtD,WAAD,CAAV,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMf,GAAG,CAACE,SAAS,CAAC;AAChBc,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEb;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../../';\nimport { API, RequestOptions } from '../../../../../api';\nimport { getCsrfToken } from '../../../../../helpers';\nimport { resendCodeData, resendCodeError, ResendCodeFetch } from '../actions';\n\nconst sessionsConfig = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* resendCodeSaga(action: ResendCodeFetch) {\n    try {\n        yield call(API.post(sessionsConfig(getCsrfToken())), '/resource/phones/send_code', action.payload);\n        yield put(resendCodeData());\n        yield put(alertPush({ message: ['success.phone.verification.send'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: resendCodeError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}