{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/MarketsTable/index.tsx\";\n\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Decimal, TickerTable } from '../../components';\nimport { useMarketsFetch, useMarketsTickersFetch, useRangerConnectFetch } from '../../hooks';\nimport { selectMarkets, selectMarketTickers, setCurrentMarket } from '../../modules';\nvar defaultTicker = {\n  amount: '0.0',\n  last: '0.0',\n  high: '0.0',\n  open: '0.0',\n  low: '0.0',\n  price_change_percent: '+0.00%',\n  volume: '0.0'\n};\n\nvar MarketsTableComponent = function MarketsTableComponent(props) {\n  useMarketsFetch();\n  useMarketsTickersFetch();\n  useRangerConnectFetch();\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var markets = useSelector(selectMarkets);\n  var marketTickers = useSelector(selectMarketTickers);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentBidUnit = _React$useState2[0],\n      setCurrentBidUnit = _React$useState2[1];\n\n  var handleRedirectToTrading = function handleRedirectToTrading(id) {\n    var currentMarket = markets.find(function (item) {\n      return item.id === id;\n    });\n\n    if (currentMarket) {\n      props.handleChangeCurrentMarket && props.handleChangeCurrentMarket(currentMarket);\n      dispatch(setCurrentMarket(currentMarket));\n      history.push(\"/trading/\".concat(currentMarket.id));\n    }\n  };\n\n  var formatFilteredMarkets = function formatFilteredMarkets(list, market) {\n    if (!list.includes(market.quote_unit)) {\n      list.push(market.quote_unit);\n    }\n\n    return list;\n  };\n\n  var currentBidUnitsList = [''];\n\n  if (markets.length > 0) {\n    currentBidUnitsList = markets.reduce(formatFilteredMarkets, currentBidUnitsList);\n  }\n\n  var currentBidUnitMarkets = props.markets || markets;\n\n  if (currentBidUnit) {\n    currentBidUnitMarkets = currentBidUnitMarkets.length ? currentBidUnitMarkets.filter(function (market) {\n      return market.quote_unit === currentBidUnit;\n    }) : [];\n  }\n\n  var formattedMarkets = currentBidUnitMarkets.length ? currentBidUnitMarkets.map(function (market) {\n    return _objectSpread(_objectSpread({}, market), {}, {\n      last: Decimal.format(Number((marketTickers[market.id] || defaultTicker).last), market.amount_precision),\n      open: Decimal.format(Number((marketTickers[market.id] || defaultTicker).open), market.price_precision),\n      price_change_percent: String((marketTickers[market.id] || defaultTicker).price_change_percent),\n      high: Decimal.format(Number((marketTickers[market.id] || defaultTicker).high), market.amount_precision),\n      low: Decimal.format(Number((marketTickers[market.id] || defaultTicker).low), market.amount_precision),\n      volume: Decimal.format(Number((marketTickers[market.id] || defaultTicker).volume), market.amount_precision)\n    });\n  }).map(function (market) {\n    return _objectSpread(_objectSpread({}, market), {}, {\n      change: Decimal.format((+market.last - +market.open).toFixed(market.price_precision), market.price_precision)\n    });\n  }) : [];\n  return /*#__PURE__*/React.createElement(TickerTable, {\n    currentBidUnit: currentBidUnit,\n    currentBidUnitsList: currentBidUnitsList,\n    markets: formattedMarkets,\n    redirectToTrading: handleRedirectToTrading,\n    setCurrentBidUnit: setCurrentBidUnit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  });\n};\n\nexport var MarketsTable = React.memo(MarketsTableComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/MarketsTable/index.tsx"],"names":["React","useDispatch","useSelector","useHistory","Decimal","TickerTable","useMarketsFetch","useMarketsTickersFetch","useRangerConnectFetch","selectMarkets","selectMarketTickers","setCurrentMarket","defaultTicker","amount","last","high","open","low","price_change_percent","volume","MarketsTableComponent","props","history","dispatch","markets","marketTickers","useState","currentBidUnit","setCurrentBidUnit","handleRedirectToTrading","id","currentMarket","find","item","handleChangeCurrentMarket","push","formatFilteredMarkets","list","market","includes","quote_unit","currentBidUnitsList","length","reduce","currentBidUnitMarkets","filter","formattedMarkets","map","format","Number","amount_precision","price_precision","String","change","toFixed","MarketsTable","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Decimal, TickerTable } from '../../components';\nimport {\n    useMarketsFetch,\n    useMarketsTickersFetch,\n    useRangerConnectFetch,\n} from '../../hooks';\nimport {\n    Market,\n    selectMarkets,\n    selectMarketTickers,\n    setCurrentMarket,\n} from '../../modules';\n\nconst defaultTicker = {\n    amount: '0.0',\n    last: '0.0',\n    high: '0.0',\n    open: '0.0',\n    low: '0.0',\n    price_change_percent: '+0.00%',\n    volume: '0.0',\n};\n\nconst MarketsTableComponent = props => {\n    useMarketsFetch();\n    useMarketsTickersFetch();\n    useRangerConnectFetch();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const markets = useSelector(selectMarkets);\n    const marketTickers = useSelector(selectMarketTickers);\n    const [currentBidUnit, setCurrentBidUnit] = React.useState('');\n\n    const handleRedirectToTrading = (id: string) => {\n        const currentMarket: Market | undefined = markets.find(item => item.id === id);\n\n        if (currentMarket) {\n            props.handleChangeCurrentMarket && props.handleChangeCurrentMarket(currentMarket);\n            dispatch(setCurrentMarket(currentMarket));\n            history.push(`/trading/${currentMarket.id}`);\n        }\n    };\n\n    const formatFilteredMarkets = (list: string[], market: Market) => {\n        if (!list.includes(market.quote_unit)) {\n            list.push(market.quote_unit);\n        }\n\n        return list;\n    };\n\n    let currentBidUnitsList: string[] = [''];\n\n    if (markets.length > 0) {\n        currentBidUnitsList = markets.reduce(formatFilteredMarkets, currentBidUnitsList);\n    }\n\n    let currentBidUnitMarkets = props.markets || markets;\n\n    if (currentBidUnit) {\n        currentBidUnitMarkets = currentBidUnitMarkets.length ? currentBidUnitMarkets.filter(market => market.quote_unit === currentBidUnit) : [];\n    }\n\n    const formattedMarkets = currentBidUnitMarkets.length ? currentBidUnitMarkets.map(market =>\n        ({\n            ...market,\n            last: Decimal.format(Number((marketTickers[market.id] || defaultTicker).last), market.amount_precision),\n            open: Decimal.format(Number((marketTickers[market.id] || defaultTicker).open), market.price_precision),\n            price_change_percent: String((marketTickers[market.id] || defaultTicker).price_change_percent),\n            high: Decimal.format(Number((marketTickers[market.id] || defaultTicker).high), market.amount_precision),\n            low: Decimal.format(Number((marketTickers[market.id] || defaultTicker).low), market.amount_precision),\n            volume: Decimal.format(Number((marketTickers[market.id] || defaultTicker).volume), market.amount_precision),\n        }),\n    ).map(market =>\n        ({\n            ...market,\n            change: Decimal.format((+market.last - +market.open)\n                .toFixed(market.price_precision), market.price_precision),\n        }),\n    ) : [];\n\n    return (\n        <TickerTable\n            currentBidUnit={currentBidUnit}\n            currentBidUnitsList={currentBidUnitsList}\n            markets={formattedMarkets}\n            redirectToTrading={handleRedirectToTrading}\n            setCurrentBidUnit={setCurrentBidUnit}\n        />\n    );\n};\n\nexport const MarketsTable = React.memo(MarketsTableComponent);\n"]},"metadata":{},"sourceType":"module"}