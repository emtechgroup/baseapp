{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar ListReduceHelper = function ListReduceHelper(list, order) {\n  var listReduce = list.reduce(function (memo, item) {\n    if (order.id !== item.id) {\n      memo.push(item);\n    }\n\n    return memo;\n  }, []);\n  return [_objectSpread({}, order)].concat(listReduce);\n};\n\nexport var insertOrUpdate = function insertOrUpdate(list, order) {\n  var index = list.findIndex(function (value) {\n    return value.id === order.id;\n  });\n\n  switch (order.state) {\n    case 'wait':\n      if (index === -1) {\n        return [_objectSpread({}, order)].concat(list);\n      }\n\n      if (index !== -1) {\n        return ListReduceHelper(list, order);\n      }\n\n      return list;\n\n    case 'done':\n      if (index === -1) {\n        return [_objectSpread({}, order)].concat(list);\n      }\n\n      return list.map(function (item) {\n        if (order.id === item.id) {\n          return _objectSpread({}, order);\n        }\n\n        return item;\n      });\n\n    case 'cancel':\n      return ListReduceHelper(list, order);\n\n    default:\n      return list.reduce(function (memo, item) {\n        if (order.id !== item.id) {\n          memo.push(item);\n        }\n\n        return memo;\n      }, []);\n  }\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/ordersHistory/helpers.ts"],"names":["ListReduceHelper","list","order","listReduce","reduce","memo","item","id","push","concat","insertOrUpdate","index","findIndex","value","state","map"],"mappings":";;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,KAAP,EAAiB;AACtC,MAAMC,UAAU,GAAGF,IAAI,CAACG,MAAL,CAAY,UAACC,IAAD,EAAsBC,IAAtB,EAA2D;AACtF,QAAIJ,KAAK,CAACK,EAAN,KAAaD,IAAI,CAACC,EAAtB,EAA0B;AACtBF,MAAAA,IAAI,CAACG,IAAL,CAAUF,IAAV;AACH;;AAED,WAAOD,IAAP;AACH,GANkB,EAMhB,EANgB,CAAnB;AAQA,SAAO,mBAAKH,KAAL,GAAaO,MAAb,CAAoBN,UAApB,CAAP;AACH,CAVD;;AAYA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACT,IAAD,EAAsBC,KAAtB,EAA4D;AACtF,MAAMS,KAAK,GAAGV,IAAI,CAACW,SAAL,CAAe,UAACC,KAAD;AAAA,WAAwBA,KAAK,CAACN,EAAN,KAAaL,KAAK,CAACK,EAA3C;AAAA,GAAf,CAAd;;AACA,UAAQL,KAAK,CAACY,KAAd;AACI,SAAK,MAAL;AACI,UAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,eAAO,mBAAKT,KAAL,GAAaO,MAAb,CAAoBR,IAApB,CAAP;AACH;;AACD,UAAIU,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,eAAOX,gBAAgB,CAACC,IAAD,EAAOC,KAAP,CAAvB;AACH;;AAED,aAAOD,IAAP;;AACJ,SAAK,MAAL;AACI,UAAIU,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,eAAO,mBAAKT,KAAL,GAAaO,MAAb,CAAoBR,IAApB,CAAP;AACH;;AAED,aAAOA,IAAI,CAACc,GAAL,CAAS,UAAAT,IAAI,EAAI;AACpB,YAAIJ,KAAK,CAACK,EAAN,KAAaD,IAAI,CAACC,EAAtB,EAA0B;AACtB,mCAAWL,KAAX;AACH;;AAED,eAAOI,IAAP;AACH,OANM,CAAP;;AAOJ,SAAK,QAAL;AACI,aAAON,gBAAgB,CAACC,IAAD,EAAOC,KAAP,CAAvB;;AACJ;AACI,aAAOD,IAAI,CAACG,MAAL,CAAY,UAACC,IAAD,EAAsBC,IAAtB,EAA2D;AAC1E,YAAIJ,KAAK,CAACK,EAAN,KAAaD,IAAI,CAACC,EAAtB,EAA0B;AACtBF,UAAAA,IAAI,CAACG,IAAL,CAAUF,IAAV;AACH;;AAED,eAAOD,IAAP;AACH,OANM,EAMJ,EANI,CAAP;AAzBR;AAiCH,CAnCM","sourcesContent":["import { OrderCommon } from '../../types';\n\nconst ListReduceHelper = (list, order) => {\n    const listReduce = list.reduce((memo: OrderCommon[], item: OrderCommon): OrderCommon[] => {\n        if (order.id !== item.id) {\n            memo.push(item);\n        }\n\n        return memo;\n    }, []);\n\n    return [{...order}].concat(listReduce);\n};\n\nexport const insertOrUpdate = (list: OrderCommon[], order: OrderCommon): OrderCommon[] => {\n    const index = list.findIndex((value: OrderCommon) => value.id === order.id);\n    switch (order.state) {\n        case 'wait':\n            if (index === -1) {\n                return [{...order}].concat(list);\n            }\n            if (index !== -1) {\n                return ListReduceHelper(list, order);\n            }\n\n            return list;\n        case 'done':\n            if (index === -1) {\n                return [{...order}].concat(list);\n            }\n\n            return list.map(item => {\n                if (order.id === item.id) {\n                    return {...order};\n                }\n\n                return item;\n            });\n        case 'cancel':\n            return ListReduceHelper(list, order);\n        default:\n            return list.reduce((memo: OrderCommon[], item: OrderCommon): OrderCommon[] => {\n                if (order.id !== item.id) {\n                    memo.push(item);\n                }\n\n                return memo;\n            }, []);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}