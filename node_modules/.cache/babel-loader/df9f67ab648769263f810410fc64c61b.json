{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { SET_MOBILE_WALLET_UI, WALLETS_ADDRESS_DATA, WALLETS_ADDRESS_DATA_WS, WALLETS_ADDRESS_ERROR, WALLETS_ADDRESS_FETCH, WALLETS_DATA, WALLETS_DATA_WS, WALLETS_ERROR, WALLETS_FETCH, WALLETS_RESET, WALLETS_WITHDRAW_CCY_DATA, WALLETS_WITHDRAW_CCY_ERROR, WALLETS_WITHDRAW_CCY_FETCH } from './constants';\nexport var initialWalletsState = {\n  wallets: {\n    list: [],\n    loading: false,\n    withdrawSuccess: false,\n    mobileWalletChosen: '',\n    selectedWalletCurrency: '',\n    selectedWalletAddress: ''\n  }\n};\n\nvar walletsListReducer = function walletsListReducer(state, action) {\n  switch (action.type) {\n    case WALLETS_ADDRESS_FETCH:\n    case WALLETS_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        timestamp: Math.floor(Date.now() / 1000)\n      });\n\n    case WALLETS_WITHDRAW_CCY_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        withdrawSuccess: false\n      });\n\n    case WALLETS_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          list: action.payload\n        });\n      }\n\n    case WALLETS_DATA_WS:\n      {\n        var updatedList = state.list;\n\n        if (state.list.length) {\n          updatedList = state.list.map(function (wallet) {\n            var updatedWallet = wallet;\n            var payloadCurrencies = Object.keys(action.payload.balances);\n\n            if (payloadCurrencies.length) {\n              payloadCurrencies.some(function (value) {\n                var targetWallet = action.payload.balances[value];\n\n                if (value === wallet.currency) {\n                  updatedWallet = _objectSpread(_objectSpread({}, updatedWallet), {}, {\n                    balance: targetWallet && targetWallet[0] ? targetWallet[0] : updatedWallet.balance,\n                    locked: targetWallet && targetWallet[1] ? targetWallet[1] : updatedWallet.locked\n                  });\n                  return true;\n                }\n\n                return false;\n              });\n            }\n\n            return updatedWallet;\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          list: updatedList\n        });\n      }\n\n    case WALLETS_ADDRESS_DATA:\n      {\n        var walletIndex = state.list.findIndex(function (wallet) {\n          return wallet.currency.toLowerCase() === action.payload.currency.toLowerCase();\n        });\n\n        if (walletIndex !== -1) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            loading: false,\n            selectedWalletCurrency: action.payload.currency,\n            selectedWalletAddress: action.payload.address\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false\n        });\n      }\n\n    case WALLETS_WITHDRAW_CCY_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        withdrawSuccess: true\n      });\n\n    case WALLETS_ADDRESS_DATA_WS:\n      {\n        if (action.payload.currencies.includes(state.selectedWalletCurrency)) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            loading: false,\n            selectedWalletAddress: action.payload.address\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false\n        });\n      }\n\n    case WALLETS_WITHDRAW_CCY_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        withdrawSuccess: false,\n        error: action.error\n      });\n\n    case WALLETS_ADDRESS_ERROR:\n    case WALLETS_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.error\n      });\n\n    case SET_MOBILE_WALLET_UI:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mobileWalletChosen: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport var walletsReducer = function walletsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialWalletsState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case WALLETS_FETCH:\n    case WALLETS_DATA:\n    case WALLETS_DATA_WS:\n    case WALLETS_ERROR:\n    case WALLETS_ADDRESS_FETCH:\n    case WALLETS_ADDRESS_DATA:\n    case WALLETS_ADDRESS_DATA_WS:\n    case WALLETS_ADDRESS_ERROR:\n    case WALLETS_WITHDRAW_CCY_FETCH:\n    case WALLETS_WITHDRAW_CCY_DATA:\n    case SET_MOBILE_WALLET_UI:\n    case WALLETS_WITHDRAW_CCY_ERROR:\n      var walletsListState = _objectSpread({}, state.wallets);\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        wallets: walletsListReducer(walletsListState, action)\n      });\n\n    case WALLETS_RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        wallets: {\n          list: [],\n          loading: false,\n          withdrawSuccess: false,\n          mobileWalletChosen: '',\n          selectedWalletCurrency: '',\n          selectedWalletAddress: ''\n        }\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/wallets/reducer.ts"],"names":["SET_MOBILE_WALLET_UI","WALLETS_ADDRESS_DATA","WALLETS_ADDRESS_DATA_WS","WALLETS_ADDRESS_ERROR","WALLETS_ADDRESS_FETCH","WALLETS_DATA","WALLETS_DATA_WS","WALLETS_ERROR","WALLETS_FETCH","WALLETS_RESET","WALLETS_WITHDRAW_CCY_DATA","WALLETS_WITHDRAW_CCY_ERROR","WALLETS_WITHDRAW_CCY_FETCH","initialWalletsState","wallets","list","loading","withdrawSuccess","mobileWalletChosen","selectedWalletCurrency","selectedWalletAddress","walletsListReducer","state","action","type","timestamp","Math","floor","Date","now","payload","updatedList","length","map","wallet","updatedWallet","payloadCurrencies","Object","keys","balances","some","value","targetWallet","currency","balance","locked","walletIndex","findIndex","toLowerCase","address","currencies","includes","error","walletsReducer","walletsListState"],"mappings":";AAEA,SACIA,oBADJ,EAEIC,oBAFJ,EAGIC,uBAHJ,EAIIC,qBAJJ,EAKIC,qBALJ,EAMIC,YANJ,EAOIC,eAPJ,EAQIC,aARJ,EASIC,aATJ,EAUIC,aAVJ,EAWIC,yBAXJ,EAYIC,0BAZJ,EAaIC,0BAbJ,QAcO,aAdP;AA8BA,OAAO,IAAMC,mBAAiC,GAAG;AAC7CC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,OAAO,EAAE,KAFJ;AAGLC,IAAAA,eAAe,EAAE,KAHZ;AAILC,IAAAA,kBAAkB,EAAE,EAJf;AAKLC,IAAAA,sBAAsB,EAAE,EALnB;AAMLC,IAAAA,qBAAqB,EAAE;AANlB;AADoC,CAA1C;;AAWP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAiCC,MAAjC,EAAoF;AAC3G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKpB,qBAAL;AACA,SAAKI,aAAL;AACI,6CACOc,KADP;AAEIN,QAAAA,OAAO,EAAE,IAFb;AAGIS,QAAAA,SAAS,EAAEC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB;AAHf;;AAKJ,SAAKjB,0BAAL;AACI,6CACOU,KADP;AAEIN,QAAAA,OAAO,EAAE,IAFb;AAGIC,QAAAA,eAAe,EAAE;AAHrB;;AAKJ,SAAKZ,YAAL;AAAmB;AACf,+CACOiB,KADP;AAEIN,UAAAA,OAAO,EAAE,KAFb;AAGID,UAAAA,IAAI,EAAEQ,MAAM,CAACO;AAHjB;AAKH;;AACD,SAAKxB,eAAL;AAAsB;AAClB,YAAIyB,WAAW,GAAGT,KAAK,CAACP,IAAxB;;AAEA,YAAIO,KAAK,CAACP,IAAN,CAAWiB,MAAf,EAAuB;AACnBD,UAAAA,WAAW,GAAGT,KAAK,CAACP,IAAN,CAAWkB,GAAX,CAAe,UAAAC,MAAM,EAAI;AACnC,gBAAIC,aAAa,GAAGD,MAApB;AACA,gBAAME,iBAAiB,GAAGC,MAAM,CAACC,IAAP,CAAYf,MAAM,CAACO,OAAP,CAAeS,QAA3B,CAA1B;;AAEA,gBAAIH,iBAAiB,CAACJ,MAAtB,EAA8B;AAC1BI,cAAAA,iBAAiB,CAACI,IAAlB,CAAuB,UAAAC,KAAK,EAAI;AAC5B,oBAAMC,YAAY,GAAGnB,MAAM,CAACO,OAAP,CAAeS,QAAf,CAAwBE,KAAxB,CAArB;;AAEA,oBAAIA,KAAK,KAAKP,MAAM,CAACS,QAArB,EAA+B;AAC3BR,kBAAAA,aAAa,mCACNA,aADM;AAETS,oBAAAA,OAAO,EAAEF,YAAY,IAAIA,YAAY,CAAC,CAAD,CAA5B,GAAkCA,YAAY,CAAC,CAAD,CAA9C,GAAoDP,aAAa,CAACS,OAFlE;AAGTC,oBAAAA,MAAM,EAAEH,YAAY,IAAIA,YAAY,CAAC,CAAD,CAA5B,GAAkCA,YAAY,CAAC,CAAD,CAA9C,GAAoDP,aAAa,CAACU;AAHjE,oBAAb;AAMA,yBAAO,IAAP;AACH;;AAED,uBAAO,KAAP;AACH,eAdD;AAeH;;AAED,mBAAOV,aAAP;AACH,WAvBa,CAAd;AAwBH;;AAED,+CACOb,KADP;AAEIN,UAAAA,OAAO,EAAE,KAFb;AAGID,UAAAA,IAAI,EAAEgB;AAHV;AAKH;;AACD,SAAK9B,oBAAL;AAA2B;AACvB,YAAM6C,WAAW,GAAGxB,KAAK,CAACP,IAAN,CAAWgC,SAAX,CAChB,UAAAb,MAAM;AAAA,iBAAIA,MAAM,CAACS,QAAP,CAAgBK,WAAhB,OAAkCzB,MAAM,CAACO,OAAP,CAAea,QAAf,CAAwBK,WAAxB,EAAtC;AAAA,SADU,CAApB;;AAIA,YAAIF,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,iDACOxB,KADP;AAEIN,YAAAA,OAAO,EAAE,KAFb;AAGIG,YAAAA,sBAAsB,EAAEI,MAAM,CAACO,OAAP,CAAea,QAH3C;AAIIvB,YAAAA,qBAAqB,EAAEG,MAAM,CAACO,OAAP,CAAemB;AAJ1C;AAMH;;AAED,+CACO3B,KADP;AAEIN,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD,SAAKN,yBAAL;AACI,6CACOY,KADP;AAEIN,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,eAAe,EAAE;AAHrB;;AAKJ,SAAKf,uBAAL;AAA8B;AAC1B,YAAIqB,MAAM,CAACO,OAAP,CAAeoB,UAAf,CAA0BC,QAA1B,CAAmC7B,KAAK,CAACH,sBAAzC,CAAJ,EAAsE;AAClE,iDACOG,KADP;AAEIN,YAAAA,OAAO,EAAE,KAFb;AAGII,YAAAA,qBAAqB,EAAEG,MAAM,CAACO,OAAP,CAAemB;AAH1C;AAKH;;AAED,+CACO3B,KADP;AAEIN,UAAAA,OAAO,EAAE;AAFb;AAIC;;AACL,SAAKL,0BAAL;AACI,6CACOW,KADP;AAEIN,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,eAAe,EAAE,KAHrB;AAIImC,QAAAA,KAAK,EAAE7B,MAAM,CAAC6B;AAJlB;;AAMJ,SAAKjD,qBAAL;AACA,SAAKI,aAAL;AACI,6CACOe,KADP;AAEIN,QAAAA,OAAO,EAAE,KAFb;AAGIoC,QAAAA,KAAK,EAAE7B,MAAM,CAAC6B;AAHlB;;AAMJ,SAAKpD,oBAAL;AACI,6CAAYsB,KAAZ;AAAmBJ,QAAAA,kBAAkB,EAAEK,MAAM,CAACO;AAA9C;;AACJ;AACI,aAAOR,KAAP;AAlHR;AAoHH,CArHD;;AAuHA,OAAO,IAAM+B,cAAc,GAAG,SAAjBA,cAAiB,GAAsE;AAAA,MAArE/B,KAAqE,uEAA7DT,mBAA6D;AAAA,MAAxCU,MAAwC;;AAChG,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,aAAL;AACA,SAAKH,YAAL;AACA,SAAKC,eAAL;AACA,SAAKC,aAAL;AACA,SAAKH,qBAAL;AACA,SAAKH,oBAAL;AACA,SAAKC,uBAAL;AACA,SAAKC,qBAAL;AACA,SAAKS,0BAAL;AACA,SAAKF,yBAAL;AACA,SAAKV,oBAAL;AACA,SAAKW,0BAAL;AACI,UAAM2C,gBAAgB,qBAAQhC,KAAK,CAACR,OAAd,CAAtB;;AAEA,6CACOQ,KADP;AAEIR,QAAAA,OAAO,EAAEO,kBAAkB,CAACiC,gBAAD,EAAmB/B,MAAnB;AAF/B;;AAIJ,SAAKd,aAAL;AACI,6CACOa,KADP;AAEIR,QAAAA,OAAO,EAAE;AACLC,UAAAA,IAAI,EAAE,EADD;AAELC,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,eAAe,EAAE,KAHZ;AAILC,UAAAA,kBAAkB,EAAE,EAJf;AAKLC,UAAAA,sBAAsB,EAAE,EALnB;AAMLC,UAAAA,qBAAqB,EAAE;AANlB;AAFb;;AAWJ;AACI,aAAOE,KAAP;AAhCR;AAkCH,CAnCM","sourcesContent":["import { CommonError } from '../../types';\nimport { WalletsAction } from './actions';\nimport {\n    SET_MOBILE_WALLET_UI,\n    WALLETS_ADDRESS_DATA,\n    WALLETS_ADDRESS_DATA_WS,\n    WALLETS_ADDRESS_ERROR,\n    WALLETS_ADDRESS_FETCH,\n    WALLETS_DATA,\n    WALLETS_DATA_WS,\n    WALLETS_ERROR,\n    WALLETS_FETCH,\n    WALLETS_RESET,\n    WALLETS_WITHDRAW_CCY_DATA,\n    WALLETS_WITHDRAW_CCY_ERROR,\n    WALLETS_WITHDRAW_CCY_FETCH,\n} from './constants';\nimport { Wallet } from './types';\n\nexport interface WalletsState {\n    wallets: {\n        list: Wallet[];\n        loading: boolean;\n        withdrawSuccess: boolean;\n        error?: CommonError;\n        mobileWalletChosen: string;\n        selectedWalletCurrency: string;\n        selectedWalletAddress: string;\n        timestamp?: number;\n    };\n}\n\nexport const initialWalletsState: WalletsState = {\n    wallets: {\n        list: [],\n        loading: false,\n        withdrawSuccess: false,\n        mobileWalletChosen: '',\n        selectedWalletCurrency: '',\n        selectedWalletAddress: '',\n    },\n};\n\nconst walletsListReducer = (state: WalletsState['wallets'], action: WalletsAction): WalletsState['wallets'] => {\n    switch (action.type) {\n        case WALLETS_ADDRESS_FETCH:\n        case WALLETS_FETCH:\n            return {\n                ...state,\n                loading: true,\n                timestamp: Math.floor(Date.now() / 1000),\n            };\n        case WALLETS_WITHDRAW_CCY_FETCH:\n            return {\n                ...state,\n                loading: true,\n                withdrawSuccess: false,\n            };\n        case WALLETS_DATA: {\n            return {\n                ...state,\n                loading: false,\n                list: action.payload,\n            };\n        }\n        case WALLETS_DATA_WS: {\n            let updatedList = state.list;\n\n            if (state.list.length) {\n                updatedList = state.list.map(wallet => {\n                    let updatedWallet = wallet;\n                    const payloadCurrencies = Object.keys(action.payload.balances);\n\n                    if (payloadCurrencies.length) {\n                        payloadCurrencies.some(value => {\n                            const targetWallet = action.payload.balances[value];\n\n                            if (value === wallet.currency) {\n                                updatedWallet = {\n                                    ...updatedWallet,\n                                    balance: targetWallet && targetWallet[0] ? targetWallet[0] : updatedWallet.balance,\n                                    locked: targetWallet && targetWallet[1] ? targetWallet[1] : updatedWallet.locked,\n                                };\n\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    }\n\n                    return updatedWallet;\n                });\n            }\n\n            return {\n                ...state,\n                loading: false,\n                list: updatedList,\n            };\n        }\n        case WALLETS_ADDRESS_DATA: {\n            const walletIndex = state.list.findIndex(\n                wallet => wallet.currency.toLowerCase() === action.payload.currency.toLowerCase(),\n            );\n\n            if (walletIndex !== -1) {\n                return {\n                    ...state,\n                    loading: false,\n                    selectedWalletCurrency: action.payload.currency,\n                    selectedWalletAddress: action.payload.address,\n                };\n            }\n\n            return {\n                ...state,\n                loading: false,\n            };\n        }\n        case WALLETS_WITHDRAW_CCY_DATA:\n            return {\n                ...state,\n                loading: false,\n                withdrawSuccess: true,\n            };\n        case WALLETS_ADDRESS_DATA_WS: {\n            if (action.payload.currencies.includes(state.selectedWalletCurrency)) {\n                return {\n                    ...state,\n                    loading: false,\n                    selectedWalletAddress: action.payload.address,\n                };\n            }\n\n            return {\n                ...state,\n                loading: false,\n            };\n            }\n        case WALLETS_WITHDRAW_CCY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                withdrawSuccess: false,\n                error: action.error,\n            };\n        case WALLETS_ADDRESS_ERROR:\n        case WALLETS_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n\n        case SET_MOBILE_WALLET_UI:\n            return { ...state, mobileWalletChosen: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const walletsReducer = (state = initialWalletsState, action: WalletsAction): WalletsState => {\n    switch (action.type) {\n        case WALLETS_FETCH:\n        case WALLETS_DATA:\n        case WALLETS_DATA_WS:\n        case WALLETS_ERROR:\n        case WALLETS_ADDRESS_FETCH:\n        case WALLETS_ADDRESS_DATA:\n        case WALLETS_ADDRESS_DATA_WS:\n        case WALLETS_ADDRESS_ERROR:\n        case WALLETS_WITHDRAW_CCY_FETCH:\n        case WALLETS_WITHDRAW_CCY_DATA:\n        case SET_MOBILE_WALLET_UI:\n        case WALLETS_WITHDRAW_CCY_ERROR:\n            const walletsListState = { ...state.wallets };\n\n            return {\n                ...state,\n                wallets: walletsListReducer(walletsListState, action),\n            };\n        case WALLETS_RESET:\n            return {\n                ...state,\n                wallets: {\n                    list: [],\n                    loading: false,\n                    withdrawSuccess: false,\n                    mobileWalletChosen: '',\n                    selectedWalletCurrency: '',\n                    selectedWalletAddress: '',\n                },\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}