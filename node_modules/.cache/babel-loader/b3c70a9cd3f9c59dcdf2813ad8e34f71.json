{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/SignUp/index.tsx\";\n\nimport cr from 'classnames';\nimport React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { CustomInput, PasswordStrengthMeter } from '../';\nimport { EMAIL_REGEX, PASSWORD_REGEX } from '../../helpers';\nimport { selectMobileDeviceState } from '../../modules/public/globalSettings';\n\nvar SignUpFormComponent = function SignUpFormComponent(_ref) {\n  var email = _ref.email,\n      confirmPassword = _ref.confirmPassword,\n      refId = _ref.refId,\n      onSignIn = _ref.onSignIn,\n      image = _ref.image,\n      isLoading = _ref.isLoading,\n      labelSignIn = _ref.labelSignIn,\n      labelSignUp = _ref.labelSignUp,\n      emailLabel = _ref.emailLabel,\n      confirmPasswordLabel = _ref.confirmPasswordLabel,\n      passwordFocused = _ref.passwordFocused,\n      referalCodeLabel = _ref.referalCodeLabel,\n      termsMessage = _ref.termsMessage,\n      captchaType = _ref.captchaType,\n      geetestCaptchaSuccess = _ref.geetestCaptchaSuccess,\n      hasConfirmed = _ref.hasConfirmed,\n      reCaptchaSuccess = _ref.reCaptchaSuccess,\n      currentPasswordEntropy = _ref.currentPasswordEntropy,\n      passwordPopUp = _ref.passwordPopUp,\n      password = _ref.password,\n      passwordLabel = _ref.passwordLabel,\n      emailError = _ref.emailError,\n      translate = _ref.translate,\n      confirmationError = _ref.confirmationError,\n      emailFocused = _ref.emailFocused,\n      passwordErrorFirstSolved = _ref.passwordErrorFirstSolved,\n      passwordErrorSecondSolved = _ref.passwordErrorSecondSolved,\n      confirmPasswordFocused = _ref.confirmPasswordFocused,\n      handleChangePassword = _ref.handleChangePassword,\n      passwordErrorThirdSolved = _ref.passwordErrorThirdSolved,\n      handleFocusPassword = _ref.handleFocusPassword,\n      minPasswordEntropy = _ref.minPasswordEntropy,\n      refIdFocused = _ref.refIdFocused,\n      validateForm = _ref.validateForm,\n      onSignUp = _ref.onSignUp,\n      handleChangeEmail = _ref.handleChangeEmail,\n      handleFocusEmail = _ref.handleFocusEmail,\n      handleChangeConfirmPassword = _ref.handleChangeConfirmPassword,\n      handleFocusConfirmPassword = _ref.handleFocusConfirmPassword,\n      handleChangeRefId = _ref.handleChangeRefId,\n      handleFocusRefId = _ref.handleFocusRefId,\n      clickCheckBox = _ref.clickCheckBox,\n      renderCaptcha = _ref.renderCaptcha;\n  var isMobileDevice = useSelector(selectMobileDeviceState);\n  var history = useHistory();\n\n  var _useIntl = useIntl(),\n      formatMessage = _useIntl.formatMessage;\n\n  var disableButton = React.useCallback(function () {\n    if (!hasConfirmed || isLoading || !email.match(EMAIL_REGEX) || !password || !confirmPassword) {\n      return true;\n    }\n\n    if (captchaType === 'recaptcha' && !reCaptchaSuccess) {\n      return true;\n    }\n\n    if (captchaType === 'geetest' && !geetestCaptchaSuccess) {\n      return true;\n    }\n\n    return false;\n  }, [captchaType, confirmPassword, email, geetestCaptchaSuccess, hasConfirmed, isLoading, password, reCaptchaSuccess]);\n  var renderPasswordInput = React.useCallback(function () {\n    var passwordGroupClass = cr('cr-sign-up-form__group', {\n      'cr-sign-up-form__group--focused': passwordFocused\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: passwordGroupClass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      type: \"password\",\n      label: passwordLabel || 'Password',\n      placeholder: passwordLabel || 'Password',\n      defaultLabel: \"Password\",\n      handleChangeInput: handleChangePassword,\n      inputValue: password,\n      handleFocusInput: handleFocusPassword,\n      classNameLabel: \"cr-sign-up-form__label\",\n      classNameInput: \"cr-sign-up-form__input\",\n      autoFocus: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }), password ? /*#__PURE__*/React.createElement(PasswordStrengthMeter, {\n      minPasswordEntropy: minPasswordEntropy,\n      currentPasswordEntropy: currentPasswordEntropy,\n      passwordExist: password !== '',\n      passwordErrorFirstSolved: passwordErrorFirstSolved,\n      passwordErrorSecondSolved: passwordErrorSecondSolved,\n      passwordErrorThirdSolved: passwordErrorThirdSolved,\n      passwordPopUp: passwordPopUp,\n      translate: translate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }) : null);\n  }, [currentPasswordEntropy, password, passwordFocused, passwordLabel, passwordPopUp, handleChangePassword, handleFocusPassword, minPasswordEntropy, passwordErrorFirstSolved, passwordErrorSecondSolved, passwordErrorThirdSolved, translate]);\n  var handleSubmitForm = React.useCallback(function () {\n    onSignUp();\n  }, [onSignUp]);\n  var isValidForm = React.useCallback(function () {\n    var isEmailValid = email.match(EMAIL_REGEX);\n    var isPasswordValid = password.match(PASSWORD_REGEX);\n    var isConfirmPasswordValid = password === confirmPassword;\n    return email && isEmailValid && password && isPasswordValid && confirmPassword && isConfirmPasswordValid;\n  }, [confirmPassword, email, password]);\n  var handleClick = React.useCallback(function (e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (!isValidForm()) {\n      validateForm();\n    } else {\n      handleSubmitForm();\n    }\n  }, [handleSubmitForm, isValidForm, validateForm]);\n  var handleEnterPress = React.useCallback(function (event) {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleClick();\n    }\n  }, [handleClick]);\n  var renderLogIn = React.useCallback(function () {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pg-sign-up-screen__login\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }, formatMessage({\n      id: 'page.header.signUp.alreadyRegistered'\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      onClick: function onClick() {\n        return history.push('/signin');\n      },\n      className: \"pg-sign-up-screen__login-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }\n    }, formatMessage({\n      id: 'page.mobile.header.signIn'\n    }))));\n  }, [history, formatMessage]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form\",\n    onKeyPress: handleEnterPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, !isMobileDevice && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__options-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__option\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__option-inner cr-sign-in-form__tab-signin\",\n    onClick: onSignIn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 29\n    }\n  }, labelSignIn || 'Sign In')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__option\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__option-inner __selected\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 29\n    }\n  }, labelSignUp || 'Sign Up'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__form-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }, image ? /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"cr-sign-up-form__title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"cr-sign-up-form__image\",\n    src: image,\n    alt: \"logo\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 29\n    }\n  })) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: cr('cr-sign-up-form__group', {\n      'cr-sign-up-form__group--focused': emailFocused\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"email\",\n    label: emailLabel || 'Email',\n    placeholder: emailLabel || 'Email',\n    defaultLabel: \"Email\",\n    handleChangeInput: handleChangeEmail,\n    inputValue: email,\n    handleFocusInput: handleFocusEmail,\n    classNameLabel: \"cr-sign-up-form__label\",\n    classNameInput: \"cr-sign-up-form__input\",\n    autoFocus: !isMobileDevice,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 25\n    }\n  }), emailError && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 40\n    }\n  }, emailError)), renderPasswordInput(), /*#__PURE__*/React.createElement(\"div\", {\n    className: cr('cr-sign-up-form__group', {\n      'cr-sign-up-form__group--focused': confirmPasswordFocused\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"password\",\n    label: confirmPasswordLabel || 'Confirm Password',\n    placeholder: confirmPasswordLabel || 'Confirm Password',\n    defaultLabel: \"Confirm Password\",\n    handleChangeInput: handleChangeConfirmPassword,\n    inputValue: confirmPassword,\n    handleFocusInput: handleFocusConfirmPassword,\n    classNameLabel: \"cr-sign-up-form__label\",\n    classNameInput: \"cr-sign-up-form__input\",\n    autoFocus: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 25\n    }\n  }), confirmationError && /*#__PURE__*/React.createElement(\"div\", {\n    className: 'cr-sign-up-form__error',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 47\n    }\n  }, confirmationError)), /*#__PURE__*/React.createElement(\"div\", {\n    className: cr('cr-sign-up-form__group', {\n      'cr-sign-up-form__group--focused': refIdFocused\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"text\",\n    label: referalCodeLabel || 'Referral code',\n    placeholder: referalCodeLabel || 'Referral code',\n    defaultLabel: \"Referral code\",\n    handleChangeInput: handleChangeRefId,\n    inputValue: refId,\n    handleFocusInput: handleFocusRefId,\n    classNameLabel: \"cr-sign-up-form__label\",\n    classNameInput: \"cr-sign-up-form__input\",\n    autoFocus: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form, {\n    className: \"cr-sign-up-form__group\",\n    onClick: clickCheckBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    custom: true,\n    id: \"agreeWithTerms\",\n    checked: hasConfirmed,\n    label: termsMessage ? termsMessage : 'I  agree all statements in terms of service',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 25\n    }\n  })), renderCaptcha, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-sign-up-form__button-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    block: true,\n    type: \"button\",\n    disabled: disableButton(),\n    onClick: function onClick(e) {\n      return handleClick(e);\n    },\n    size: \"lg\",\n    variant: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 25\n    }\n  }, isLoading ? 'Loading...' : labelSignUp ? labelSignUp : 'Sign up')), isMobileDevice && renderLogIn())));\n};\n\nexport var SignUpForm = React.memo(SignUpFormComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/SignUp/index.tsx"],"names":["cr","React","Button","Form","useIntl","useSelector","useHistory","CustomInput","PasswordStrengthMeter","EMAIL_REGEX","PASSWORD_REGEX","selectMobileDeviceState","SignUpFormComponent","email","confirmPassword","refId","onSignIn","image","isLoading","labelSignIn","labelSignUp","emailLabel","confirmPasswordLabel","passwordFocused","referalCodeLabel","termsMessage","captchaType","geetestCaptchaSuccess","hasConfirmed","reCaptchaSuccess","currentPasswordEntropy","passwordPopUp","password","passwordLabel","emailError","translate","confirmationError","emailFocused","passwordErrorFirstSolved","passwordErrorSecondSolved","confirmPasswordFocused","handleChangePassword","passwordErrorThirdSolved","handleFocusPassword","minPasswordEntropy","refIdFocused","validateForm","onSignUp","handleChangeEmail","handleFocusEmail","handleChangeConfirmPassword","handleFocusConfirmPassword","handleChangeRefId","handleFocusRefId","clickCheckBox","renderCaptcha","isMobileDevice","history","formatMessage","disableButton","useCallback","match","renderPasswordInput","passwordGroupClass","handleSubmitForm","isValidForm","isEmailValid","isPasswordValid","isConfirmPasswordValid","handleClick","e","preventDefault","handleEnterPress","event","key","renderLogIn","id","push","SignUpForm","memo"],"mappings":"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","sourcesContent":["import cr from 'classnames';\nimport React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { CustomInput, PasswordStrengthMeter } from '../';\nimport { EMAIL_REGEX, PASSWORD_REGEX } from '../../helpers';\nimport { GeetestCaptchaResponse } from '../../modules';\nimport { selectMobileDeviceState } from '../../modules/public/globalSettings';\n\nexport interface SignUpFormProps {\n    isLoading?: boolean;\n    title?: string;\n    onSignUp: () => void;\n    onSignIn?: () => void;\n    className?: string;\n    image?: string;\n    labelSignIn?: string;\n    labelSignUp?: string;\n    emailLabel?: string;\n    passwordLabel?: string;\n    confirmPasswordLabel?: string;\n    referalCodeLabel?: string;\n    termsMessage?: string;\n    refId: string;\n    password: string;\n    email: string;\n    confirmPassword: string;\n    handleChangeEmail: (value: string) => void;\n    handleChangePassword: (value: string) => void;\n    handleChangeConfirmPassword: (value: string) => void;\n    handleChangeRefId: (value: string) => void;\n    hasConfirmed: boolean;\n    clickCheckBox: (e: any) => void;\n    validateForm: () => void;\n    emailError: string;\n    passwordError: string;\n    confirmationError: string;\n    handleFocusEmail: () => void;\n    handleFocusPassword: () => void;\n    handleFocusConfirmPassword: () => void;\n    handleFocusRefId: () => void;\n    confirmPasswordFocused: boolean;\n    refIdFocused: boolean;\n    emailFocused: boolean;\n    passwordFocused: boolean;\n    captchaType: 'recaptcha' | 'geetest' | 'none';\n    renderCaptcha: JSX.Element | null;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n    captcha_response?: string | GeetestCaptchaResponse;\n    currentPasswordEntropy: number;\n    minPasswordEntropy: number;\n    passwordErrorFirstSolved: boolean;\n    passwordErrorSecondSolved: boolean;\n    passwordErrorThirdSolved: boolean;\n    passwordPopUp: boolean;\n    myRef: any;\n    passwordWrapper: any;\n    translate: (id: string) => string;\n}\n\nconst SignUpFormComponent: React.FC<SignUpFormProps> = ({\n    email,\n    confirmPassword,\n    refId,\n    onSignIn,\n    image,\n    isLoading,\n    labelSignIn,\n    labelSignUp,\n    emailLabel,\n    confirmPasswordLabel,\n    passwordFocused,\n    referalCodeLabel,\n    termsMessage,\n    captchaType,\n    geetestCaptchaSuccess,\n    hasConfirmed,\n    reCaptchaSuccess,\n    currentPasswordEntropy,\n    passwordPopUp,\n    password,\n    passwordLabel,\n    emailError,\n    translate,\n    confirmationError,\n    emailFocused,\n    passwordErrorFirstSolved,\n    passwordErrorSecondSolved,\n    confirmPasswordFocused,\n    handleChangePassword,\n    passwordErrorThirdSolved,\n    handleFocusPassword,\n    minPasswordEntropy,\n    refIdFocused,\n    validateForm,\n    onSignUp,\n    handleChangeEmail,\n    handleFocusEmail,\n    handleChangeConfirmPassword,\n    handleFocusConfirmPassword,\n    handleChangeRefId,\n    handleFocusRefId,\n    clickCheckBox,\n    renderCaptcha,\n}) => {\n    const isMobileDevice = useSelector(selectMobileDeviceState);\n    const history = useHistory();\n    const { formatMessage } = useIntl();\n\n    const disableButton = React.useCallback((): boolean => {\n        if (!hasConfirmed || isLoading || !email.match(EMAIL_REGEX) || !password || !confirmPassword) {\n            return true;\n        }\n        if (captchaType === 'recaptcha' && !reCaptchaSuccess) {\n            return true;\n        }\n        if (captchaType === 'geetest' && !geetestCaptchaSuccess) {\n            return true;\n        }\n\n        return false;\n    }, [\n        captchaType,\n        confirmPassword,\n        email,\n        geetestCaptchaSuccess,\n        hasConfirmed,\n        isLoading,\n        password,\n        reCaptchaSuccess,\n    ]);\n\n    const renderPasswordInput = React.useCallback(() => {\n        const passwordGroupClass = cr('cr-sign-up-form__group', {\n            'cr-sign-up-form__group--focused': passwordFocused,\n        });\n\n        return (\n            <div className={passwordGroupClass}>\n                <CustomInput\n                    type=\"password\"\n                    label={passwordLabel || 'Password'}\n                    placeholder={passwordLabel || 'Password'}\n                    defaultLabel=\"Password\"\n                    handleChangeInput={handleChangePassword}\n                    inputValue={password}\n                    handleFocusInput={handleFocusPassword}\n                    classNameLabel=\"cr-sign-up-form__label\"\n                    classNameInput=\"cr-sign-up-form__input\"\n                    autoFocus={false}\n                />\n                {password ? (\n                    <PasswordStrengthMeter\n                        minPasswordEntropy={minPasswordEntropy}\n                        currentPasswordEntropy={currentPasswordEntropy}\n                        passwordExist={password !== ''}\n                        passwordErrorFirstSolved={passwordErrorFirstSolved}\n                        passwordErrorSecondSolved={passwordErrorSecondSolved}\n                        passwordErrorThirdSolved={passwordErrorThirdSolved}\n                        passwordPopUp={passwordPopUp}\n                        translate={translate}\n                    />\n                ) : null}\n            </div>\n        );\n    }, [\n        currentPasswordEntropy,\n        password,\n        passwordFocused,\n        passwordLabel,\n        passwordPopUp,\n        handleChangePassword,\n        handleFocusPassword,\n        minPasswordEntropy,\n        passwordErrorFirstSolved,\n        passwordErrorSecondSolved,\n        passwordErrorThirdSolved,\n        translate,\n    ]);\n\n    const handleSubmitForm = React.useCallback(() => {\n        onSignUp();\n    }, [onSignUp]);\n\n    const isValidForm = React.useCallback(() => {\n        const isEmailValid = email.match(EMAIL_REGEX);\n        const isPasswordValid = password.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = password === confirmPassword;\n\n        return email && isEmailValid && password && isPasswordValid && confirmPassword && isConfirmPasswordValid;\n    }, [confirmPassword, email, password]);\n\n    const handleClick = React.useCallback(\n        (e?: React.FormEvent<HTMLInputElement>) => {\n            if (e) {\n                e.preventDefault();\n            }\n\n            if (!isValidForm()) {\n                validateForm();\n            } else {\n                handleSubmitForm();\n            }\n        },\n        [handleSubmitForm, isValidForm, validateForm]\n    );\n\n    const handleEnterPress = React.useCallback(\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n\n                handleClick();\n            }\n        },\n        [handleClick]\n    );\n\n    const renderLogIn = React.useCallback(() => {\n        return (\n            <div className=\"pg-sign-up-screen__login\">\n                <span>\n                    {formatMessage({ id: 'page.header.signUp.alreadyRegistered' })}\n                    <span onClick={() => history.push('/signin')} className=\"pg-sign-up-screen__login-button\">\n                        {formatMessage({ id: 'page.mobile.header.signIn' })}\n                    </span>\n                </span>\n            </div>\n        );\n    }, [history, formatMessage]);\n\n    return (\n        <form>\n            <div className=\"cr-sign-up-form\" onKeyPress={handleEnterPress}>\n                {!isMobileDevice && (\n                    <div className=\"cr-sign-up-form__options-group\">\n                        <div className=\"cr-sign-up-form__option\">\n                            <div\n                                className=\"cr-sign-up-form__option-inner cr-sign-in-form__tab-signin\"\n                                onClick={onSignIn}>\n                                {labelSignIn || 'Sign In'}\n                            </div>\n                        </div>\n                        <div className=\"cr-sign-up-form__option\">\n                            <div className=\"cr-sign-up-form__option-inner __selected\">{labelSignUp || 'Sign Up'}</div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"cr-sign-up-form__form-content\">\n                    {image ? (\n                        <h1 className=\"cr-sign-up-form__title\">\n                            <img className=\"cr-sign-up-form__image\" src={image} alt=\"logo\" />\n                        </h1>\n                    ) : null}\n                    <div\n                        className={cr('cr-sign-up-form__group', {\n                            'cr-sign-up-form__group--focused': emailFocused,\n                        })}>\n                        <CustomInput\n                            type=\"email\"\n                            label={emailLabel || 'Email'}\n                            placeholder={emailLabel || 'Email'}\n                            defaultLabel=\"Email\"\n                            handleChangeInput={handleChangeEmail}\n                            inputValue={email}\n                            handleFocusInput={handleFocusEmail}\n                            classNameLabel=\"cr-sign-up-form__label\"\n                            classNameInput=\"cr-sign-up-form__input\"\n                            autoFocus={!isMobileDevice}\n                        />\n                        {emailError && <div className=\"cr-sign-up-form__error\">{emailError}</div>}\n                    </div>\n                    {renderPasswordInput()}\n                    <div\n                        className={cr('cr-sign-up-form__group', {\n                            'cr-sign-up-form__group--focused': confirmPasswordFocused,\n                        })}>\n                        <CustomInput\n                            type=\"password\"\n                            label={confirmPasswordLabel || 'Confirm Password'}\n                            placeholder={confirmPasswordLabel || 'Confirm Password'}\n                            defaultLabel=\"Confirm Password\"\n                            handleChangeInput={handleChangeConfirmPassword}\n                            inputValue={confirmPassword}\n                            handleFocusInput={handleFocusConfirmPassword}\n                            classNameLabel=\"cr-sign-up-form__label\"\n                            classNameInput=\"cr-sign-up-form__input\"\n                            autoFocus={false}\n                        />\n                        {confirmationError && <div className={'cr-sign-up-form__error'}>{confirmationError}</div>}\n                    </div>\n                    <div\n                        className={cr('cr-sign-up-form__group', {\n                            'cr-sign-up-form__group--focused': refIdFocused,\n                        })}>\n                        <CustomInput\n                            type=\"text\"\n                            label={referalCodeLabel || 'Referral code'}\n                            placeholder={referalCodeLabel || 'Referral code'}\n                            defaultLabel=\"Referral code\"\n                            handleChangeInput={handleChangeRefId}\n                            inputValue={refId}\n                            handleFocusInput={handleFocusRefId}\n                            classNameLabel=\"cr-sign-up-form__label\"\n                            classNameInput=\"cr-sign-up-form__input\"\n                            autoFocus={false}\n                        />\n                    </div>\n                    <Form className=\"cr-sign-up-form__group\" onClick={clickCheckBox}>\n                        <Form.Check\n                            type=\"checkbox\"\n                            custom\n                            id=\"agreeWithTerms\"\n                            checked={hasConfirmed}\n                            label={termsMessage ? termsMessage : 'I  agree all statements in terms of service'}\n                        />\n                    </Form>\n                    {renderCaptcha}\n                    <div className=\"cr-sign-up-form__button-wrapper\">\n                        <Button\n                            block={true}\n                            type=\"button\"\n                            disabled={disableButton()}\n                            onClick={(e) => handleClick(e as any)}\n                            size=\"lg\"\n                            variant=\"primary\">\n                            {isLoading ? 'Loading...' : labelSignUp ? labelSignUp : 'Sign up'}\n                        </Button>\n                    </div>\n                    {isMobileDevice && renderLogIn()}\n                </div>\n            </div>\n        </form>\n    );\n};\n\nexport const SignUpForm = React.memo(SignUpFormComponent);\n"]},"metadata":{},"sourceType":"module"}