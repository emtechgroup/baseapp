{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/mobile/components/WalletWithdrawBody/index.tsx\";\n\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Blur } from '../../../components/Blur';\nimport { ModalWithdrawSubmit, Withdraw } from '../../../containers';\nimport { useBeneficiariesFetch, useCurrenciesFetch, useWalletsAddressFetch } from '../../../hooks';\nimport { selectCurrencies } from '../../../modules/public/currencies';\nimport { selectUserInfo } from '../../../modules/user/profile';\nimport { selectWithdrawSuccess, walletsWithdrawCcyFetch } from '../../../modules/user/wallets';\nimport { ModalWithdrawConfirmation } from '../../components';\nvar defaultBeneficiary = {\n  id: 0,\n  currency: '',\n  name: '',\n  state: '',\n  data: {\n    address: ''\n  }\n};\n\nvar WalletWithdrawBodyComponent = function WalletWithdrawBodyComponent(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      withdrawSubmitModal = _React$useState2[0],\n      setWithdrawSubmitModal = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    amount: '',\n    beneficiary: defaultBeneficiary,\n    otpCode: '',\n    withdrawConfirmModal: false,\n    total: '',\n    withdrawDone: false\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      withdrawData = _React$useState4[0],\n      setWithdrawData = _React$useState4[1];\n\n  var intl = useIntl();\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var user = useSelector(selectUserInfo);\n  var currencies = useSelector(selectCurrencies);\n  var withdrawSuccess = useSelector(selectWithdrawSuccess);\n  var _props$wallet = props.wallet,\n      currency = _props$wallet.currency,\n      fee = _props$wallet.fee,\n      type = _props$wallet.type;\n  var fixed = (props.wallet || {\n    fixed: 0\n  }).fixed;\n  var withdrawAmountLabel = React.useMemo(function () {\n    return intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.amount'\n    });\n  }, [intl]);\n  var withdraw2faLabel = React.useMemo(function () {\n    return intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.code2fa'\n    });\n  }, [intl]);\n  var withdrawFeeLabel = React.useMemo(function () {\n    return intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.fee'\n    });\n  }, [intl]);\n  var withdrawTotalLabel = React.useMemo(function () {\n    return intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.total'\n    });\n  }, [intl]);\n  var withdrawButtonLabel = React.useMemo(function () {\n    return intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.button'\n    });\n  }, [intl]);\n  var currencyItem = currencies && currencies.find(function (item) {\n    return item.id === currency;\n  });\n\n  var isTwoFactorAuthRequired = function isTwoFactorAuthRequired(level, is2faEnabled) {\n    return level > 1 || level === 1 && is2faEnabled;\n  };\n\n  var getConfirmationAddress = function getConfirmationAddress() {\n    var confirmationAddress = '';\n\n    if (props.wallet) {\n      confirmationAddress = props.wallet.type === 'fiat' ? withdrawData.beneficiary.name : withdrawData.beneficiary.data ? withdrawData.beneficiary.data.address : '';\n    }\n\n    return confirmationAddress;\n  };\n\n  var toggleConfirmModal = function toggleConfirmModal(amount, total, beneficiary, otpCode) {\n    setWithdrawData(function (state) {\n      return {\n        amount: amount || '',\n        beneficiary: beneficiary || defaultBeneficiary,\n        otpCode: otpCode || '',\n        withdrawConfirmModal: !state.withdrawConfirmModal,\n        total: total || '',\n        withdrawDone: false\n      };\n    });\n  };\n\n  var toggleSubmitModal = function toggleSubmitModal() {\n    setWithdrawSubmitModal(function (state) {\n      return !state;\n    });\n    setWithdrawData(function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        withdrawDone: true\n      });\n    });\n  };\n\n  var handleWithdraw = function handleWithdraw() {\n    var otpCode = withdrawData.otpCode,\n        amount = withdrawData.amount,\n        beneficiary = withdrawData.beneficiary;\n\n    if (!props.wallet) {\n      return;\n    }\n\n    var withdrawRequest = {\n      amount,\n      currency: currency.toLowerCase(),\n      otp: otpCode,\n      beneficiary_id: String(beneficiary.id)\n    };\n    dispatch(walletsWithdrawCcyFetch(withdrawRequest));\n    toggleConfirmModal();\n  };\n\n  var renderOtpDisabled = function renderOtpDisabled() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cr-mobile-wallet-withdraw__otp-disabled\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"cr-mobile-wallet-withdraw__otp-disabled__text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.enable2fa'\n    })), /*#__PURE__*/React.createElement(Button, {\n      block: true,\n      onClick: function onClick() {\n        return history.push('/profile/2fa');\n      },\n      size: \"lg\",\n      variant: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.content.enable2faButton'\n    })));\n  };\n\n  useWalletsAddressFetch(currency);\n  useBeneficiariesFetch();\n  useCurrenciesFetch();\n  React.useEffect(function () {\n    if (withdrawSuccess) {\n      toggleSubmitModal();\n    }\n  }, [withdrawSuccess]);\n  var className = classnames('cr-mobile-wallet-withdraw-body', {\n    'cr-mobile-wallet-withdraw-body--disabled': currencyItem && !currencyItem.withdrawal_enabled\n  });\n\n  if (!user.otp) {\n    return renderOtpDisabled();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, currencyItem && !currencyItem.withdrawal_enabled ? /*#__PURE__*/React.createElement(Blur, {\n    className: \"pg-blur-withdraw\",\n    text: intl.formatMessage({\n      id: 'page.body.wallets.tabs.withdraw.disabled.message'\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(Withdraw, {\n    isMobileDevice: true,\n    fee: fee,\n    type: type,\n    fixed: fixed,\n    currency: currency,\n    onClick: toggleConfirmModal,\n    withdrawAmountLabel: withdrawAmountLabel,\n    withdraw2faLabel: withdraw2faLabel,\n    withdrawFeeLabel: withdrawFeeLabel,\n    withdrawTotalLabel: withdrawTotalLabel,\n    withdrawDone: withdrawData.withdrawDone,\n    withdrawButtonLabel: withdrawButtonLabel,\n    twoFactorAuthRequired: isTwoFactorAuthRequired(user.level, user.otp),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-mobile-wallet-withdraw-body__submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ModalWithdrawSubmit, {\n    isMobileDevice: true,\n    show: withdrawSubmitModal,\n    currency: currency,\n    onSubmit: toggleSubmitModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-mobile-wallet-withdraw-body__confirmation\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ModalWithdrawConfirmation, {\n    show: withdrawData.withdrawConfirmModal,\n    amount: withdrawData.total,\n    currency: currency,\n    precision: currencyItem ? currencyItem.precision : 0,\n    rid: getConfirmationAddress(),\n    onSubmit: handleWithdraw,\n    onDismiss: toggleConfirmModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar WalletWithdrawBody = React.memo(WalletWithdrawBodyComponent);\nexport { WalletWithdrawBody };","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/mobile/components/WalletWithdrawBody/index.tsx"],"names":["classnames","React","Button","useIntl","useDispatch","useSelector","useHistory","Blur","ModalWithdrawSubmit","Withdraw","useBeneficiariesFetch","useCurrenciesFetch","useWalletsAddressFetch","selectCurrencies","selectUserInfo","selectWithdrawSuccess","walletsWithdrawCcyFetch","ModalWithdrawConfirmation","defaultBeneficiary","id","currency","name","state","data","address","WalletWithdrawBodyComponent","props","useState","withdrawSubmitModal","setWithdrawSubmitModal","amount","beneficiary","otpCode","withdrawConfirmModal","total","withdrawDone","withdrawData","setWithdrawData","intl","history","dispatch","user","currencies","withdrawSuccess","wallet","fee","type","fixed","withdrawAmountLabel","useMemo","formatMessage","withdraw2faLabel","withdrawFeeLabel","withdrawTotalLabel","withdrawButtonLabel","currencyItem","find","item","isTwoFactorAuthRequired","level","is2faEnabled","getConfirmationAddress","confirmationAddress","toggleConfirmModal","toggleSubmitModal","handleWithdraw","withdrawRequest","toLowerCase","otp","beneficiary_id","String","renderOtpDisabled","push","useEffect","className","withdrawal_enabled","precision","WalletWithdrawBody","memo"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Blur } from '../../../components/Blur';\nimport { ModalWithdrawSubmit, Withdraw } from '../../../containers';\nimport { useBeneficiariesFetch, useCurrenciesFetch, useWalletsAddressFetch } from '../../../hooks';\nimport { selectCurrencies } from '../../../modules/public/currencies';\nimport { Beneficiary } from '../../../modules/user/beneficiaries';\nimport { selectUserInfo } from '../../../modules/user/profile';\nimport { selectWithdrawSuccess, walletsWithdrawCcyFetch } from '../../../modules/user/wallets';\nimport { ModalWithdrawConfirmation } from '../../components';\n\nconst defaultBeneficiary: Beneficiary = {\n    id: 0,\n    currency: '',\n    name: '',\n    state: '',\n    data: {\n        address: '',\n    },\n};\n\nconst WalletWithdrawBodyComponent = props => {\n    const [withdrawSubmitModal, setWithdrawSubmitModal] = React.useState(false);\n    const [withdrawData, setWithdrawData] = React.useState({\n        amount: '',\n        beneficiary: defaultBeneficiary,\n        otpCode: '',\n        withdrawConfirmModal: false,\n        total: '',\n        withdrawDone: false,\n    });\n\n    const intl = useIntl();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const user = useSelector(selectUserInfo);\n    const currencies = useSelector(selectCurrencies);\n    const withdrawSuccess = useSelector(selectWithdrawSuccess);\n    const { currency, fee, type } = props.wallet;\n    const fixed = (props.wallet || { fixed: 0 }).fixed;\n    const withdrawAmountLabel = React.useMemo(() => intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.amount' }), [intl]);\n    const withdraw2faLabel = React.useMemo(() => intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.code2fa' }), [intl]);\n    const withdrawFeeLabel = React.useMemo(() => intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.fee' }), [intl]);\n    const withdrawTotalLabel = React.useMemo(() => intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.total' }), [intl]);\n    const withdrawButtonLabel = React.useMemo(() => intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.button' }), [intl]);\n    const currencyItem = (currencies && currencies.find(item => item.id === currency));\n\n    const isTwoFactorAuthRequired = (level: number, is2faEnabled: boolean) => {\n        return level > 1 || (level === 1 && is2faEnabled);\n    };\n\n    const getConfirmationAddress = () => {\n        let confirmationAddress = '';\n\n        if (props.wallet) {\n            confirmationAddress = props.wallet.type === 'fiat' ? (\n                withdrawData.beneficiary.name\n            ) : (\n                withdrawData.beneficiary.data ? (withdrawData.beneficiary.data.address as string) : ''\n            );\n        }\n\n        return confirmationAddress;\n    };\n\n    const toggleConfirmModal = (amount?: string, total?: string, beneficiary?: Beneficiary, otpCode?: string) => {\n        setWithdrawData((state: any) => ({\n            amount: amount || '',\n            beneficiary: beneficiary || defaultBeneficiary,\n            otpCode: otpCode || '',\n            withdrawConfirmModal: !state.withdrawConfirmModal,\n            total: total || '',\n            withdrawDone: false,\n        }));\n    };\n\n    const toggleSubmitModal = () => {\n        setWithdrawSubmitModal(state => !state);\n        setWithdrawData(state => ({ ...state, withdrawDone: true }));\n    };\n\n    const handleWithdraw = () => {\n        const { otpCode, amount, beneficiary } = withdrawData;\n        if (!props.wallet) {\n            return;\n        }\n\n        const withdrawRequest = {\n            amount,\n            currency: currency.toLowerCase(),\n            otp: otpCode,\n            beneficiary_id: String(beneficiary.id),\n        };\n        dispatch(walletsWithdrawCcyFetch(withdrawRequest));\n        toggleConfirmModal();\n    };\n\n    const renderOtpDisabled = () => {\n        return (\n            <div className=\"cr-mobile-wallet-withdraw__otp-disabled\">\n                <span className=\"cr-mobile-wallet-withdraw__otp-disabled__text\">\n                    {intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.enable2fa' })}\n                </span>\n                <Button\n                    block={true}\n                    onClick={() => history.push('/profile/2fa')}\n                    size=\"lg\"\n                    variant=\"primary\"\n                >\n                    {intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.enable2faButton'})}\n                </Button>\n            </div>\n        );\n    };\n\n    useWalletsAddressFetch(currency);\n    useBeneficiariesFetch();\n    useCurrenciesFetch();\n\n    React.useEffect(() => {\n        if (withdrawSuccess) {\n            toggleSubmitModal();\n        }\n    }, [withdrawSuccess]);\n\n    const className = classnames('cr-mobile-wallet-withdraw-body', {\n        'cr-mobile-wallet-withdraw-body--disabled': currencyItem && !currencyItem.withdrawal_enabled,\n    });\n\n    if (!user.otp) {\n        return renderOtpDisabled();\n    }\n\n    return (\n        <div className={className}>\n            {currencyItem && !currencyItem.withdrawal_enabled ? (\n                    <Blur\n                        className=\"pg-blur-withdraw\"\n                        text={intl.formatMessage({id: 'page.body.wallets.tabs.withdraw.disabled.message'})}\n                    />\n                ) :\n                <Withdraw\n                    isMobileDevice\n                    fee={fee}\n                    type={type}\n                    fixed={fixed}\n                    currency={currency}\n                    onClick={toggleConfirmModal}\n                    withdrawAmountLabel={withdrawAmountLabel}\n                    withdraw2faLabel={withdraw2faLabel}\n                    withdrawFeeLabel={withdrawFeeLabel}\n                    withdrawTotalLabel={withdrawTotalLabel}\n                    withdrawDone={withdrawData.withdrawDone}\n                    withdrawButtonLabel={withdrawButtonLabel}\n                    twoFactorAuthRequired={isTwoFactorAuthRequired(user.level, user.otp)}\n                />\n            }\n            <div className=\"cr-mobile-wallet-withdraw-body__submit\">\n                <ModalWithdrawSubmit\n                    isMobileDevice\n                    show={withdrawSubmitModal}\n                    currency={currency}\n                    onSubmit={toggleSubmitModal}\n                />\n            </div>\n            <div className=\"cr-mobile-wallet-withdraw-body__confirmation\">\n                <ModalWithdrawConfirmation\n                    show={withdrawData.withdrawConfirmModal}\n                    amount={withdrawData.total}\n                    currency={currency}\n                    precision={currencyItem ? currencyItem.precision : 0}\n                    rid={getConfirmationAddress()}\n                    onSubmit={handleWithdraw}\n                    onDismiss={toggleConfirmModal}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst WalletWithdrawBody = React.memo(WalletWithdrawBodyComponent);\n\nexport {\n    WalletWithdrawBody,\n};\n"]},"metadata":{},"sourceType":"module"}