{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInput = exports.defaults = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _defineMaskList = require('./functions/defineMaskList');\n\nvar _defineMaskList2 = _interopRequireDefault(_defineMaskList);\n\nvar _inputValue = require('./functions/inputValue');\n\nvar _inputValue2 = _interopRequireDefault(_inputValue);\n\nvar _removeSelectedRange = require('./functions/removeSelectedRange');\n\nvar _removeSelectedRange2 = _interopRequireDefault(_removeSelectedRange);\n\nvar _charTypesEnum = require('./constants/charTypesEnum');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar InputCore = function () {\n  function InputCore(_ref) {\n    var value = _ref.value,\n        mask = _ref.mask,\n        reformat = _ref.reformat,\n        maskFormat = _ref.maskFormat,\n        maskChar = _ref.maskChar,\n        maskString = _ref.maskString;\n\n    _classCallCheck(this, InputCore);\n\n    if (maskString && maskString.length !== mask.length) {\n      throw new Error('maskString must have same length as mask');\n    }\n\n    if (maskChar.length > 1) {\n      throw new Error('maskChar must have only 1 char');\n    }\n\n    this._maskString = maskString;\n    this._maskChar = maskChar;\n    this._reformat = reformat;\n    this.selection = {\n      start: 0,\n      end: 0\n    };\n    this.setMaskFormat(maskFormat);\n    this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\n    this.setValue(value);\n  }\n  /**\n   * Заполняет _maskFormat, который является объектом byId объектов\n   * @param {Array} maskFormat     \n   */\n\n\n  _createClass(InputCore, [{\n    key: 'setMaskFormat',\n    value: function setMaskFormat(maskFormat) {\n      this._maskFormat = maskFormat.reduce(function (store, item) {\n        store[item.str] = item;\n        return store;\n      }, {});\n    }\n  }, {\n    key: 'input',\n    value: function input(_input) {\n      var _value = this._value;\n      var result = void 0;\n\n      if (this._reformat) {\n        result = this._reformat({\n          data: _value,\n          input: _input,\n          selection: this.selection\n        });\n      } else {\n        _value = (0, _removeSelectedRange2.default)({\n          value: _value,\n          selection: this.selection,\n          mask: this._mask,\n          maskChar: this._maskChar,\n          maskString: this._maskString\n        });\n        this.selection.end = this.selection.start;\n        result = (0, _inputValue2.default)({\n          data: _value,\n          input: _input,\n          selection: this.selection,\n          mask: this._mask,\n          maskChar: this._maskChar,\n          maskString: this._maskString\n        });\n      }\n\n      this._value = result.value;\n      this._maskedValue = result.maskedValue;\n      this._visibleValue = result.visibleValue;\n      this.setSelection(result.selection);\n    }\n  }, {\n    key: 'setSelection',\n    value: function setSelection(_ref2) {\n      var start = _ref2.start,\n          end = _ref2.end;\n      this.selection = {\n        start: start,\n        end: end\n      };\n    }\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      return {\n        start: this.selection.start,\n        end: this.selection.end\n      };\n    }\n  }, {\n    key: 'backspace',\n    value: function backspace() {\n      this.removePreviosOrSelected();\n    }\n  }, {\n    key: 'paste',\n    value: function paste(value) {\n      this.input(value);\n    }\n    /**\n     * Определяет циклический список, в котором учтены циклы маски, по которой будет проходить итерации.\n     * @param {String} mask\n     * @returns {{head: {}, hasCycle: boolean}}\n     */\n\n  }, {\n    key: 'setMask',\n    value: function setMask(mask) {\n      this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'getState',\n    value: function getState() {\n      return {\n        value: this.getValue(),\n        maskedValue: this.getMaskedValue(),\n        visibleValue: this.getVisibleValue(),\n        selection: this.getSelection()\n      };\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this._value;\n    }\n  }, {\n    key: 'setReformat',\n    value: function setReformat(reformat) {\n      this._reformat = reformat;\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'getMaskedValue',\n    value: function getMaskedValue() {\n      return this._maskedValue;\n    }\n  }, {\n    key: 'getVisibleValue',\n    value: function getVisibleValue() {\n      return this._visibleValue;\n    }\n  }, {\n    key: 'setMaskChar',\n    value: function setMaskChar(maskChar) {\n      if (maskChar.length > 1) {\n        throw new Error('maskChar must have only 1 char');\n      }\n\n      this._maskChar = maskChar;\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'setMaskString',\n    value: function setMaskString(maskString) {\n      if (maskString && maskString.length !== this._mask.length) {\n        throw new Error('maskString must have same length as mask');\n      }\n\n      this._maskString = maskString;\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'removePreviosOrSelected',\n    value: function removePreviosOrSelected() {\n      if (this.selection.start === this.selection.end) {\n        this.selection.start = this.selection.end - 1;\n\n        if (this.selection.start < 0) {\n          this.selection.start = 0;\n        }\n      }\n\n      this.input('');\n    }\n  }, {\n    key: 'removeNextOrSelected',\n    value: function removeNextOrSelected() {\n      if (this.selection.start === this.selection.end) {\n        this.selection.end++;\n      }\n\n      this.input('');\n    }\n  }, {\n    key: 'setValue',\n    value: function setValue(data) {\n      var result = void 0;\n\n      if (this._reformat) {\n        result = this._reformat({\n          data: data,\n          selection: this.selection\n        });\n      } else {\n        var dataList = data;\n\n        if (!Array.isArray(dataList)) {\n          dataList = [];\n\n          for (var i = 0; i < data.length; i++) {\n            dataList.push({\n              char: data[i],\n              type: _charTypesEnum2.default.USER\n            });\n          }\n        }\n\n        result = (0, _inputValue2.default)({\n          data: dataList,\n          selection: this.selection,\n          mask: this._mask,\n          maskChar: this._maskChar,\n          maskString: this._maskString\n        });\n      }\n\n      this._value = result.value;\n      this._maskedValue = result.maskedValue;\n      this._visibleValue = result.visibleValue;\n      this.setSelection(result.selection);\n    }\n  }]);\n\n  return InputCore;\n}();\n\nvar defaults = exports.defaults = {\n  maskFormat: [{\n    str: '0',\n    regexp: /[0-9]/\n  }, {\n    str: '*',\n    regexp: /./\n  }, {\n    str: 'a',\n    regexp: /[a-zA-Z]/\n  }],\n  maskChar: '',\n  showMask: false,\n  removeSelectedRange: _removeSelectedRange2.default\n};\n\nvar createInput = exports.createInput = function createInput(_ref3) {\n  var value = _ref3.value,\n      maskString = _ref3.maskString,\n      mask = _ref3.mask,\n      reformat = _ref3.reformat,\n      _ref3$maskFormat = _ref3.maskFormat,\n      maskFormat = _ref3$maskFormat === undefined ? defaults.maskFormat : _ref3$maskFormat,\n      _ref3$maskChar = _ref3.maskChar,\n      maskChar = _ref3$maskChar === undefined ? defaults.maskChar : _ref3$maskChar;\n  var _reformat = reformat;\n  var _mask = mask;\n\n  if (!_reformat && !_mask) {\n    _reformat = function _reformat(value) {\n      return value;\n    };\n  } else if (_reformat) {\n    _mask = null;\n  }\n\n  return new InputCore({\n    value: value,\n    mask: _mask,\n    reformat: _reformat,\n    maskFormat: maskFormat,\n    maskChar: maskChar,\n    maskString: maskString\n  });\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/node_modules/input-core/lib/inputCore.js"],"names":["Object","defineProperty","exports","value","createInput","defaults","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_defineMaskList","require","_defineMaskList2","_interopRequireDefault","_inputValue","_inputValue2","_removeSelectedRange","_removeSelectedRange2","_charTypesEnum","_charTypesEnum2","obj","__esModule","default","_classCallCheck","instance","TypeError","InputCore","_ref","mask","reformat","maskFormat","maskChar","maskString","Error","_maskString","_maskChar","_reformat","selection","start","end","setMaskFormat","_mask","_maskFormat","setValue","reduce","store","item","str","input","_input","_value","result","data","_maskedValue","maskedValue","_visibleValue","visibleValue","setSelection","_ref2","getSelection","backspace","removePreviosOrSelected","paste","setMask","getState","getValue","getMaskedValue","getVisibleValue","setReformat","setMaskChar","setMaskString","removeNextOrSelected","dataList","Array","isArray","push","char","type","USER","regexp","showMask","removeSelectedRange","_ref3","_ref3$maskFormat","_ref3$maskChar"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createInput = exports.defaults = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _defineMaskList = require('./functions/defineMaskList');\n\nvar _defineMaskList2 = _interopRequireDefault(_defineMaskList);\n\nvar _inputValue = require('./functions/inputValue');\n\nvar _inputValue2 = _interopRequireDefault(_inputValue);\n\nvar _removeSelectedRange = require('./functions/removeSelectedRange');\n\nvar _removeSelectedRange2 = _interopRequireDefault(_removeSelectedRange);\n\nvar _charTypesEnum = require('./constants/charTypesEnum');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar InputCore = function () {\n    function InputCore(_ref) {\n        var value = _ref.value,\n            mask = _ref.mask,\n            reformat = _ref.reformat,\n            maskFormat = _ref.maskFormat,\n            maskChar = _ref.maskChar,\n            maskString = _ref.maskString;\n\n        _classCallCheck(this, InputCore);\n\n        if (maskString && maskString.length !== mask.length) {\n            throw new Error('maskString must have same length as mask');\n        }\n        if (maskChar.length > 1) {\n            throw new Error('maskChar must have only 1 char');\n        }\n        this._maskString = maskString;\n        this._maskChar = maskChar;\n        this._reformat = reformat;\n        this.selection = { start: 0, end: 0 };\n\n        this.setMaskFormat(maskFormat);\n        this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\n\n        this.setValue(value);\n    }\n\n    /**\n     * Заполняет _maskFormat, который является объектом byId объектов\n     * @param {Array} maskFormat     \n     */\n\n\n    _createClass(InputCore, [{\n        key: 'setMaskFormat',\n        value: function setMaskFormat(maskFormat) {\n            this._maskFormat = maskFormat.reduce(function (store, item) {\n                store[item.str] = item;\n                return store;\n            }, {});\n        }\n    }, {\n        key: 'input',\n        value: function input(_input) {\n            var _value = this._value;\n\n            var result = void 0;\n\n            if (this._reformat) {\n                result = this._reformat({\n                    data: _value,\n                    input: _input,\n                    selection: this.selection\n                });\n            } else {\n\n                _value = (0, _removeSelectedRange2.default)({\n                    value: _value,\n                    selection: this.selection,\n                    mask: this._mask,\n                    maskChar: this._maskChar,\n                    maskString: this._maskString\n                });\n                this.selection.end = this.selection.start;\n\n                result = (0, _inputValue2.default)({\n                    data: _value,\n                    input: _input,\n                    selection: this.selection,\n                    mask: this._mask,\n                    maskChar: this._maskChar,\n                    maskString: this._maskString\n                });\n            }\n\n            this._value = result.value;\n            this._maskedValue = result.maskedValue;\n            this._visibleValue = result.visibleValue;\n            this.setSelection(result.selection);\n        }\n    }, {\n        key: 'setSelection',\n        value: function setSelection(_ref2) {\n            var start = _ref2.start,\n                end = _ref2.end;\n\n            this.selection = {\n                start: start,\n                end: end\n            };\n        }\n    }, {\n        key: 'getSelection',\n        value: function getSelection() {\n            return {\n                start: this.selection.start,\n                end: this.selection.end\n            };\n        }\n    }, {\n        key: 'backspace',\n        value: function backspace() {\n            this.removePreviosOrSelected();\n        }\n    }, {\n        key: 'paste',\n        value: function paste(value) {\n            this.input(value);\n        }\n\n        /**\n         * Определяет циклический список, в котором учтены циклы маски, по которой будет проходить итерации.\n         * @param {String} mask\n         * @returns {{head: {}, hasCycle: boolean}}\n         */\n\n    }, {\n        key: 'setMask',\n        value: function setMask(mask) {\n\n            this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\n\n            this.setValue(this._value);\n        }\n    }, {\n        key: 'getState',\n        value: function getState() {\n            return {\n                value: this.getValue(),\n                maskedValue: this.getMaskedValue(),\n                visibleValue: this.getVisibleValue(),\n                selection: this.getSelection()\n            };\n        }\n    }, {\n        key: 'getValue',\n        value: function getValue() {\n            return this._value;\n        }\n    }, {\n        key: 'setReformat',\n        value: function setReformat(reformat) {\n            this._reformat = reformat;\n            this.setValue(this._value);\n        }\n    }, {\n        key: 'getMaskedValue',\n        value: function getMaskedValue() {\n            return this._maskedValue;\n        }\n    }, {\n        key: 'getVisibleValue',\n        value: function getVisibleValue() {\n            return this._visibleValue;\n        }\n    }, {\n        key: 'setMaskChar',\n        value: function setMaskChar(maskChar) {\n            if (maskChar.length > 1) {\n                throw new Error('maskChar must have only 1 char');\n            }\n\n            this._maskChar = maskChar;\n\n            this.setValue(this._value);\n        }\n    }, {\n        key: 'setMaskString',\n        value: function setMaskString(maskString) {\n            if (maskString && maskString.length !== this._mask.length) {\n                throw new Error('maskString must have same length as mask');\n            }\n\n            this._maskString = maskString;\n\n            this.setValue(this._value);\n        }\n    }, {\n        key: 'removePreviosOrSelected',\n        value: function removePreviosOrSelected() {\n            if (this.selection.start === this.selection.end) {\n                this.selection.start = this.selection.end - 1;\n                if (this.selection.start < 0) {\n                    this.selection.start = 0;\n                }\n            }\n\n            this.input('');\n        }\n    }, {\n        key: 'removeNextOrSelected',\n        value: function removeNextOrSelected() {\n            if (this.selection.start === this.selection.end) {\n                this.selection.end++;\n            }\n\n            this.input('');\n        }\n    }, {\n        key: 'setValue',\n        value: function setValue(data) {\n            var result = void 0;\n\n            if (this._reformat) {\n                result = this._reformat({\n                    data: data,\n                    selection: this.selection\n                });\n            } else {\n                var dataList = data;\n                if (!Array.isArray(dataList)) {\n                    dataList = [];\n                    for (var i = 0; i < data.length; i++) {\n                        dataList.push({\n                            char: data[i],\n                            type: _charTypesEnum2.default.USER\n                        });\n                    }\n                }\n                result = (0, _inputValue2.default)({\n                    data: dataList,\n                    selection: this.selection,\n                    mask: this._mask,\n                    maskChar: this._maskChar,\n                    maskString: this._maskString\n                });\n            }\n\n            this._value = result.value;\n            this._maskedValue = result.maskedValue;\n            this._visibleValue = result.visibleValue;\n            this.setSelection(result.selection);\n        }\n    }]);\n\n    return InputCore;\n}();\n\nvar defaults = exports.defaults = {\n    maskFormat: [{\n        str: '0',\n        regexp: /[0-9]/\n    }, {\n        str: '*',\n        regexp: /./\n    }, {\n        str: 'a',\n        regexp: /[a-zA-Z]/\n    }],\n    maskChar: '',\n    showMask: false,\n    removeSelectedRange: _removeSelectedRange2.default\n};\n\nvar createInput = exports.createInput = function createInput(_ref3) {\n    var value = _ref3.value,\n        maskString = _ref3.maskString,\n        mask = _ref3.mask,\n        reformat = _ref3.reformat,\n        _ref3$maskFormat = _ref3.maskFormat,\n        maskFormat = _ref3$maskFormat === undefined ? defaults.maskFormat : _ref3$maskFormat,\n        _ref3$maskChar = _ref3.maskChar,\n        maskChar = _ref3$maskChar === undefined ? defaults.maskChar : _ref3$maskChar;\n\n    var _reformat = reformat;\n    var _mask = mask;\n    if (!_reformat && !_mask) {\n        _reformat = function _reformat(value) {\n            return value;\n        };\n    } else if (_reformat) {\n        _mask = null;\n    }\n\n    return new InputCore({ value: value, mask: _mask, reformat: _reformat, maskFormat: maskFormat, maskChar: maskChar, maskString: maskString });\n};"]},"metadata":{},"sourceType":"script"}