{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(blocklistAccessFetchSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { sendAccessTokenData, sendAccessTokenError, setBlocklistStatus } from '../actions';\nvar requestOptions = {\n  apiVersion: 'barong'\n};\nexport function blocklistAccessFetchSaga(action) {\n  return _regeneratorRuntime.wrap(function blocklistAccessFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(requestOptions), '/identity/users/access', action.payload);\n\n        case 3:\n          _context.next = 5;\n          return put(sendAccessTokenData());\n\n        case 5:\n          _context.next = 7;\n          return put(setBlocklistStatus({\n            status: 'allowed'\n          }));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: sendAccessTokenError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/blocklistAccess/sagas/blocklistAccessFetchSaga.ts"],"names":["blocklistAccessFetchSaga","call","put","sendError","API","sendAccessTokenData","sendAccessTokenError","setBlocklistStatus","requestOptions","apiVersion","action","post","payload","status","error","processingType","extraOptions","actionError"],"mappings":";;oDAciBA,wB;;AAdjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SACIC,mBADJ,EAEIC,oBAFJ,EAIIC,kBAJJ,QAKO,YALP;AAOA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUT,wBAAV,CAAmCU,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMT,IAAI,CAACG,GAAG,CAACO,IAAJ,CAASH,cAAT,CAAD,EAA2B,wBAA3B,EAAqDE,MAAM,CAACE,OAA5D,CAAV;;AAFD;AAAA;AAGC,iBAAMV,GAAG,CAACG,mBAAmB,EAApB,CAAT;;AAHD;AAAA;AAIC,iBAAMH,GAAG,CAACK,kBAAkB,CAAC;AAAEM,YAAAA,MAAM,EAAE;AAAV,WAAD,CAAnB,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMX,GAAG,CAACC,SAAS,CAAC;AAChBW,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEX;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport {\n    sendAccessTokenData,\n    sendAccessTokenError,\n    SendAccessTokenFetch,\n    setBlocklistStatus,\n} from '../actions';\n\nconst requestOptions: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* blocklistAccessFetchSaga(action: SendAccessTokenFetch) {\n    try {\n        yield call(API.post(requestOptions), '/identity/users/access', action.payload);\n        yield put(sendAccessTokenData());\n        yield put(setBlocklistStatus({ status: 'allowed' }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: sendAccessTokenError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}