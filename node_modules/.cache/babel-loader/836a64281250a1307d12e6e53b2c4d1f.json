{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sendCodeSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../../';\nimport { API } from '../../../../../api';\nimport { getCsrfToken } from '../../../../../helpers';\nimport { sendCodeData, sendCodeError } from '../actions';\n\nvar sessionsConfig = function sessionsConfig(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function sendCodeSaga(action) {\n  return _regeneratorRuntime.wrap(function sendCodeSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig(getCsrfToken())), '/resource/phones', action.payload);\n\n        case 3:\n          _context.next = 5;\n          return put(sendCodeData());\n\n        case 5:\n          _context.next = 7;\n          return put(alertPush({\n            message: ['success.phone.verification.send'],\n            type: 'success'\n          }));\n\n        case 7:\n          _context.next = 18;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (!(_context.t0.message.indexOf('resource.phone.number_exist') > -1)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 14;\n          return put(alertPush({\n            message: _context.t0.message,\n            type: 'success'\n          }));\n\n        case 14:\n          _context.next = 18;\n          break;\n\n        case 16:\n          _context.next = 18;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: sendCodeError\n            }\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/kyc/phone/sagas/sendCodeSaga.ts"],"names":["sendCodeSaga","call","put","alertPush","sendError","API","getCsrfToken","sendCodeData","sendCodeError","sessionsConfig","csrfToken","apiVersion","headers","action","post","payload","message","type","indexOf","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,Y;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,cAArC;AACA,SAASC,GAAT,QAAoC,oBAApC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA2D,YAA3D;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAwC;AAC3D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUV,YAAV,CAAuBa,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMZ,IAAI,CAACI,GAAG,CAACS,IAAJ,CAASL,cAAc,CAACH,YAAY,EAAb,CAAvB,CAAD,EAA2C,kBAA3C,EAA+DO,MAAM,CAACE,OAAtE,CAAV;;AAFD;AAAA;AAGC,iBAAMb,GAAG,CAACK,YAAY,EAAb,CAAT;;AAHD;AAAA;AAIC,iBAAML,GAAG,CAACC,SAAS,CAAC;AAACa,YAAAA,OAAO,EAAE,CAAC,iCAAD,CAAV;AAA+CC,YAAAA,IAAI,EAAE;AAArD,WAAD,CAAV,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gBAMK,YAAMD,OAAN,CAAcE,OAAd,CAAsB,6BAAtB,IAAuD,CAAC,CAN7D;AAAA;AAAA;AAAA;;AAAA;AAOK,iBAAMhB,GAAG,CAACC,SAAS,CAAC;AAAEa,YAAAA,OAAO,EAAE,YAAMA,OAAjB;AAA0BC,YAAAA,IAAI,EAAE;AAAhC,WAAD,CAAV,CAAT;;AAPL;AAAA;AAAA;;AAAA;AAAA;AASK,iBAAMf,GAAG,CAACE,SAAS,CAAC;AAChBe,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEd;AADH;AAHE,WAAD,CAAV,CAAT;;AATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../../';\nimport { API, RequestOptions } from '../../../../../api';\nimport { getCsrfToken } from '../../../../../helpers';\nimport { sendCodeData, sendCodeError, SendCodeFetch } from '../actions';\n\nconst sessionsConfig = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* sendCodeSaga(action: SendCodeFetch) {\n    try {\n        yield call(API.post(sessionsConfig(getCsrfToken())), '/resource/phones', action.payload);\n        yield put(sendCodeData());\n        yield put(alertPush({message: ['success.phone.verification.send'], type: 'success'}));\n    } catch (error) {\n        if (error.message.indexOf('resource.phone.number_exist') > -1) {\n            yield put(alertPush({ message: error.message, type: 'success' }));\n        } else {\n            yield put(sendError({\n                error,\n                processingType: 'alert',\n                extraOptions: {\n                    actionError: sendCodeError,\n                },\n            }));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}