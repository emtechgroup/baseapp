{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(beneficiariesActivateSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { beneficiariesActivateData, beneficiariesActivateError, beneficiariesDataUpdate } from '../actions';\n\nvar config = function config(csrfToken) {\n  return {\n    apiVersion: 'peatio',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function beneficiariesActivateSaga(action) {\n  var id, payload;\n  return _regeneratorRuntime.wrap(function beneficiariesActivateSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          id = action.payload.id;\n          _context.next = 4;\n          return call(API.patch(config(getCsrfToken())), \"/account/beneficiaries/\".concat(id, \"/activate\"), action.payload);\n\n        case 4:\n          payload = _context.sent;\n          _context.next = 7;\n          return put(beneficiariesActivateData(payload));\n\n        case 7:\n          _context.next = 9;\n          return put(beneficiariesDataUpdate(payload));\n\n        case 9:\n          _context.next = 11;\n          return put(alertPush({\n            message: ['success.beneficiaries.activated'],\n            type: 'success'\n          }));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: beneficiariesActivateError\n            }\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/beneficiaries/sagas/beneficiariesActivateSaga.ts"],"names":["beneficiariesActivateSaga","call","put","alertPush","sendError","API","getCsrfToken","beneficiariesActivateData","beneficiariesActivateError","beneficiariesDataUpdate","config","csrfToken","apiVersion","headers","action","id","payload","patch","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAkBiBA,yB;;AAlBjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAEIC,yBAFJ,EAGIC,0BAHJ,EAIIC,uBAJJ,QAKO,YALP;;AAOA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,SAAD,EAAwC;AACnD,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,yBAAV,CAAoCc,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAESC,UAAAA,EAFT,GAEgBD,MAAM,CAACE,OAFvB,CAESD,EAFT;AAAA;AAGiB,iBAAMd,IAAI,CAACI,GAAG,CAACY,KAAJ,CAAUP,MAAM,CAACJ,YAAY,EAAb,CAAhB,CAAD,mCAA8DS,EAA9D,gBAA6ED,MAAM,CAACE,OAApF,CAAV;;AAHjB;AAGOA,UAAAA,OAHP;AAAA;AAIC,iBAAMd,GAAG,CAACK,yBAAyB,CAACS,OAAD,CAA1B,CAAT;;AAJD;AAAA;AAKC,iBAAMd,GAAG,CAACO,uBAAuB,CAACO,OAAD,CAAxB,CAAT;;AALD;AAAA;AAMC,iBAAMd,GAAG,CAACC,SAAS,CAAC;AAACe,YAAAA,OAAO,EAAE,CAAC,iCAAD,CAAV;AAA+CC,YAAAA,IAAI,EAAE;AAArD,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQC,iBAAMjB,GAAG,CAACE,SAAS,CAAC;AAChBgB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEf;AADH;AAHE,WAAD,CAAV,CAAT;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport {\n    BeneficiariesActivate,\n    beneficiariesActivateData,\n    beneficiariesActivateError,\n    beneficiariesDataUpdate,\n} from '../actions';\n\nconst config = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'peatio',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* beneficiariesActivateSaga(action: BeneficiariesActivate) {\n    try {\n        const { id } = action.payload;\n        const payload = yield call(API.patch(config(getCsrfToken())), `/account/beneficiaries/${id}/activate`, action.payload);\n        yield put(beneficiariesActivateData(payload));\n        yield put(beneficiariesDataUpdate(payload));\n        yield put(alertPush({message: ['success.beneficiaries.activated'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: beneficiariesActivateError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}