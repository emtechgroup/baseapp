{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(apiKeyCreateSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { apiKeyCreate, apiKeys2FAModal, apiKeysError } from '../actions';\n\nvar createOptions = function createOptions(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function apiKeyCreateSaga(action) {\n  var apiKey;\n  return _regeneratorRuntime.wrap(function apiKeyCreateSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(createOptions(getCsrfToken())), '/resource/api_keys', action.payload);\n\n        case 3:\n          apiKey = _context.sent;\n          _context.next = 6;\n          return put(apiKeyCreate(apiKey));\n\n        case 6:\n          _context.next = 8;\n          return put(alertPush({\n            message: ['success.api_keys.created'],\n            type: 'success'\n          }));\n\n        case 8:\n          _context.next = 10;\n          return put(apiKeys2FAModal({\n            active: true,\n            action: 'createSuccess',\n            apiKey\n          }));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: apiKeysError\n            }\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/apiKeys/sagas/apiKeyCreateSaga.ts"],"names":["apiKeyCreateSaga","call","put","alertPush","sendError","API","getCsrfToken","apiKeyCreate","apiKeys2FAModal","apiKeysError","createOptions","csrfToken","apiVersion","headers","action","post","payload","apiKey","message","type","active","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,gB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,YAAT,EAA0CC,eAA1C,EAA2DC,YAA3D,QAA+E,YAA/E;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAwC;AAC1D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,gBAAV,CAA2Bc,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMb,IAAI,CAACI,GAAG,CAACU,IAAJ,CAASL,aAAa,CAACJ,YAAY,EAAb,CAAtB,CAAD,EAA0C,oBAA1C,EAAgEQ,MAAM,CAACE,OAAvE,CAAV;;AAFhB;AAEOC,UAAAA,MAFP;AAAA;AAGC,iBAAMf,GAAG,CAACK,YAAY,CAACU,MAAD,CAAb,CAAT;;AAHD;AAAA;AAIC,iBAAMf,GAAG,CAACC,SAAS,CAAC;AAAEe,YAAAA,OAAO,EAAE,CAAC,0BAAD,CAAX;AAAyCC,YAAAA,IAAI,EAAE;AAA/C,WAAD,CAAV,CAAT;;AAJD;AAAA;AAKC,iBAAMjB,GAAG,CAACM,eAAe,CAAC;AAAEY,YAAAA,MAAM,EAAE,IAAV;AAAgBN,YAAAA,MAAM,EAAE,eAAxB;AAAyCG,YAAAA;AAAzC,WAAD,CAAhB,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOC,iBAAMf,GAAG,CAACE,SAAS,CAAC;AAChBiB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEf;AADH;AAHE,WAAD,CAAV,CAAT;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { apiKeyCreate, ApiKeyCreateFetch, apiKeys2FAModal, apiKeysError } from '../actions';\n\nconst createOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* apiKeyCreateSaga(action: ApiKeyCreateFetch) {\n    try {\n        const apiKey = yield call(API.post(createOptions(getCsrfToken())), '/resource/api_keys', action.payload);\n        yield put(apiKeyCreate(apiKey));\n        yield put(alertPush({ message: ['success.api_keys.created'], type: 'success' }));\n        yield put(apiKeys2FAModal({ active: true, action: 'createSuccess', apiKey }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: apiKeysError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}