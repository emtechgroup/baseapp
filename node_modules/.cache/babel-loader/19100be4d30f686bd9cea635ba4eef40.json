{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/OrdersElement/index.tsx\";\nimport * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { CloseIcon } from '../../assets/images/CloseIcon';\nimport { History, Pagination } from '../../components';\nimport { Decimal } from '../../components/Decimal';\nimport { localeDate, setTradeColor } from '../../helpers';\nimport { ordersHistoryCancelFetch as _ordersHistoryCancelFetch, selectCancelAllFetching, selectCancelFetching, selectCurrentPageIndex, selectMarkets, selectOrdersFirstElemIndex, selectOrdersHistory, selectOrdersHistoryLoading, selectOrdersLastElemIndex, selectOrdersNextPageExists, userOrdersHistoryFetch as _userOrdersHistoryFetch } from '../../modules';\n\nvar OrdersComponent = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(OrdersComponent, _React$PureComponent);\n\n  var _super = _createSuper(OrdersComponent);\n\n  function OrdersComponent() {\n    var _this;\n\n    _classCallCheck(this, OrdersComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderContent = function (list) {\n      var _this$props = _this.props,\n          firstElemIndex = _this$props.firstElemIndex,\n          lastElemIndex = _this$props.lastElemIndex,\n          pageIndex = _this$props.pageIndex,\n          nextPageExists = _this$props.nextPageExists;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(History, {\n        headers: _this.renderHeaders(),\n        data: _this.retrieveData(list),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Pagination, {\n        firstElemIndex: firstElemIndex,\n        lastElemIndex: lastElemIndex,\n        page: pageIndex,\n        nextPageExists: nextPageExists,\n        onClickPrevPage: _this.onClickPrevPage,\n        onClickNextPage: _this.onClickNextPage,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    _this.onClickPrevPage = function () {\n      var _this$props2 = _this.props,\n          pageIndex = _this$props2.pageIndex,\n          type = _this$props2.type;\n\n      _this.props.userOrdersHistoryFetch({\n        pageIndex: Number(pageIndex) - 1,\n        type,\n        limit: 25\n      });\n    };\n\n    _this.onClickNextPage = function () {\n      var _this$props3 = _this.props,\n          pageIndex = _this$props3.pageIndex,\n          type = _this$props3.type;\n\n      _this.props.userOrdersHistoryFetch({\n        pageIndex: Number(pageIndex) + 1,\n        type,\n        limit: 25\n      });\n    };\n\n    _this.renderHeaders = function () {\n      return [_this.props.intl.formatMessage({\n        id: 'page.body.history.deposit.header.date'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.orderType'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.pair'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.price'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.amount'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.executed'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.remaining'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.costRemaining'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.openOrders.header.status'\n      }), ''];\n    };\n\n    _this.retrieveData = function (list) {\n      return list.map(function (item) {\n        return _this.renderOrdersHistoryRow(item);\n      });\n    };\n\n    _this.renderOrdersHistoryRow = function (item) {\n      var id = item.id,\n          executed_volume = item.executed_volume,\n          market = item.market,\n          ord_type = item.ord_type,\n          price = item.price,\n          avg_price = item.avg_price,\n          remaining_volume = item.remaining_volume,\n          origin_volume = item.origin_volume,\n          side = item.side,\n          state = item.state,\n          updated_at = item.updated_at,\n          created_at = item.created_at;\n      var currentMarket = _this.props.marketsData.find(function (m) {\n        return m.id === market;\n      }) || {\n        name: '',\n        price_precision: 0,\n        amount_precision: 0\n      };\n\n      var orderType = _this.getType(side, ord_type);\n\n      var marketName = currentMarket ? currentMarket.name : market;\n      var costRemaining = remaining_volume * price; // price or avg_price ???\n\n      var date = localeDate(updated_at ? updated_at : created_at, 'fullDate');\n\n      var status = _this.setOrderStatus(state);\n\n      var actualPrice = ord_type === 'market' || status === 'done' ? avg_price : price;\n      return [date, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: setTradeColor(side).color\n        },\n        key: id,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, orderType), marketName, /*#__PURE__*/React.createElement(Decimal, {\n        key: id,\n        fixed: currentMarket.price_precision,\n        thousSep: \",\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, actualPrice), /*#__PURE__*/React.createElement(Decimal, {\n        key: id,\n        fixed: currentMarket.amount_precision,\n        thousSep: \",\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, origin_volume), /*#__PURE__*/React.createElement(Decimal, {\n        key: id,\n        fixed: currentMarket.amount_precision,\n        thousSep: \",\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }\n      }, executed_volume), /*#__PURE__*/React.createElement(Decimal, {\n        key: id,\n        fixed: currentMarket.amount_precision,\n        thousSep: \",\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }\n      }, remaining_volume), /*#__PURE__*/React.createElement(Decimal, {\n        key: id,\n        fixed: currentMarket.amount_precision,\n        thousSep: \",\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }\n      }, costRemaining.toString()), status, state === 'wait' && /*#__PURE__*/React.createElement(CloseIcon, {\n        key: id,\n        onClick: _this.handleCancel(id),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 33\n        }\n      })];\n    };\n\n    _this.getType = function (side, orderType) {\n      if (!side || !orderType) {\n        return '';\n      }\n\n      return _this.props.intl.formatMessage({\n        id: \"page.body.openOrders.header.orderType.\".concat(side, \".\").concat(orderType)\n      });\n    };\n\n    _this.setOrderStatus = function (status) {\n      switch (status) {\n        case 'done':\n          return /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pg-history-elem-executed\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"page.body.openOrders.content.status.done\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 25\n            }\n          }));\n\n        case 'cancel':\n          return /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pg-history-elem-canceled\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"page.body.openOrders.content.status.cancel\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 25\n            }\n          }));\n\n        case 'wait':\n          return /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pg-history-elem-opened\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"page.body.openOrders.content.status.wait\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 25\n            }\n          }));\n\n        default:\n          return status;\n      }\n    };\n\n    _this.handleCancel = function (id) {\n      return function () {\n        var _this$props4 = _this.props,\n            cancelAllFetching = _this$props4.cancelAllFetching,\n            cancelFetching = _this$props4.cancelFetching,\n            type = _this$props4.type,\n            list = _this$props4.list;\n\n        if (cancelAllFetching || cancelFetching) {\n          return;\n        }\n\n        _this.props.ordersHistoryCancelFetch({\n          id,\n          type,\n          list\n        });\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(OrdersComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var type = this.props.type;\n      this.props.userOrdersHistoryFetch({\n        pageIndex: 0,\n        type,\n        limit: 25\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          type = _this$props5.type,\n          list = _this$props5.list,\n          fetching = _this$props5.fetching;\n      var updateList = list;\n\n      if (type === 'open') {\n        updateList = list.filter(function (o) {\n          return o.state === 'wait';\n        });\n      }\n\n      var emptyMsg = this.props.intl.formatMessage({\n        id: 'page.noDataToShow'\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-history-elem \".concat(updateList.length ? '' : 'pg-history-elem-empty'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, fetching && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 30\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 59\n        }\n      })), updateList.length ? this.renderContent(updateList) : null, !updateList.length && !fetching ? /*#__PURE__*/React.createElement(\"p\", {\n        className: \"pg-history-elem__empty\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 52\n        }\n      }, emptyMsg) : null);\n    }\n  }]);\n\n  return OrdersComponent;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    marketsData: selectMarkets(state),\n    pageIndex: selectCurrentPageIndex(state),\n    firstElemIndex: selectOrdersFirstElemIndex(state, 25),\n    list: selectOrdersHistory(state),\n    fetching: selectOrdersHistoryLoading(state),\n    lastElemIndex: selectOrdersLastElemIndex(state, 25),\n    nextPageExists: selectOrdersNextPageExists(state),\n    cancelAllFetching: selectCancelAllFetching(state),\n    cancelFetching: selectCancelFetching(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    ordersHistoryCancelFetch: function ordersHistoryCancelFetch(payload) {\n      return dispatch(_ordersHistoryCancelFetch(payload));\n    },\n    userOrdersHistoryFetch: function userOrdersHistoryFetch(payload) {\n      return dispatch(_userOrdersHistoryFetch(payload));\n    }\n  };\n};\n\nexport var OrdersElement = compose(injectIntl, connect(mapStateToProps, mapDispatchToProps))(OrdersComponent); // tslint:disable-line","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/OrdersElement/index.tsx"],"names":["React","Spinner","FormattedMessage","injectIntl","connect","compose","CloseIcon","History","Pagination","Decimal","localeDate","setTradeColor","ordersHistoryCancelFetch","selectCancelAllFetching","selectCancelFetching","selectCurrentPageIndex","selectMarkets","selectOrdersFirstElemIndex","selectOrdersHistory","selectOrdersHistoryLoading","selectOrdersLastElemIndex","selectOrdersNextPageExists","userOrdersHistoryFetch","OrdersComponent","renderContent","list","props","firstElemIndex","lastElemIndex","pageIndex","nextPageExists","renderHeaders","retrieveData","onClickPrevPage","onClickNextPage","type","Number","limit","intl","formatMessage","id","map","item","renderOrdersHistoryRow","executed_volume","market","ord_type","price","avg_price","remaining_volume","origin_volume","side","state","updated_at","created_at","currentMarket","marketsData","find","m","name","price_precision","amount_precision","orderType","getType","marketName","costRemaining","date","status","setOrderStatus","actualPrice","color","toString","handleCancel","cancelAllFetching","cancelFetching","fetching","updateList","filter","o","emptyMsg","length","PureComponent","mapStateToProps","mapDispatchToProps","dispatch","payload","OrdersElement"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,OAAT,QAAoD,aAApD;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,eAA1C;AACA,SAEIC,wBAAwB,IAAxBA,yBAFJ,EAIIC,uBAJJ,EAKIC,oBALJ,EAMIC,sBANJ,EAOIC,aAPJ,EAQIC,0BARJ,EASIC,mBATJ,EAUIC,0BAVJ,EAWIC,yBAXJ,EAYIC,0BAZJ,EAaIC,sBAAsB,IAAtBA,uBAbJ,QAcO,eAdP;;IA6CMC,e;;;;;;;;;;;;;;;;UAyBKC,a,GAAgB,UAAAC,IAAI,EAAI;AAAA,wBAC0C,MAAKC,KAD/C;AAAA,UACnBC,cADmB,eACnBA,cADmB;AAAA,UACHC,aADG,eACHA,aADG;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,cADvB,eACuBA,cADvB;AAG3B,0BACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAE,MAAKC,aAAL,EAAlB;AAAwC,QAAA,IAAI,EAAE,MAAKC,YAAL,CAAkBP,IAAlB,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,UAAD;AACI,QAAA,cAAc,EAAEE,cADpB;AAEI,QAAA,aAAa,EAAEC,aAFnB;AAGI,QAAA,IAAI,EAAEC,SAHV;AAII,QAAA,cAAc,EAAEC,cAJpB;AAKI,QAAA,eAAe,EAAE,MAAKG,eAL1B;AAMI,QAAA,eAAe,EAAE,MAAKC,eAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAaH,K;;UAEOD,e,GAAkB,YAAM;AAAA,yBACA,MAAKP,KADL;AAAA,UACpBG,SADoB,gBACpBA,SADoB;AAAA,UACTM,IADS,gBACTA,IADS;;AAE5B,YAAKT,KAAL,CAAWJ,sBAAX,CAAkC;AAAEO,QAAAA,SAAS,EAAEO,MAAM,CAACP,SAAD,CAAN,GAAoB,CAAjC;AAAoCM,QAAAA,IAApC;AAA0CE,QAAAA,KAAK,EAAE;AAAjD,OAAlC;AACH,K;;UAEOH,e,GAAkB,YAAM;AAAA,yBACA,MAAKR,KADL;AAAA,UACpBG,SADoB,gBACpBA,SADoB;AAAA,UACTM,IADS,gBACTA,IADS;;AAE5B,YAAKT,KAAL,CAAWJ,sBAAX,CAAkC;AAAEO,QAAAA,SAAS,EAAEO,MAAM,CAACP,SAAD,CAAN,GAAoB,CAAjC;AAAoCM,QAAAA,IAApC;AAA0CE,QAAAA,KAAK,EAAE;AAAjD,OAAlC;AACH,K;;UAEON,a,GAAgB,YAAM;AAC1B,aAAO,CACH,MAAKL,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADG,EAEH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFG,EAGH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHG,EAIH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJG,EAKH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALG,EAMH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CANG,EAOH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAPG,EAQH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CARG,EASH,MAAKd,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CATG,EAUH,EAVG,CAAP;AAYH,K;;UAEOR,Y,GAAe,UAAAP,IAAI,EAAI;AAC3B,aAAOA,IAAI,CAACgB,GAAL,CAAS,UAAAC,IAAI;AAAA,eAAI,MAAKC,sBAAL,CAA4BD,IAA5B,CAAJ;AAAA,OAAb,CAAP;AACH,K;;UAEOC,sB,GAAyB,UAAAD,IAAI,EAAI;AAAA,UAEjCF,EAFiC,GAcjCE,IAdiC,CAEjCF,EAFiC;AAAA,UAGjCI,eAHiC,GAcjCF,IAdiC,CAGjCE,eAHiC;AAAA,UAIjCC,MAJiC,GAcjCH,IAdiC,CAIjCG,MAJiC;AAAA,UAKjCC,QALiC,GAcjCJ,IAdiC,CAKjCI,QALiC;AAAA,UAMjCC,KANiC,GAcjCL,IAdiC,CAMjCK,KANiC;AAAA,UAOjCC,SAPiC,GAcjCN,IAdiC,CAOjCM,SAPiC;AAAA,UAQjCC,gBARiC,GAcjCP,IAdiC,CAQjCO,gBARiC;AAAA,UASjCC,aATiC,GAcjCR,IAdiC,CASjCQ,aATiC;AAAA,UAUjCC,IAViC,GAcjCT,IAdiC,CAUjCS,IAViC;AAAA,UAWjCC,KAXiC,GAcjCV,IAdiC,CAWjCU,KAXiC;AAAA,UAYjCC,UAZiC,GAcjCX,IAdiC,CAYjCW,UAZiC;AAAA,UAajCC,UAbiC,GAcjCZ,IAdiC,CAajCY,UAbiC;AAerC,UAAMC,aAAa,GAAG,MAAK7B,KAAL,CAAW8B,WAAX,CAAuBC,IAAvB,CAA4B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAClB,EAAF,KAASK,MAAb;AAAA,OAA7B,KACf;AAAEc,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,eAAe,EAAE,CAA7B;AAAgCC,QAAAA,gBAAgB,EAAE;AAAlD,OADP;;AAGA,UAAMC,SAAS,GAAG,MAAKC,OAAL,CAAaZ,IAAb,EAAmBL,QAAnB,CAAlB;;AACA,UAAMkB,UAAU,GAAGT,aAAa,GAAGA,aAAa,CAACI,IAAjB,GAAwBd,MAAxD;AACA,UAAMoB,aAAa,GAAGhB,gBAAgB,GAAGF,KAAzC,CApBqC,CAoBW;;AAChD,UAAMmB,IAAI,GAAGxD,UAAU,CAAC2C,UAAU,GAAGA,UAAH,GAAgBC,UAA3B,EAAuC,UAAvC,CAAvB;;AACA,UAAMa,MAAM,GAAG,MAAKC,cAAL,CAAoBhB,KAApB,CAAf;;AACA,UAAMiB,WAAW,GAAGvB,QAAQ,KAAK,QAAb,IAAyBqB,MAAM,KAAK,MAApC,GAA6CnB,SAA7C,GAAyDD,KAA7E;AAEA,aAAO,CACHmB,IADG,eAEH;AAAM,QAAA,KAAK,EAAE;AAAEI,UAAAA,KAAK,EAAE3D,aAAa,CAACwC,IAAD,CAAb,CAAoBmB;AAA7B,SAAb;AAAmD,QAAA,GAAG,EAAE9B,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6DsB,SAA7D,CAFG,EAGHE,UAHG,eAIH,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAExB,EAAd;AAAkB,QAAA,KAAK,EAAEe,aAAa,CAACK,eAAvC;AAAwD,QAAA,QAAQ,EAAC,GAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsES,WAAtE,CAJG,eAKH,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAE7B,EAAd;AAAkB,QAAA,KAAK,EAAEe,aAAa,CAACM,gBAAvC;AAAyD,QAAA,QAAQ,EAAC,GAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuEX,aAAvE,CALG,eAMH,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEV,EAAd;AAAkB,QAAA,KAAK,EAAEe,aAAa,CAACM,gBAAvC;AAAyD,QAAA,QAAQ,EAAC,GAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuEjB,eAAvE,CANG,eAOH,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEJ,EAAd;AAAkB,QAAA,KAAK,EAAEe,aAAa,CAACM,gBAAvC;AAAyD,QAAA,QAAQ,EAAC,GAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuEZ,gBAAvE,CAPG,eAQH,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAET,EAAd;AAAkB,QAAA,KAAK,EAAEe,aAAa,CAACM,gBAAvC;AAAyD,QAAA,QAAQ,EAAC,GAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuEI,aAAa,CAACM,QAAd,EAAvE,CARG,EASHJ,MATG,EAUHf,KAAK,KAAK,MAAV,iBAAoB,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAEZ,EAAhB;AAAoB,QAAA,OAAO,EAAE,MAAKgC,YAAL,CAAkBhC,EAAlB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVjB,CAAP;AAYH,K;;UAEOuB,O,GAAU,UAACZ,IAAD,EAAeW,SAAf,EAAqC;AACnD,UAAI,CAACX,IAAD,IAAS,CAACW,SAAd,EAAyB;AACrB,eAAO,EAAP;AACH;;AAED,aAAO,MAAKpC,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,kDAA2CW,IAA3C,cAAmDW,SAAnD;AAAJ,OAA9B,CAAP;AACH,K;;UAEOM,c,GAAiB,UAACD,MAAD,EAAoB;AACzC,cAAQA,MAAR;AACI,aAAK,MAAL;AACI,8BACI;AAAM,YAAA,SAAS,EAAC,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,gBAAD;AAAkB,YAAA,EAAE,4CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;;AAKJ,aAAK,QAAL;AACI,8BACI;AAAM,YAAA,SAAS,EAAC,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,gBAAD;AAAkB,YAAA,EAAE,8CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;;AAKJ,aAAK,MAAL;AACI,8BACI;AAAM,YAAA,SAAS,EAAC,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,gBAAD;AAAkB,YAAA,EAAE,4CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;;AAKJ;AACI,iBAAOA,MAAP;AApBR;AAsBH,K;;UAEOK,Y,GAAe,UAAChC,EAAD;AAAA,aAAgB,YAAM;AAAA,2BACiB,MAAKd,KADtB;AAAA,YACjC+C,iBADiC,gBACjCA,iBADiC;AAAA,YACdC,cADc,gBACdA,cADc;AAAA,YACEvC,IADF,gBACEA,IADF;AAAA,YACQV,IADR,gBACQA,IADR;;AAEzC,YAAIgD,iBAAiB,IAAIC,cAAzB,EAAyC;AACrC;AACH;;AACD,cAAKhD,KAAL,CAAWd,wBAAX,CAAoC;AAAE4B,UAAAA,EAAF;AAAML,UAAAA,IAAN;AAAYV,UAAAA;AAAZ,SAApC;AACH,OANsB;AAAA,K;;;;;;;wCA/II;AAAA,UACfU,IADe,GACN,KAAKT,KADC,CACfS,IADe;AAEvB,WAAKT,KAAL,CAAWJ,sBAAX,CAAkC;AAAEO,QAAAA,SAAS,EAAE,CAAb;AAAgBM,QAAAA,IAAhB;AAAsBE,QAAAA,KAAK,EAAE;AAA7B,OAAlC;AACH;;;6BAEe;AAAA,yBACqB,KAAKX,KAD1B;AAAA,UACJS,IADI,gBACJA,IADI;AAAA,UACEV,IADF,gBACEA,IADF;AAAA,UACQkD,QADR,gBACQA,QADR;AAEZ,UAAIC,UAAU,GAAGnD,IAAjB;;AAEA,UAAIU,IAAI,KAAK,MAAb,EAAqB;AACjByC,QAAAA,UAAU,GAAGnD,IAAI,CAACoD,MAAL,CAAY,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAAC1B,KAAF,KAAY,MAAhB;AAAA,SAAb,CAAb;AACH;;AAED,UAAM2B,QAAQ,GAAG,KAAKrD,KAAL,CAAWY,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,QAAAA,EAAE,EAAE;AAAL,OAA9B,CAAjB;AAEA,0BACI;AAAK,QAAA,SAAS,4BAAqBoC,UAAU,CAACI,MAAX,GAAoB,EAApB,GAAyB,uBAA9C,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKL,QAAQ,iBAAI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA6B,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA7B,CADjB,EAEKC,UAAU,CAACI,MAAX,GAAoB,KAAKxD,aAAL,CAAmBoD,UAAnB,CAApB,GAAqD,IAF1D,EAGK,CAACA,UAAU,CAACI,MAAZ,IAAsB,CAACL,QAAvB,gBAAkC;AAAG,QAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuCI,QAAvC,CAAlC,GAAyF,IAH9F,CADJ;AAOH;;;;EAvByB/E,KAAK,CAACiF,a;;AAyJpC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAC9B,KAAD;AAAA,SAAmC;AACvDI,IAAAA,WAAW,EAAExC,aAAa,CAACoC,KAAD,CAD6B;AAEvDvB,IAAAA,SAAS,EAAEd,sBAAsB,CAACqC,KAAD,CAFsB;AAGvDzB,IAAAA,cAAc,EAAEV,0BAA0B,CAACmC,KAAD,EAAQ,EAAR,CAHa;AAIvD3B,IAAAA,IAAI,EAAEP,mBAAmB,CAACkC,KAAD,CAJ8B;AAKvDuB,IAAAA,QAAQ,EAAExD,0BAA0B,CAACiC,KAAD,CALmB;AAMvDxB,IAAAA,aAAa,EAAER,yBAAyB,CAACgC,KAAD,EAAQ,EAAR,CANe;AAOvDtB,IAAAA,cAAc,EAAET,0BAA0B,CAAC+B,KAAD,CAPa;AAQvDqB,IAAAA,iBAAiB,EAAE5D,uBAAuB,CAACuC,KAAD,CARa;AASvDsB,IAAAA,cAAc,EAAE5D,oBAAoB,CAACsC,KAAD;AATmB,GAAnC;AAAA,CAAxB;;AAYA,IAAM+B,kBAAiE,GACnE,SADEA,kBACF,CAAAC,QAAQ;AAAA,SAAK;AACTxE,IAAAA,wBAAwB,EAAE,kCAAAyE,OAAO;AAAA,aAAID,QAAQ,CAACxE,yBAAwB,CAACyE,OAAD,CAAzB,CAAZ;AAAA,KADxB;AAET/D,IAAAA,sBAAsB,EAAE,gCAAA+D,OAAO;AAAA,aAAID,QAAQ,CAAC9D,uBAAsB,CAAC+D,OAAD,CAAvB,CAAZ;AAAA;AAFtB,GAAL;AAAA,CADZ;;AAMA,OAAO,IAAMC,aAAa,GAAGjF,OAAO,CAChCF,UADgC,EAEhCC,OAAO,CAAC8E,eAAD,EAAkBC,kBAAlB,CAFyB,CAAP,CAG3B5D,eAH2B,CAAtB,C,CAGoB","sourcesContent":["import * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { CloseIcon } from '../../assets/images/CloseIcon';\nimport { History, Pagination } from '../../components';\nimport { Decimal } from '../../components/Decimal';\nimport { localeDate, setTradeColor } from '../../helpers';\nimport {\n    Market,\n    ordersHistoryCancelFetch,\n    RootState,\n    selectCancelAllFetching,\n    selectCancelFetching,\n    selectCurrentPageIndex,\n    selectMarkets,\n    selectOrdersFirstElemIndex,\n    selectOrdersHistory,\n    selectOrdersHistoryLoading,\n    selectOrdersLastElemIndex,\n    selectOrdersNextPageExists,\n    userOrdersHistoryFetch,\n} from '../../modules';\nimport { OrderCommon } from '../../modules/types';\n\ninterface OrdersProps {\n    type: string;\n}\n\ninterface ReduxProps {\n    marketsData: Market[];\n    pageIndex: number;\n    firstElemIndex: number;\n    list: OrderCommon[];\n    fetching: boolean;\n    lastElemIndex: number;\n    nextPageExists: boolean;\n    cancelAllFetching: boolean;\n    cancelFetching: boolean;\n}\n\ninterface DispatchProps {\n    ordersHistoryCancelFetch: typeof ordersHistoryCancelFetch;\n    userOrdersHistoryFetch: typeof userOrdersHistoryFetch;\n}\n\ninterface OrdersState {\n    orderType: boolean;\n}\n\n\ntype Props = OrdersProps & ReduxProps & DispatchProps & IntlProps;\n\nclass OrdersComponent extends React.PureComponent<Props, OrdersState>  {\n    public componentDidMount() {\n        const { type } = this.props;\n        this.props.userOrdersHistoryFetch({ pageIndex: 0, type, limit: 25 });\n    }\n\n    public render() {\n        const { type, list, fetching } = this.props;\n        let updateList = list;\n\n        if (type === 'open') {\n            updateList = list.filter(o => o.state === 'wait');\n        }\n\n        const emptyMsg = this.props.intl.formatMessage({id: 'page.noDataToShow'});\n\n        return (\n            <div className={`pg-history-elem ${updateList.length ? '' : 'pg-history-elem-empty'}`}>\n                {fetching && <div className=\"text-center\"><Spinner animation=\"border\" variant=\"primary\" /></div>}\n                {updateList.length ? this.renderContent(updateList) : null}\n                {!updateList.length && !fetching ? <p className=\"pg-history-elem__empty\">{emptyMsg}</p> : null}\n            </div>\n        );\n    }\n\n    public renderContent = list => {\n        const { firstElemIndex, lastElemIndex, pageIndex, nextPageExists } = this.props;\n\n        return (\n            <React.Fragment>\n                <History headers={this.renderHeaders()} data={this.retrieveData(list)}/>\n                <Pagination\n                    firstElemIndex={firstElemIndex}\n                    lastElemIndex={lastElemIndex}\n                    page={pageIndex}\n                    nextPageExists={nextPageExists}\n                    onClickPrevPage={this.onClickPrevPage}\n                    onClickNextPage={this.onClickNextPage}\n                />\n            </React.Fragment>\n        );\n    };\n\n    private onClickPrevPage = () => {\n        const { pageIndex, type } = this.props;\n        this.props.userOrdersHistoryFetch({ pageIndex: Number(pageIndex) - 1, type, limit: 25 });\n    };\n\n    private onClickNextPage = () => {\n        const { pageIndex, type } = this.props;\n        this.props.userOrdersHistoryFetch({ pageIndex: Number(pageIndex) + 1, type, limit: 25 });\n    };\n\n    private renderHeaders = () => {\n        return [\n            this.props.intl.formatMessage({ id: 'page.body.history.deposit.header.date' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.orderType' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.pair' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.price' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.amount' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.executed' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.remaining' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.costRemaining' }),\n            this.props.intl.formatMessage({ id: 'page.body.openOrders.header.status' }),\n            '',\n        ];\n    };\n\n    private retrieveData = list => {\n        return list.map(item => this.renderOrdersHistoryRow(item));\n    };\n\n    private renderOrdersHistoryRow = item => {\n        const {\n            id,\n            executed_volume,\n            market,\n            ord_type,\n            price,\n            avg_price,\n            remaining_volume,\n            origin_volume,\n            side,\n            state,\n            updated_at,\n            created_at,\n        } = item;\n        const currentMarket = this.props.marketsData.find(m => m.id === market)\n            || { name: '', price_precision: 0, amount_precision: 0 };\n\n        const orderType = this.getType(side, ord_type);\n        const marketName = currentMarket ? currentMarket.name : market;\n        const costRemaining = remaining_volume * price; // price or avg_price ???\n        const date = localeDate(updated_at ? updated_at : created_at, 'fullDate');\n        const status = this.setOrderStatus(state);\n        const actualPrice = ord_type === 'market' || status === 'done' ? avg_price : price;\n\n        return [\n            date,\n            <span style={{ color: setTradeColor(side).color }} key={id}>{orderType}</span>,\n            marketName,\n            <Decimal key={id} fixed={currentMarket.price_precision} thousSep=\",\">{actualPrice}</Decimal>,\n            <Decimal key={id} fixed={currentMarket.amount_precision} thousSep=\",\">{origin_volume}</Decimal>,\n            <Decimal key={id} fixed={currentMarket.amount_precision} thousSep=\",\">{executed_volume}</Decimal>,\n            <Decimal key={id} fixed={currentMarket.amount_precision} thousSep=\",\">{remaining_volume}</Decimal>,\n            <Decimal key={id} fixed={currentMarket.amount_precision} thousSep=\",\">{costRemaining.toString()}</Decimal>,\n            status,\n            state === 'wait' && <CloseIcon key={id} onClick={this.handleCancel(id)} />,\n        ];\n    };\n\n    private getType = (side: string, orderType: string) => {\n        if (!side || !orderType) {\n            return '';\n        }\n\n        return this.props.intl.formatMessage({ id: `page.body.openOrders.header.orderType.${side}.${orderType}` });\n    };\n\n    private setOrderStatus = (status: string) => {\n        switch (status) {\n            case 'done':\n                return (\n                    <span className=\"pg-history-elem-executed\">\n                        <FormattedMessage id={`page.body.openOrders.content.status.done`} />\n                    </span>\n                );\n            case 'cancel':\n                return (\n                    <span className=\"pg-history-elem-canceled\">\n                        <FormattedMessage id={`page.body.openOrders.content.status.cancel`} />\n                    </span>\n                );\n            case 'wait':\n                return (\n                    <span className=\"pg-history-elem-opened\">\n                        <FormattedMessage id={`page.body.openOrders.content.status.wait`} />\n                    </span>\n                );\n            default:\n                return status;\n        }\n    };\n\n    private handleCancel = (id: number) => () => {\n        const { cancelAllFetching, cancelFetching, type, list } = this.props;\n        if (cancelAllFetching || cancelFetching) {\n            return;\n        }\n        this.props.ordersHistoryCancelFetch({ id, type, list });\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    marketsData: selectMarkets(state),\n    pageIndex: selectCurrentPageIndex(state),\n    firstElemIndex: selectOrdersFirstElemIndex(state, 25),\n    list: selectOrdersHistory(state),\n    fetching: selectOrdersHistoryLoading(state),\n    lastElemIndex: selectOrdersLastElemIndex(state, 25),\n    nextPageExists: selectOrdersNextPageExists(state),\n    cancelAllFetching: selectCancelAllFetching(state),\n    cancelFetching: selectCancelFetching(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        ordersHistoryCancelFetch: payload => dispatch(ordersHistoryCancelFetch(payload)),\n        userOrdersHistoryFetch: payload => dispatch(userOrdersHistoryFetch(payload)),\n    });\n\nexport const OrdersElement = compose(\n    injectIntl,\n    connect(mapStateToProps, mapDispatchToProps),\n)(OrdersComponent) as any; // tslint:disable-line\n"]},"metadata":{},"sourceType":"module"}