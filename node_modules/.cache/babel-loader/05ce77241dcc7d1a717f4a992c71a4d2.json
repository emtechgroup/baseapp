{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(labelSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../../';\nimport { API } from '../../../../../api';\nimport { labelData, labelError } from '../actions';\nvar userOptions = {\n  apiVersion: 'barong'\n};\nexport function labelSaga(action) {\n  var payload;\n  return _regeneratorRuntime.wrap(function labelSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.get(userOptions), '/resource/labels');\n\n        case 3:\n          payload = _context.sent;\n          _context.next = 6;\n          return put(labelData(payload));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'console',\n            extraOptions: {\n              actionError: labelError\n            }\n          }));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/kyc/label/sagas/labelSaga.ts"],"names":["labelSaga","call","put","sendError","API","labelData","labelError","userOptions","apiVersion","action","get","payload","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,S;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,GAAT,QAAoC,oBAApC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAkD,YAAlD;AAEA,IAAMC,WAA2B,GAAG;AAChCC,EAAAA,UAAU,EAAE;AADoB,CAApC;AAIA,OAAO,SAAUR,SAAV,CAAoBS,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMR,IAAI,CAACG,GAAG,CAACM,GAAJ,CAAQH,WAAR,CAAD,EAAuB,kBAAvB,CAAV;;AAFjB;AAEOI,UAAAA,OAFP;AAAA;AAGC,iBAAMT,GAAG,CAACG,SAAS,CAACM,OAAD,CAAV,CAAT;;AAHD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKC,iBAAMT,GAAG,CAACC,SAAS,CAAC;AAChBS,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,SAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAET;AADH;AAHE,WAAD,CAAV,CAAT;;AALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../../';\nimport { API, RequestOptions } from '../../../../../api';\nimport { labelData, labelError, LabelFetch } from '../actions';\n\nconst userOptions: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* labelSaga(action: LabelFetch) {\n    try {\n        const payload = yield call(API.get(userOptions), '/resource/labels');\n        yield put(labelData(payload));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'console',\n            extraOptions: {\n                actionError: labelError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}