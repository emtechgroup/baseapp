{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/EmailForm/index.tsx\";\n\nimport cr from 'classnames';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { CustomInput } from '../';\nimport { CloseIcon } from '../../assets/images/CloseIcon';\nimport { EMAIL_REGEX } from '../../helpers';\nimport { selectMobileDeviceState } from '../../modules/public/globalSettings';\nvar EmailForm = React.memo(function (props) {\n  var isMobileDevice = useSelector(selectMobileDeviceState);\n  var title = props.title,\n      buttonLabel = props.buttonLabel,\n      isLoading = props.isLoading,\n      emailLabel = props.emailLabel,\n      message = props.message,\n      email = props.email,\n      emailFocused = props.emailFocused,\n      emailError = props.emailError,\n      captchaType = props.captchaType,\n      geetestCaptchaSuccess = props.geetestCaptchaSuccess,\n      reCaptchaSuccess = props.reCaptchaSuccess;\n\n  var handleCancel = function handleCancel() {\n    props.handleReturnBack();\n  };\n\n  var handleSubmitForm = function handleSubmitForm() {\n    props.OnSubmit();\n  };\n\n  var isValidForm = function isValidForm() {\n    var isEmailValid = email.match(EMAIL_REGEX);\n    return email && isEmailValid;\n  };\n\n  var isButtonDisabled = function isButtonDisabled() {\n    if (isLoading || !email.match(EMAIL_REGEX)) {\n      return true;\n    }\n\n    if (captchaType === 'recaptcha' && !reCaptchaSuccess) {\n      return true;\n    }\n\n    if (captchaType === 'geetest' && !geetestCaptchaSuccess) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var handleClick = function handleClick(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (!isValidForm()) {\n      props.validateForm();\n    } else {\n      handleSubmitForm();\n    }\n  };\n\n  var emailFormClass = cr('cr-email-form', {\n    'cr-email-form--extended': captchaType && captchaType !== 'none'\n  });\n  var emailGroupClass = cr('cr-email-form__group', {\n    'cr-email-form__group--focused': emailFocused\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: emailFormClass,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, !isMobileDevice && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__options-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__option\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__option-inner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, title || 'Forgot password', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__cros-icon\",\n    onClick: handleCancel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    className: \"close-icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 37\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__form-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, message), /*#__PURE__*/React.createElement(\"div\", {\n    className: emailGroupClass,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"email\",\n    label: emailLabel || 'Email',\n    placeholder: emailLabel || 'Email',\n    defaultLabel: \"Email\",\n    handleChangeInput: props.handleInputEmail,\n    inputValue: email,\n    handleFocusInput: props.handleFieldFocus,\n    classNameLabel: \"cr-email-form__label\",\n    classNameInput: \"cr-email-form__input\",\n    autoFocus: !isMobileDevice,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }), emailError && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 40\n    }\n  }, emailError)), props.renderCaptcha, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-email-form__button-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    block: true,\n    type: \"button\",\n    disabled: isButtonDisabled(),\n    onClick: function onClick(e) {\n      return handleClick(e);\n    },\n    size: \"lg\",\n    variant: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, isLoading ? 'Loading...' : buttonLabel ? buttonLabel : 'Send')))));\n});\nexport { EmailForm };","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/EmailForm/index.tsx"],"names":["cr","React","Button","useSelector","CustomInput","CloseIcon","EMAIL_REGEX","selectMobileDeviceState","EmailForm","memo","props","isMobileDevice","title","buttonLabel","isLoading","emailLabel","message","email","emailFocused","emailError","captchaType","geetestCaptchaSuccess","reCaptchaSuccess","handleCancel","handleReturnBack","handleSubmitForm","OnSubmit","isValidForm","isEmailValid","match","isButtonDisabled","handleClick","e","preventDefault","validateForm","emailFormClass","emailGroupClass","handleInputEmail","handleFieldFocus","renderCaptcha"],"mappings":"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","sourcesContent":["import cr from 'classnames';\nimport React, { FormEvent } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { CustomInput } from '../';\nimport { CloseIcon } from '../../assets/images/CloseIcon';\nimport { EMAIL_REGEX } from '../../helpers';\nimport { GeetestCaptchaResponse } from '../../modules';\nimport { selectMobileDeviceState } from '../../modules/public/globalSettings';\n\nexport interface EmailFormProps {\n    title?: string;\n    buttonLabel?: string;\n    errorMessage?: string;\n    isLoading?: boolean;\n    OnSubmit: () => void;\n    className?: string;\n    emailLabel?: string;\n    email: string;\n    message: string;\n    emailError: string;\n    emailFocused: boolean;\n    placeholder?: string;\n    validateForm: () => void;\n    handleInputEmail: (value: string) => void;\n    handleFieldFocus: () => void;\n    handleReturnBack: () => void;\n    captchaType?: 'recaptcha' | 'geetest' | 'none';\n    renderCaptcha?: JSX.Element | null;\n    reCaptchaSuccess?: boolean;\n    geetestCaptchaSuccess?: boolean;\n    captcha_response?: string | GeetestCaptchaResponse;\n}\n\nconst EmailForm = React.memo((props: EmailFormProps) => {\n    const isMobileDevice = useSelector(selectMobileDeviceState);\n\n    const {\n        title,\n        buttonLabel,\n        isLoading,\n        emailLabel,\n        message,\n        email,\n        emailFocused,\n        emailError,\n        captchaType,\n        geetestCaptchaSuccess,\n        reCaptchaSuccess,\n    } = props;\n\n    const handleCancel = () => {\n        props.handleReturnBack();\n    };\n\n    const handleSubmitForm = () => {\n        props.OnSubmit();\n    };\n\n    const isValidForm = () => {\n        const isEmailValid = email.match(EMAIL_REGEX);\n\n        return email && isEmailValid;\n    };\n\n    const isButtonDisabled = (): boolean => {\n        if (isLoading || !email.match(EMAIL_REGEX)) {\n            return true;\n        }\n\n        if (captchaType === 'recaptcha' && !reCaptchaSuccess) {\n            return true;\n        }\n\n        if (captchaType === 'geetest' && !geetestCaptchaSuccess) {\n            return true;\n        }\n\n        return false;\n    };\n\n    const handleClick = (e: FormEvent<HTMLInputElement>) => {\n        if (e) {\n            e.preventDefault();\n        }\n        if (!isValidForm()) {\n            props.validateForm();\n        } else {\n            handleSubmitForm();\n        }\n    };\n\n    const emailFormClass = cr('cr-email-form', {\n        'cr-email-form--extended': captchaType && captchaType !== 'none',\n    });\n\n    const emailGroupClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': emailFocused,\n    });\n\n    return (\n        <form>\n            <div className={emailFormClass}>\n                {!isMobileDevice && (\n                    <div className=\"cr-email-form__options-group\">\n                        <div className=\"cr-email-form__option\">\n                            <div className=\"cr-email-form__option-inner\">\n                                {title || 'Forgot password'}\n                                <div className=\"cr-email-form__cros-icon\" onClick={handleCancel}>\n                                    <CloseIcon className=\"close-icon\" />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"cr-email-form__form-content\">\n                    <div className=\"cr-email-form__header\">{message}</div>\n                    <div className={emailGroupClass}>\n                        <CustomInput\n                            type=\"email\"\n                            label={emailLabel || 'Email'}\n                            placeholder={emailLabel || 'Email'}\n                            defaultLabel=\"Email\"\n                            handleChangeInput={props.handleInputEmail}\n                            inputValue={email}\n                            handleFocusInput={props.handleFieldFocus}\n                            classNameLabel=\"cr-email-form__label\"\n                            classNameInput=\"cr-email-form__input\"\n                            autoFocus={!isMobileDevice}\n                        />\n                        {emailError && <div className=\"cr-email-form__error\">{emailError}</div>}\n                    </div>\n                    {props.renderCaptcha}\n                    <div className=\"cr-email-form__button-wrapper\">\n                        <Button\n                            block={true}\n                            type=\"button\"\n                            disabled={isButtonDisabled()}\n                            onClick={e => handleClick(e as any)}\n                            size=\"lg\"\n                            variant=\"primary\">\n                            {isLoading ? 'Loading...' : buttonLabel ? buttonLabel : 'Send'}\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n});\n\nexport { EmailForm };\n"]},"metadata":{},"sourceType":"module"}