{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(walletsSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { walletsData, walletsError } from '../actions';\nvar walletsOptions = {\n  apiVersion: 'peatio'\n};\nvar currenciesOptions = {\n  apiVersion: 'peatio'\n};\nexport function walletsSaga(action) {\n  var accounts, currencies, accountsByCurrencies;\n  return _regeneratorRuntime.wrap(function walletsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.get(walletsOptions), '/account/balances');\n\n        case 3:\n          accounts = _context.sent;\n          _context.next = 6;\n          return call(API.get(currenciesOptions), '/public/currencies');\n\n        case 6:\n          currencies = _context.sent;\n          accountsByCurrencies = currencies.map(function (currency) {\n            var walletInfo = accounts.find(function (wallet) {\n              return wallet.currency === currency.id;\n            });\n\n            if (!walletInfo) {\n              walletInfo = {\n                currency: currency.id\n              };\n            }\n\n            return _objectSpread(_objectSpread({}, walletInfo), {}, {\n              name: currency.name,\n              explorerTransaction: currency.explorer_transaction,\n              explorerAddress: currency.explorer_address,\n              fee: currency.withdraw_fee,\n              type: currency.type,\n              fixed: currency.precision,\n              iconUrl: currency.icon_url\n            });\n          });\n          _context.next = 10;\n          return put(walletsData(accountsByCurrencies));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: walletsError\n            }\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/wallets/sagas/walletsSaga.ts"],"names":["walletsSaga","call","put","sendError","API","walletsData","walletsError","walletsOptions","apiVersion","currenciesOptions","action","get","accounts","currencies","accountsByCurrencies","map","currency","walletInfo","find","wallet","id","name","explorerTransaction","explorer_transaction","explorerAddress","explorer_address","fee","withdraw_fee","type","fixed","precision","iconUrl","icon_url","error","processingType","extraOptions","actionError"],"mappings":";;;oDAaiBA,W;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAAwD,YAAxD;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,IAAMC,iBAAiC,GAAG;AACtCD,EAAAA,UAAU,EAAE;AAD0B,CAA1C;AAIA,OAAO,SAAUR,WAAV,CAAsBU,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB,iBAAMT,IAAI,CAACG,GAAG,CAACO,GAAJ,CAAQJ,cAAR,CAAD,EAA0B,mBAA1B,CAAV;;AAFlB;AAEOK,UAAAA,QAFP;AAAA;AAGoB,iBAAMX,IAAI,CAACG,GAAG,CAACO,GAAJ,CAAQF,iBAAR,CAAD,EAA6B,oBAA7B,CAAV;;AAHpB;AAGOI,UAAAA,UAHP;AAKOC,UAAAA,oBALP,GAK8BD,UAAU,CAACE,GAAX,CAAe,UAAAC,QAAQ,EAAI;AACpD,gBAAIC,UAAU,GAAGL,QAAQ,CAACM,IAAT,CAAc,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACH,QAAP,KAAoBA,QAAQ,CAACI,EAAjC;AAAA,aAApB,CAAjB;;AAEA,gBAAI,CAACH,UAAL,EAAiB;AACbA,cAAAA,UAAU,GAAG;AACTD,gBAAAA,QAAQ,EAAEA,QAAQ,CAACI;AADV,eAAb;AAGH;;AAED,mDACOH,UADP;AAEII,cAAAA,IAAI,EAAEL,QAAQ,CAACK,IAFnB;AAGIC,cAAAA,mBAAmB,EAAEN,QAAQ,CAAEO,oBAHnC;AAIIC,cAAAA,eAAe,EAAER,QAAQ,CAAES,gBAJ/B;AAKIC,cAAAA,GAAG,EAAEV,QAAQ,CAAEW,YALnB;AAMIC,cAAAA,IAAI,EAAEZ,QAAQ,CAAEY,IANpB;AAOIC,cAAAA,KAAK,EAAEb,QAAQ,CAAEc,SAPrB;AAQIC,cAAAA,OAAO,EAAEf,QAAQ,CAACgB;AARtB;AAUH,WAnB4B,CAL9B;AAAA;AA0BC,iBAAM9B,GAAG,CAACG,WAAW,CAACS,oBAAD,CAAZ,CAAT;;AA1BD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA4BC,iBAAMZ,GAAG,CAACC,SAAS,CAAC;AAChB8B,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAE9B;AADH;AAHE,WAAD,CAAV,CAAT;;AA5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { walletsData, walletsError, WalletsFetch } from '../actions';\n\nconst walletsOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nconst currenciesOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* walletsSaga(action: WalletsFetch) {\n    try {\n        const accounts = yield call(API.get(walletsOptions), '/account/balances');\n        const currencies = yield call(API.get(currenciesOptions), '/public/currencies');\n\n        const accountsByCurrencies = currencies.map(currency => {\n            let walletInfo = accounts.find(wallet => wallet.currency === currency.id);\n\n            if (!walletInfo) {\n                walletInfo = {\n                    currency: currency.id,\n                };\n            }\n\n            return ({\n                ...walletInfo,\n                name: currency.name,\n                explorerTransaction: currency!.explorer_transaction,\n                explorerAddress: currency!.explorer_address,\n                fee: currency!.withdraw_fee,\n                type: currency!.type,\n                fixed: currency!.precision,\n                iconUrl: currency.icon_url,\n            });\n        });\n\n        yield put(walletsData(accountsByCurrencies));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: walletsError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}