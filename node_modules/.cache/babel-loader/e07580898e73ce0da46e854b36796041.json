{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GEETEST_CAPTCHA_SUCCESS_DATA, GET_GEETEST_CAPTCHA_DATA, GET_GEETEST_CAPTCHA_ERROR, GET_GEETEST_CAPTCHA_FETCH, RECAPTCHA_SUCCESS_DATA, RESET_CAPTCHA_STATE, SHOULD_GEETEST_RESET_FETCH } from './constants';\nvar initialState = {\n  loading: false,\n  getKeysSuccess: false,\n  captcha_response: '',\n  reCaptchaSuccess: false,\n  geetestCaptchaSuccess: false,\n  shouldGeetestReset: false\n};\nexport var getGeetestCaptchaReducer = function getGeetestCaptchaReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_GEETEST_CAPTCHA_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        keys: action.keys,\n        loading: false,\n        getKeysSuccess: true\n      });\n\n    case GET_GEETEST_CAPTCHA_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        getKeysSuccess: false,\n        error: action.error\n      });\n\n    case GET_GEETEST_CAPTCHA_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        getKeysSuccess: false\n      });\n\n    case GEETEST_CAPTCHA_SUCCESS_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        geetestCaptchaSuccess: true,\n        captcha_response: action.payload.captcha_response,\n        shouldGeetestReset: false\n      });\n\n    case SHOULD_GEETEST_RESET_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        shouldGeetestReset: action.payload.shouldGeetestReset\n      });\n\n    case RECAPTCHA_SUCCESS_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reCaptchaSuccess: true,\n        captcha_response: action.payload.captcha_response\n      });\n\n    case RESET_CAPTCHA_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reCaptchaSuccess: false,\n        geetestCaptchaSuccess: false,\n        captcha_response: ''\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/captcha/reducer.ts"],"names":["GEETEST_CAPTCHA_SUCCESS_DATA","GET_GEETEST_CAPTCHA_DATA","GET_GEETEST_CAPTCHA_ERROR","GET_GEETEST_CAPTCHA_FETCH","RECAPTCHA_SUCCESS_DATA","RESET_CAPTCHA_STATE","SHOULD_GEETEST_RESET_FETCH","initialState","loading","getKeysSuccess","captcha_response","reCaptchaSuccess","geetestCaptchaSuccess","shouldGeetestReset","getGeetestCaptchaReducer","state","action","type","keys","error","payload"],"mappings":";AAGA,SACIA,4BADJ,EAEIC,wBAFJ,EAGIC,yBAHJ,EAIIC,yBAJJ,EAKIC,sBALJ,EAMIC,mBANJ,EAOIC,0BAPJ,QAQO,aARP;AAqBA,IAAMC,YAAiC,GAAG;AACtCC,EAAAA,OAAO,EAAE,KAD6B;AAEtCC,EAAAA,cAAc,EAAE,KAFsB;AAGtCC,EAAAA,gBAAgB,EAAE,EAHoB;AAItCC,EAAAA,gBAAgB,EAAE,KAJoB;AAKtCC,EAAAA,qBAAqB,EAAE,KALe;AAMtCC,EAAAA,kBAAkB,EAAE;AANkB,CAA1C;AASA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAwD;AAAA,MAAvDC,KAAuD,uEAA/CR,YAA+C;AAAA,MAAjCS,MAAiC;;AAC5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,wBAAL;AACI,6CACOc,KADP;AAEIG,QAAAA,IAAI,EAAEF,MAAM,CAACE,IAFjB;AAGIV,QAAAA,OAAO,EAAE,KAHb;AAIIC,QAAAA,cAAc,EAAE;AAJpB;;AAMJ,SAAKP,yBAAL;AACI,6CACOa,KADP;AAEIP,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,cAAc,EAAE,KAHpB;AAIIU,QAAAA,KAAK,EAAEH,MAAM,CAACG;AAJlB;;AAMJ,SAAKhB,yBAAL;AACI,6CACOY,KADP;AAEIP,QAAAA,OAAO,EAAE,IAFb;AAGIC,QAAAA,cAAc,EAAE;AAHpB;;AAKJ,SAAKT,4BAAL;AACI,6CACOe,KADP;AAEIH,QAAAA,qBAAqB,EAAE,IAF3B;AAGIF,QAAAA,gBAAgB,EAAEM,MAAM,CAACI,OAAP,CAAeV,gBAHrC;AAIIG,QAAAA,kBAAkB,EAAE;AAJxB;;AAMJ,SAAKP,0BAAL;AACI,6CACOS,KADP;AAEIF,QAAAA,kBAAkB,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAFvC;;AAIJ,SAAKT,sBAAL;AACI,6CACOW,KADP;AAEIJ,QAAAA,gBAAgB,EAAE,IAFtB;AAGID,QAAAA,gBAAgB,EAAEM,MAAM,CAACI,OAAP,CAAeV;AAHrC;;AAKJ,SAAKL,mBAAL;AACI,6CACOU,KADP;AAEIJ,QAAAA,gBAAgB,EAAE,KAFtB;AAGIC,QAAAA,qBAAqB,EAAE,KAH3B;AAIIF,QAAAA,gBAAgB,EAAE;AAJtB;;AAMJ;AACI,aAAOK,KAAP;AA/CR;AAiDH,CAlDM","sourcesContent":["import { GeetestCaptchaResponse } from '../..';\nimport { CommonError } from '../../types';\nimport { GeetestCaptchaAction, GeetestCaptchaKeys } from './actions';\nimport {\n    GEETEST_CAPTCHA_SUCCESS_DATA,\n    GET_GEETEST_CAPTCHA_DATA,\n    GET_GEETEST_CAPTCHA_ERROR,\n    GET_GEETEST_CAPTCHA_FETCH,\n    RECAPTCHA_SUCCESS_DATA,\n    RESET_CAPTCHA_STATE,\n    SHOULD_GEETEST_RESET_FETCH,\n} from './constants';\n\nexport interface GeetestCaptchaState {\n    loading: boolean;\n    getKeysSuccess: boolean;\n    error?: CommonError;\n    keys?: GeetestCaptchaKeys;\n    captcha_response?: string | GeetestCaptchaResponse;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n    shouldGeetestReset: boolean;\n}\n\nconst initialState: GeetestCaptchaState = {\n    loading: false,\n    getKeysSuccess: false,\n    captcha_response: '',\n    reCaptchaSuccess: false,\n    geetestCaptchaSuccess: false,\n    shouldGeetestReset: false,\n};\n\nexport const getGeetestCaptchaReducer = (state = initialState, action: GeetestCaptchaAction) => {\n    switch (action.type) {\n        case GET_GEETEST_CAPTCHA_DATA:\n            return {\n                ...state,\n                keys: action.keys,\n                loading: false,\n                getKeysSuccess: true,\n            };\n        case GET_GEETEST_CAPTCHA_ERROR:\n            return {\n                ...state,\n                loading: false,\n                getKeysSuccess: false,\n                error: action.error,\n            };\n        case GET_GEETEST_CAPTCHA_FETCH:\n            return {\n                ...state,\n                loading: true,\n                getKeysSuccess: false,\n            };\n        case GEETEST_CAPTCHA_SUCCESS_DATA:\n            return {\n                ...state,\n                geetestCaptchaSuccess: true,\n                captcha_response: action.payload.captcha_response,\n                shouldGeetestReset: false,\n            };\n        case SHOULD_GEETEST_RESET_FETCH:\n            return {\n                ...state,\n                shouldGeetestReset: action.payload.shouldGeetestReset,\n            };\n        case RECAPTCHA_SUCCESS_DATA:\n            return {\n                ...state,\n                reCaptchaSuccess: true,\n                captcha_response: action.payload.captcha_response,\n            };\n        case RESET_CAPTCHA_STATE:\n            return {\n                ...state,\n                reCaptchaSuccess: false,\n                geetestCaptchaSuccess: false,\n                captcha_response: '',\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}