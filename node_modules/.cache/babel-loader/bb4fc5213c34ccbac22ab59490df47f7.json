{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/Dropdown/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { ChevronIcon } from '../../assets/images/ChevronIcon';\n\n/**\n *  Cryptobase Dropdown that overrides default dropdown with list of options.\n */\nvar DropdownComponent = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropdownComponent, _React$PureComponent);\n\n  var _super = _createSuper(DropdownComponent);\n\n  function DropdownComponent(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownComponent);\n\n    _this = _super.call(this, props);\n\n    _this.renderElem = function (elem, index) {\n      return /*#__PURE__*/React.createElement(Dropdown.Item, {\n        key: index,\n        onSelect: function onSelect(eventKey, e) {\n          return _this.handleSelect(elem, index);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, elem);\n    };\n\n    _this.handleSelect = function (elem, index) {\n      _this.props.onSelect && _this.props.onSelect(index);\n\n      _this.setState({\n        selected: _this.convertToString(elem),\n        selectedIndex: index.toString()\n      });\n    };\n\n    _this.convertToString = function (elem) {\n      if (elem !== undefined && elem !== null) {\n        return elem.toString();\n      }\n\n      return '';\n    };\n\n    var selectedValue = _this.props.placeholder || _this.convertToString(_this.props.list[0]);\n\n    _this.state = {\n      selected: selectedValue,\n      selectedIndex: '0'\n    };\n    return _this;\n  }\n\n  _createClass(DropdownComponent, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var placeholder = this.props.placeholder;\n\n      if (placeholder && placeholder !== prevProps.placeholder) {\n        this.setState({\n          selected: placeholder,\n          selectedIndex: '0'\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var list = this.props.list;\n      var selected = this.state.selected;\n      var cx = classnames('cr-dropdown', this.props.className, {\n        'cr-dropdown--default': selected === this.props.placeholder\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n        variant: \"primary\",\n        id: \"dropdown-basic\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }, selected, /*#__PURE__*/React.createElement(ChevronIcon, {\n        className: \"cr-dropdown__arrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, list.map(function (elem, index) {\n        return _this2.renderElem(elem, index);\n      }))));\n    }\n  }]);\n\n  return DropdownComponent;\n}(React.PureComponent);\n\nexport { DropdownComponent };","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/Dropdown/index.tsx"],"names":["classnames","React","Dropdown","ChevronIcon","DropdownComponent","props","renderElem","elem","index","eventKey","e","handleSelect","onSelect","setState","selected","convertToString","selectedIndex","toString","undefined","selectedValue","placeholder","list","state","prevProps","cx","className","map","PureComponent"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { ChevronIcon } from '../../assets/images/ChevronIcon';\n\ntype DropdownElem = number | string | React.ReactNode;\n\nexport interface DropdownComponentProps {\n    /**\n     * List of options\n     */\n    list: DropdownElem[];\n    /**\n     * Selection callback function\n     * @default empty\n     */\n    onSelect?: (index: number) => void;\n    /**\n     *  By default class name 'cr-dropwdown'\n     *  This property gives an additional class name\n     *  @default empty\n     */\n    className?: string;\n    /**\n     * Value for placeholder of Dropdown components\n     * @default empty\n     */\n    placeholder?: string;\n    /**\n     * Value for disabling contentEditable property\n     * @default false\n     */\n    disableContentEditable?: boolean;\n}\n\ninterface DropdownComponentState {\n    selected: string;\n    selectedIndex: string;\n}\n\n/**\n *  Cryptobase Dropdown that overrides default dropdown with list of options.\n */\nclass DropdownComponent extends React.PureComponent<DropdownComponentProps & {}, DropdownComponentState> {\n    constructor(props: DropdownComponentProps) {\n        super(props);\n        const selectedValue = this.props.placeholder || this.convertToString(this.props.list[0]);\n        this.state = {\n            selected: selectedValue,\n            selectedIndex: '0',\n        };\n    }\n\n    public componentDidUpdate(prevProps: DropdownComponentProps) {\n        const { placeholder } = this.props;\n\n        if (placeholder && placeholder !== prevProps.placeholder) {\n            this.setState({\n                selected: placeholder,\n                selectedIndex: '0',\n            });\n        }\n    }\n\n    public render() {\n        const { list } = this.props;\n        const { selected } = this.state;\n        const cx = classnames('cr-dropdown', this.props.className, {\n            'cr-dropdown--default': selected === this.props.placeholder,\n        });\n\n        return (\n            <div className={cx}>\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n                        {selected}\n                        <ChevronIcon className=\"cr-dropdown__arrow\" />\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        {list.map((elem, index) => this.renderElem(elem, index))}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n        );\n    }\n\n    private renderElem = (elem: DropdownElem, index: number) => {\n        return  (\n            <Dropdown.Item\n                key={index}\n                onSelect={ (eventKey: any, e?: React.SyntheticEvent<unknown>) => this.handleSelect(elem, index)}\n            >\n                {elem}\n            </Dropdown.Item>\n        );\n    };\n\n    private handleSelect = (elem: DropdownElem, index: number) => {\n        this.props.onSelect && this.props.onSelect(index);\n        this.setState({\n            selected: this.convertToString(elem),\n            selectedIndex: index.toString(),\n        });\n    };\n\n    private convertToString = (elem: DropdownElem) => {\n        if (elem !== undefined && elem !== null) {\n            return elem.toString();\n        }\n\n        return '';\n    };\n}\n\nexport {\n    DropdownComponent,\n};\n"]},"metadata":{},"sourceType":"module"}