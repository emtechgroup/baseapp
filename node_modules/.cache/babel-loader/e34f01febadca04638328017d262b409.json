{"ast":null,"code":"import _slicedToArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/MetaMaskButton/index.tsx\";\n\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { MetaMaskLogo } from '../../assets/images/MetaMaskLogo';\nimport { Web3ProviderWrapper } from '../../helpers';\nimport { alertPush, sendError } from '../../modules';\nexport var injected = new InjectedConnector({\n  supportedChainIds: [1]\n});\nexport var MetaMaskButtonComponent = function MetaMaskButtonComponent(props) {\n  var _useWeb3ReactCore = useWeb3ReactCore(),\n      account = _useWeb3ReactCore.account,\n      activate = _useWeb3ReactCore.activate,\n      connector = _useWeb3ReactCore.connector,\n      error = _useWeb3ReactCore.error;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activatingConnector = _React$useState2[0],\n      setActivatingConnector = _React$useState2[1];\n\n  var dispatch = useDispatch();\n  var handleConnectWallet = React.useCallback(function () {\n    if (account) {\n      dispatch(alertPush({\n        message: ['metamask.success.connected'],\n        type: 'success'\n      }));\n    } else {\n      setActivatingConnector(injected); // tslint:disable-next-line: no-floating-promises\n\n      activate(injected);\n    }\n  }, [account, activate, dispatch]);\n  React.useEffect(function () {\n    if (activatingConnector && activatingConnector === connector && account) {\n      dispatch(alertPush({\n        message: ['metamask.success.connected'],\n        type: 'success'\n      }));\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector, account, dispatch]);\n  React.useEffect(function () {\n    if (!!error) {\n      dispatch(sendError({\n        error,\n        processingType: 'alert',\n        extraOptions: {\n          type: 'METAMASK_HANDLE_ERROR'\n        }\n      }));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [!!error, dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pg-metamask\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MetaMaskLogo, {\n    className: \"pg-metamask__logo-icon\",\n    onClick: handleConnectWallet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n};\nexport var MetaMaskButton = function MetaMaskButton(props) {\n  return /*#__PURE__*/React.createElement(Web3ProviderWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MetaMaskButtonComponent, Object.assign({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/MetaMaskButton/index.tsx"],"names":["useWeb3React","useWeb3ReactCore","InjectedConnector","React","useDispatch","MetaMaskLogo","Web3ProviderWrapper","alertPush","sendError","injected","supportedChainIds","MetaMaskButtonComponent","props","account","activate","connector","error","useState","activatingConnector","setActivatingConnector","dispatch","handleConnectWallet","useCallback","message","type","useEffect","undefined","processingType","extraOptions","MetaMaskButton"],"mappings":";;;;;AACA,SAASA,YAAY,IAAIC,gBAAzB,QAAiD,kBAAjD;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,eAArC;AAQA,OAAO,IAAMC,QAAQ,GAAG,IAAIP,iBAAJ,CAAsB;AAAEQ,EAAAA,iBAAiB,EAAE,CAAC,CAAD;AAArB,CAAtB,CAAjB;AAEP,OAAO,IAAMC,uBAAuD,GAAG,SAA1DA,uBAA0D,CAACC,KAAD,EAAkB;AAAA,0BAMjFX,gBAAgB,EANiE;AAAA,MAEjFY,OAFiF,qBAEjFA,OAFiF;AAAA,MAGjFC,QAHiF,qBAGjFA,QAHiF;AAAA,MAIjFC,SAJiF,qBAIjFA,SAJiF;AAAA,MAKjFC,KALiF,qBAKjFA,KALiF;;AAAA,wBAO/Bb,KAAK,CAACc,QAAN,EAP+B;AAAA;AAAA,MAO9EC,mBAP8E;AAAA,MAOzDC,sBAPyD;;AAQrF,MAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,MAAMiB,mBAAmB,GAAGlB,KAAK,CAACmB,WAAN,CAAkB,YAAM;AAChD,QAAIT,OAAJ,EAAa;AACTO,MAAAA,QAAQ,CAACb,SAAS,CAAC;AAAEgB,QAAAA,OAAO,EAAE,CAAC,4BAAD,CAAX;AAA2CC,QAAAA,IAAI,EAAE;AAAjD,OAAD,CAAV,CAAR;AACH,KAFD,MAEO;AACHL,MAAAA,sBAAsB,CAACV,QAAD,CAAtB,CADG,CAEH;;AACAK,MAAAA,QAAQ,CAACL,QAAD,CAAR;AACH;AACJ,GAR2B,EAQzB,CAACI,OAAD,EAAUC,QAAV,EAAoBM,QAApB,CARyB,CAA5B;AAUAjB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAM;AAClB,QAAIP,mBAAmB,IACnBA,mBAAmB,KAAKH,SADxB,IAEAF,OAFJ,EAGE;AACEO,MAAAA,QAAQ,CAACb,SAAS,CAAC;AAAEgB,QAAAA,OAAO,EAAE,CAAC,4BAAD,CAAX;AAA2CC,QAAAA,IAAI,EAAE;AAAjD,OAAD,CAAV,CAAR;AACAL,MAAAA,sBAAsB,CAACO,SAAD,CAAtB;AACH;AACJ,GARD,EAQG,CAACR,mBAAD,EAAsBH,SAAtB,EAAiCF,OAAjC,EAA0CO,QAA1C,CARH;AAUAjB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAM;AAClB,QAAI,CAAC,CAACT,KAAN,EAAa;AACTI,MAAAA,QAAQ,CAACZ,SAAS,CAAC;AACfQ,QAAAA,KADe;AAEfW,QAAAA,cAAc,EAAE,OAFD;AAGfC,QAAAA,YAAY,EAAE;AACVJ,UAAAA,IAAI,EAAE;AADI;AAHC,OAAD,CAAV,CAAR;AAOH,KATiB,CAWlB;;AACH,GAZD,EAYG,CAAC,CAAC,CAACR,KAAH,EAAUI,QAAV,CAZH;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAC,wBADd;AAEI,IAAA,OAAO,EAAEC,mBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAQH,CApDM;AAsDP,OAAO,IAAMQ,cAA8C,GAAG,SAAjDA,cAAiD,CAACjB,KAAD;AAAA,sBAC1D,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,uBAAD,oBAA6BA,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CAD0D;AAAA,CAAvD","sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { MetaMaskLogo } from '../../assets/images/MetaMaskLogo';\nimport { Web3ProviderWrapper } from '../../helpers';\nimport { alertPush, sendError } from '../../modules';\n\ninterface OwnProps {\n    depositAddress: string;\n}\n\ntype Props = OwnProps;\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1] });\n\nexport const MetaMaskButtonComponent: React.FunctionComponent<Props> = (props: Props) => {\n    const {\n        account,\n        activate,\n        connector,\n        error,\n    } = useWeb3ReactCore<Web3Provider>();\n    const [activatingConnector, setActivatingConnector] = React.useState<any>();\n    const dispatch = useDispatch();\n\n    const handleConnectWallet = React.useCallback(() => {\n        if (account) {\n            dispatch(alertPush({ message: ['metamask.success.connected'], type: 'success'}));\n        } else {\n            setActivatingConnector(injected);\n            // tslint:disable-next-line: no-floating-promises\n            activate(injected);\n        }\n    }, [account, activate, dispatch]);\n\n    React.useEffect(() => {\n        if (activatingConnector &&\n            activatingConnector === connector &&\n            account\n        ) {\n            dispatch(alertPush({ message: ['metamask.success.connected'], type: 'success'}));\n            setActivatingConnector(undefined);\n        }\n    }, [activatingConnector, connector, account, dispatch]);\n\n    React.useEffect(() => {\n        if (!!error) {\n            dispatch(sendError({\n                error,\n                processingType: 'alert',\n                extraOptions: {\n                    type: 'METAMASK_HANDLE_ERROR',\n                },\n            }));\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [!!error, dispatch]);\n\n    return (\n        <div className=\"pg-metamask\">\n            <MetaMaskLogo\n                className=\"pg-metamask__logo-icon\"\n                onClick={handleConnectWallet}\n            />\n        </div>\n    );\n};\n\nexport const MetaMaskButton: React.FunctionComponent<Props> = (props: Props) => (\n    <Web3ProviderWrapper>\n        <MetaMaskButtonComponent {...props} />\n    </Web3ProviderWrapper>\n);\n"]},"metadata":{},"sourceType":"module"}