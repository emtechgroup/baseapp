{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/Confirm/Address/index.tsx\";\nimport cr from 'classnames';\nimport * as countries from 'i18n-iso-countries';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { languages } from '../../../api/config';\nimport { CustomInput, DropdownComponent, UploadFile } from '../../../components';\nimport { alertPush, selectCurrentLanguage, selectMobileDeviceState, selectSendAddressesSuccess, sendAddresses as _sendAddresses } from '../../../modules';\n\nvar AddressComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddressComponent, _React$Component);\n\n  var _super = _createSuper(AddressComponent);\n\n  function AddressComponent() {\n    var _this;\n\n    _classCallCheck(this, AddressComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      address: '',\n      addressFocused: false,\n      city: '',\n      cityFocused: false,\n      country: '',\n      postcode: '',\n      postcodeFocused: false,\n      fileScan: []\n    };\n\n    _this.handleChange = function (value, key) {\n      // @ts-ignore\n      _this.setState({\n        [key]: value\n      });\n    };\n\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'address':\n            _this.setState({\n              addressFocused: !_this.state.addressFocused\n            });\n\n            break;\n\n          case 'city':\n            _this.setState({\n              cityFocused: !_this.state.cityFocused\n            });\n\n            break;\n\n          case 'postcode':\n            _this.setState({\n              postcodeFocused: !_this.state.postcodeFocused\n            });\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    _this.handleUploadScan = function (uploadEvent, id) {\n      var allFiles = uploadEvent.target.files;\n      var maxDocsCount = 1;\n      var additionalFileList = Array.from(allFiles).length > maxDocsCount ? Array.from(allFiles).slice(0, maxDocsCount) : Array.from(allFiles);\n\n      switch (id) {\n        case 'fileScan':\n          _this.setState({\n            fileScan: additionalFileList\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handleValidateInput = function (field, value) {\n      switch (field) {\n        case 'address':\n          var residentialAddressRegex = new RegExp(\"^[a-zA-Z0-9,.;/\\\\s]+$\");\n          return value.match(residentialAddressRegex) ? true : false;\n\n        case 'city':\n          var cityRegex = new RegExp(\"^[a-zA-Z]+$\");\n          return value.match(cityRegex) ? true : false;\n\n        case 'postcode':\n          var postcodeRegex = new RegExp(\"^[0-9]{1,12}$\");\n          return value.match(postcodeRegex) ? true : false;\n\n        default:\n          return true;\n      }\n    };\n\n    _this.selectCountry = function (value) {\n      _this.setState({\n        country: countries.getAlpha2Code(value, _this.props.lang)\n      });\n    };\n\n    _this.handleCheckButtonDisabled = function () {\n      var _this$state = _this.state,\n          address = _this$state.address,\n          city = _this$state.city,\n          country = _this$state.country,\n          fileScan = _this$state.fileScan,\n          postcode = _this$state.postcode;\n\n      var addressValid = _this.handleValidateInput('address', address);\n\n      var cityValid = _this.handleValidateInput('city', city);\n\n      var postcodeValid = _this.handleValidateInput('postcode', postcode);\n\n      return !addressValid || !cityValid || !country.length || !postcodeValid || !fileScan.length;\n    };\n\n    _this.sendAddress = function () {\n      var _this$state2 = _this.state,\n          address = _this$state2.address,\n          city = _this$state2.city,\n          country = _this$state2.country,\n          fileScan = _this$state2.fileScan,\n          postcode = _this$state2.postcode;\n      var request = new FormData();\n      request.append('upload[]', fileScan[0]);\n      request.append('address', address);\n      request.append('city', city);\n      request.append('country', country);\n      request.append('postcode', postcode);\n\n      _this.props.sendAddresses(request);\n    };\n\n    _this.translate = function (key) {\n      return _this.props.intl.formatMessage({\n        id: key\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddressComponent, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(next) {\n      if (next.success && !this.props.success) {\n        this.props.history.push('/profile');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          lang = _this$props.lang,\n          isMobileDevice = _this$props.isMobileDevice;\n      var _this$state3 = this.state,\n          address = _this$state3.address,\n          addressFocused = _this$state3.addressFocused,\n          city = _this$state3.city,\n          cityFocused = _this$state3.cityFocused,\n          postcode = _this$state3.postcode,\n          postcodeFocused = _this$state3.postcodeFocused,\n          fileScan = _this$state3.fileScan;\n      /* tslint:disable */\n\n      languages.map(function (l) {\n        return countries.registerLocale(require(\"i18n-iso-countries/langs/\".concat(l, \".json\")));\n      });\n      /* tslint:enable */\n\n      var addressFocusedClass = cr('pg-confirm__content-address__row__content', {\n        'pg-confirm__content-address__row__content--focused': addressFocused,\n        'pg-confirm__content-address__row__content--wrong': address && !this.handleValidateInput('address', address)\n      });\n      var cityFocusedClass = cr('pg-confirm__content-address__row__content', {\n        'pg-confirm__content-address__row__content--focused': cityFocused,\n        'pg-confirm__content-address__row__content--wrong': city && !this.handleValidateInput('city', city)\n      });\n      var postcodeFocusedClass = cr('pg-confirm__content-address__row__content', {\n        'pg-confirm__content-address__row__content--focused': postcodeFocused,\n        'pg-confirm__content-address__row__content--wrong': postcode && !this.handleValidateInput('postcode', postcode)\n      });\n      var dataCountries = Object.values(countries.getNames(lang));\n\n      var onSelectCountry = function onSelectCountry(value) {\n        return _this2.selectCountry(dataCountries[value]);\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: addressFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        inputValue: address,\n        placeholder: this.translate('page.body.kyc.address.address.placeholder'),\n        label: this.translate('page.body.kyc.address.address'),\n        defaultLabel: '',\n        labelVisible: true,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'address');\n        },\n        handleFocusInput: this.handleFieldFocus('address'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: cityFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        label: this.translate('page.body.kyc.address.city'),\n        labelVisible: true,\n        defaultLabel: '',\n        placeholder: this.translate('page.body.kyc.address.city.placeholder'),\n        inputValue: city,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'city');\n        },\n        handleFocusInput: this.handleFieldFocus('city'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: postcodeFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        label: this.translate('page.body.kyc.address.postcode'),\n        labelVisible: true,\n        defaultLabel: '',\n        placeholder: this.translate('page.body.kyc.address.postcode.placeholder'),\n        inputValue: postcode,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'postcode');\n        },\n        handleFocusInput: this.handleFieldFocus('postcode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row__content-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      }, this.translate('page.body.kyc.documents.country')), /*#__PURE__*/React.createElement(DropdownComponent, {\n        className: \"pg-confirm__content-address__row__content-number-dropdown\",\n        list: dataCountries,\n        onSelect: onSelectCountry,\n        placeholder: this.translate('page.body.kyc.documents.country.placeholder'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(UploadFile, {\n        id: \"fileScan\",\n        isMobileDevice: isMobileDevice,\n        title: this.translate('page.body.kyc.address.uploadFile.title'),\n        label: this.translate('page.body.kyc.address.uploadFile.label'),\n        buttonText: this.translate('page.body.kyc.address.uploadFile.button'),\n        sizesText: this.translate('page.body.kyc.address.uploadFile.sizes'),\n        formatsText: this.translate('page.body.kyc.address.uploadFile.formats'),\n        tipText: this.translate('page.body.kyc.address.uploadFile.tip'),\n        handleUploadScan: function handleUploadScan(uploadEvent) {\n          return _this2.handleUploadScan(uploadEvent, 'fileScan');\n        },\n        uploadedFile: fileScan[0] && fileScan[0].name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-deep\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.sendAddress,\n        disabled: this.handleCheckButtonDisabled(),\n        size: \"lg\",\n        variant: \"primary\",\n        type: \"button\",\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, this.translate('page.body.kyc.submit')))));\n    }\n  }]);\n\n  return AddressComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    lang: selectCurrentLanguage(state),\n    success: selectSendAddressesSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchAlert: function fetchAlert(payload) {\n      return dispatch(alertPush(payload));\n    },\n    sendAddresses: function sendAddresses(payload) {\n      return dispatch(_sendAddresses(payload));\n    }\n  };\n};\n\nexport var Address = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(AddressComponent); // tslint:disable-line","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/Confirm/Address/index.tsx"],"names":["cr","countries","React","Button","injectIntl","connect","withRouter","compose","languages","CustomInput","DropdownComponent","UploadFile","alertPush","selectCurrentLanguage","selectMobileDeviceState","selectSendAddressesSuccess","sendAddresses","AddressComponent","state","address","addressFocused","city","cityFocused","country","postcode","postcodeFocused","fileScan","handleChange","value","key","setState","handleFieldFocus","field","handleUploadScan","uploadEvent","id","allFiles","target","files","maxDocsCount","additionalFileList","Array","from","length","slice","handleValidateInput","residentialAddressRegex","RegExp","match","cityRegex","postcodeRegex","selectCountry","getAlpha2Code","props","lang","handleCheckButtonDisabled","addressValid","cityValid","postcodeValid","sendAddress","request","FormData","append","translate","intl","formatMessage","next","success","history","push","isMobileDevice","map","l","registerLocale","require","addressFocusedClass","cityFocusedClass","postcodeFocusedClass","dataCountries","Object","values","getNames","onSelectCountry","e","name","Component","mapStateToProps","mapDispatchToProps","dispatch","fetchAlert","payload","Address"],"mappings":"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","sourcesContent":["import cr from 'classnames';\nimport * as countries from 'i18n-iso-countries';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../../';\nimport { languages } from '../../../api/config';\nimport { CustomInput, DropdownComponent, UploadFile } from '../../../components';\nimport {\n    alertPush,\n    RootState,\n    selectCurrentLanguage,\n    selectMobileDeviceState,\n    selectSendAddressesSuccess,\n    sendAddresses,\n} from '../../../modules';\n\ninterface ReduxProps {\n    lang: string;\n    success?: string;\n    isMobileDevice: boolean;\n}\n\ninterface DispatchProps {\n    sendAddresses: typeof sendAddresses;\n    fetchAlert: typeof alertPush;\n}\n\ninterface State {\n    address: string;\n    addressFocused: boolean;\n    city: string;\n    cityFocused: boolean;\n    country: string;\n    postcode: string;\n    postcodeFocused: boolean;\n    fileScan: File[];\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps;\n\nclass AddressComponent extends React.Component<Props, State> {\n    public state = {\n        address: '',\n        addressFocused: false,\n        city: '',\n        cityFocused: false,\n        country: '',\n        postcode: '',\n        postcodeFocused: false,\n        fileScan: [],\n    };\n\n    public UNSAFE_componentWillReceiveProps(next: Props) {\n        if (next.success && !this.props.success) {\n            this.props.history.push('/profile');\n        }\n    }\n\n    public render() {\n        const { lang, isMobileDevice } = this.props;\n        const {\n            address,\n            addressFocused,\n            city,\n            cityFocused,\n            postcode,\n            postcodeFocused,\n            fileScan,\n        } = this.state;\n\n        /* tslint:disable */\n        languages.map((l: string) => countries.registerLocale(require(`i18n-iso-countries/langs/${l}.json`)));\n        /* tslint:enable */\n\n        const addressFocusedClass = cr('pg-confirm__content-address__row__content', {\n            'pg-confirm__content-address__row__content--focused': addressFocused,\n            'pg-confirm__content-address__row__content--wrong': address && !this.handleValidateInput('address', address),\n        });\n\n        const cityFocusedClass = cr('pg-confirm__content-address__row__content', {\n            'pg-confirm__content-address__row__content--focused': cityFocused,\n            'pg-confirm__content-address__row__content--wrong': city && !this.handleValidateInput('city', city),\n        });\n\n        const postcodeFocusedClass = cr('pg-confirm__content-address__row__content', {\n            'pg-confirm__content-address__row__content--focused': postcodeFocused,\n            'pg-confirm__content-address__row__content--wrong': postcode && !this.handleValidateInput('postcode', postcode),\n        });\n\n        const dataCountries = Object.values(countries.getNames(lang));\n        const onSelectCountry = value => this.selectCountry(dataCountries[value]);\n\n        return (\n            <React.Fragment>\n                <div className=\"pg-confirm__content-address\">\n                    <div className=\"pg-confirm__content-address__row\">\n                        <fieldset className={addressFocusedClass}>\n                            <CustomInput\n                                type=\"string\"\n                                inputValue={address}\n                                placeholder={this.translate('page.body.kyc.address.address.placeholder')}\n                                label={this.translate('page.body.kyc.address.address')}\n                                defaultLabel={''}\n                                labelVisible={true}\n                                handleChangeInput={e => this.handleChange(e, 'address')}\n                                handleFocusInput={this.handleFieldFocus('address')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-address__row input-group\">\n                        <fieldset className={cityFocusedClass}>\n                            <CustomInput\n                                type=\"string\"\n                                label={this.translate('page.body.kyc.address.city')}\n                                labelVisible={true}\n                                defaultLabel={''}\n                                placeholder={this.translate('page.body.kyc.address.city.placeholder')}\n                                inputValue={city}\n                                handleChangeInput={e => this.handleChange(e, 'city')}\n                                handleFocusInput={this.handleFieldFocus('city')}\n                            />\n                        </fieldset>\n                        <fieldset className={postcodeFocusedClass}>\n                            <CustomInput\n                                type=\"string\"\n                                label={this.translate('page.body.kyc.address.postcode')}\n                                labelVisible={true}\n                                defaultLabel={''}\n                                placeholder={this.translate('page.body.kyc.address.postcode.placeholder')}\n                                inputValue={postcode}\n                                handleChangeInput={e => this.handleChange(e, 'postcode')}\n                                handleFocusInput={this.handleFieldFocus('postcode')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-address__row__content\">\n                        <div className=\"pg-confirm__content-address__row__content-label\">\n                            {this.translate('page.body.kyc.documents.country')}\n                        </div>\n                        <DropdownComponent\n                            className=\"pg-confirm__content-address__row__content-number-dropdown\"\n                            list={dataCountries}\n                            onSelect={onSelectCountry}\n                            placeholder={this.translate('page.body.kyc.documents.country.placeholder')}\n                        />\n                    </div>\n                    <UploadFile\n                        id=\"fileScan\"\n                        isMobileDevice={isMobileDevice}\n                        title={this.translate('page.body.kyc.address.uploadFile.title')}\n                        label={this.translate('page.body.kyc.address.uploadFile.label')}\n                        buttonText={this.translate('page.body.kyc.address.uploadFile.button')}\n                        sizesText={this.translate('page.body.kyc.address.uploadFile.sizes')}\n                        formatsText={this.translate('page.body.kyc.address.uploadFile.formats')}\n                        tipText={this.translate('page.body.kyc.address.uploadFile.tip')}\n                        handleUploadScan={uploadEvent => this.handleUploadScan(uploadEvent, 'fileScan')}\n                        uploadedFile={fileScan[0] && (fileScan[0] as File).name}\n                    />\n                    <div className=\"pg-confirm__content-deep\">\n                        <Button\n                            onClick={this.sendAddress}\n                            disabled={this.handleCheckButtonDisabled()}\n                            size=\"lg\"\n                            variant=\"primary\"\n                            type=\"button\"\n                            block={true}\n                        >\n                            {this.translate('page.body.kyc.submit')}\n                        </Button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private handleChange = (value: string, key: string) => {\n        // @ts-ignore\n        this.setState({\n            [key]: value,\n        });\n    };\n\n    private handleFieldFocus = (field: string) => {\n        return () => {\n            switch (field) {\n                case 'address':\n                    this.setState({\n                        addressFocused: !this.state.addressFocused,\n                    });\n                    break;\n                case 'city':\n                    this.setState({\n                        cityFocused: !this.state.cityFocused,\n                    });\n                    break;\n                case 'postcode':\n                    this.setState({\n                        postcodeFocused: !this.state.postcodeFocused,\n                    });\n                    break;\n                default:\n                    break;\n            }\n        };\n    };\n\n    private handleUploadScan = (uploadEvent, id) => {\n        const allFiles: File[] = uploadEvent.target.files;\n        const maxDocsCount = 1;\n        const additionalFileList = Array.from(allFiles).length > maxDocsCount ?  Array.from(allFiles).slice(0, maxDocsCount) : Array.from(allFiles);\n\n        switch (id) {\n            case 'fileScan':\n                this.setState({ fileScan: additionalFileList });\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handleValidateInput = (field: string, value: string): boolean => {\n        switch (field) {\n            case 'address':\n                const residentialAddressRegex = new RegExp(`^[a-zA-Z0-9,.;/\\\\s]+$`);\n\n                return value.match(residentialAddressRegex) ? true : false;\n            case 'city':\n                const cityRegex = new RegExp(`^[a-zA-Z]+$`);\n\n                return value.match(cityRegex) ? true : false;\n            case 'postcode':\n                const postcodeRegex = new RegExp(`^[0-9]{1,12}$`);\n\n                return value.match(postcodeRegex) ? true : false;\n            default:\n                return true;\n        }\n    };\n\n    private selectCountry = (value: string) => {\n        this.setState({\n            country: countries.getAlpha2Code(value, this.props.lang),\n        });\n    };\n\n    private handleCheckButtonDisabled = () => {\n        const {\n            address,\n            city,\n            country,\n            fileScan,\n            postcode,\n        } = this.state;\n\n        const addressValid = this.handleValidateInput('address', address);\n        const cityValid = this.handleValidateInput('city', city);\n        const postcodeValid = this.handleValidateInput('postcode', postcode);\n\n        return (\n            !addressValid ||\n            !cityValid ||\n            !country.length ||\n            !postcodeValid ||\n            !fileScan.length\n        );\n    };\n\n    private sendAddress = () => {\n        const {\n            address,\n            city,\n            country,\n            fileScan,\n            postcode,\n        } = this.state;\n\n        const request = new FormData();\n        request.append('upload[]', fileScan[0]);\n        request.append('address', address);\n        request.append('city', city);\n        request.append('country', country);\n        request.append('postcode', postcode);\n\n        this.props.sendAddresses(request);\n    };\n\n    private translate = (key: string) => this.props.intl.formatMessage({id: key});\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    lang: selectCurrentLanguage(state),\n    success: selectSendAddressesSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        fetchAlert: payload => dispatch(alertPush(payload)),\n        sendAddresses: payload => dispatch(sendAddresses(payload)),\n    });\n\nexport const Address = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(AddressComponent) as any; // tslint:disable-line\n"]},"metadata":{},"sourceType":"module"}