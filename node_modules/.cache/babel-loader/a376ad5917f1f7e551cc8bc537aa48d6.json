{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(emailVerificationSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { emailVerificationData, emailVerificationError } from '../actions';\nvar sessionsConfig = {\n  apiVersion: 'barong'\n};\nexport function emailVerificationSaga(action) {\n  return _regeneratorRuntime.wrap(function emailVerificationSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig), '/identity/users/email/generate_code', action.payload);\n\n        case 3:\n          _context.next = 5;\n          return put(emailVerificationData());\n\n        case 5:\n          _context.next = 7;\n          return put(alertPush({\n            message: ['success.message.sent'],\n            type: 'success'\n          }));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: emailVerificationError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/emailVerification/sagas/emailVerificationSaga.ts"],"names":["emailVerificationSaga","call","put","alertPush","sendError","API","emailVerificationData","emailVerificationError","sessionsConfig","apiVersion","action","post","payload","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,qB;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAAsF,YAAtF;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUT,qBAAV,CAAgCU,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMT,IAAI,CAACI,GAAG,CAACM,IAAJ,CAASH,cAAT,CAAD,EAA2B,qCAA3B,EAAkEE,MAAM,CAACE,OAAzE,CAAV;;AAFD;AAAA;AAGC,iBAAMV,GAAG,CAACI,qBAAqB,EAAtB,CAAT;;AAHD;AAAA;AAIC,iBAAMJ,GAAG,CAACC,SAAS,CAAC;AAACU,YAAAA,OAAO,EAAE,CAAC,sBAAD,CAAV;AAAoCC,YAAAA,IAAI,EAAE;AAA1C,WAAD,CAAV,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMZ,GAAG,CAACE,SAAS,CAAC;AAChBW,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEX;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { emailVerificationData, emailVerificationError, EmailVerificationFetch } from '../actions';\n\nconst sessionsConfig: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* emailVerificationSaga(action: EmailVerificationFetch) {\n    try {\n        yield call(API.post(sessionsConfig), '/identity/users/email/generate_code', action.payload);\n        yield put(emailVerificationData());\n        yield put(alertPush({message: ['success.message.sent'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: emailVerificationError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}