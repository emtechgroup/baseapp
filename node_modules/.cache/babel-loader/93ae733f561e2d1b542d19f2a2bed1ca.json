{"ast":null,"code":"import _toConsumableArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { sortAsks, sortBids } from './sortByPrice';\nexport var handleIncrementalUpdate = function handleIncrementalUpdate(depthOld, newLevel, type) {\n  if (newLevel.length !== 2) {\n    return depthOld;\n  }\n\n  var index = depthOld.findIndex(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        price = _ref2[0];\n\n    return +price === +newLevel[0];\n  });\n\n  if (index === -1 && +newLevel[1]) {\n    var data = [].concat(_toConsumableArray(depthOld), [newLevel]);\n\n    if (type === 'asks') {\n      return sortAsks(data);\n    }\n\n    return sortBids(data);\n  }\n\n  var result = _toConsumableArray(depthOld);\n\n  if (Number(newLevel[1]) !== 0) {\n    result[index] = newLevel;\n  } else {\n    result.splice(index, 1);\n  }\n\n  return result;\n};\nexport var handleIncrementalUpdateArray = function handleIncrementalUpdateArray(depthOld, newLevels, type) {\n  var prices = {}; // tslint:disable-next-line:prefer-for-of\n\n  for (var i = 0; i < newLevels.length; i += 1) {\n    prices[newLevels[i][0]] = newLevels[i][1];\n  }\n\n  var rest = depthOld.filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        price = _ref4[0];\n\n    return !prices[price];\n  });\n  var newData = newLevels.filter(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        _ = _ref6[0],\n        amount = _ref6[1];\n\n    return Number(amount) !== 0;\n  });\n  var result = [].concat(_toConsumableArray(rest), _toConsumableArray(newData));\n\n  if (type === 'asks') {\n    return sortAsks(result);\n  }\n\n  return sortBids(result);\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/helpers/handleIncrementalUpdate.ts"],"names":["sortAsks","sortBids","handleIncrementalUpdate","depthOld","newLevel","type","length","index","findIndex","price","data","result","Number","splice","handleIncrementalUpdateArray","newLevels","prices","i","rest","filter","newData","_","amount"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,eAAnC;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,QAAD,EAAuBC,QAAvB,EAA2CC,IAA3C,EAAwE;AAC3G,MAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACvB,WAAOH,QAAP;AACH;;AAED,MAAMI,KAAK,GAAGJ,QAAQ,CAACK,SAAT,CAAmB;AAAA;AAAA,QAAEC,KAAF;;AAAA,WAAa,CAACA,KAAD,KAAW,CAACL,QAAQ,CAAC,CAAD,CAAjC;AAAA,GAAnB,CAAd;;AAEA,MAAIG,KAAK,KAAK,CAAC,CAAX,IAAgB,CAACH,QAAQ,CAAC,CAAD,CAA7B,EAAkC;AAC9B,QAAMM,IAAI,gCAAOP,QAAP,IAAiBC,QAAjB,EAAV;;AACA,QAAIC,IAAI,KAAK,MAAb,EAAqB;AACjB,aAAOL,QAAQ,CAACU,IAAD,CAAf;AACH;;AAED,WAAOT,QAAQ,CAACS,IAAD,CAAf;AACH;;AAED,MAAMC,MAAM,sBAAOR,QAAP,CAAZ;;AACA,MAAIS,MAAM,CAACR,QAAQ,CAAC,CAAD,CAAT,CAAN,KAAwB,CAA5B,EAA+B;AAC3BO,IAAAA,MAAM,CAACJ,KAAD,CAAN,GAAgBH,QAAhB;AACH,GAFD,MAEO;AACHO,IAAAA,MAAM,CAACE,MAAP,CAAcN,KAAd,EAAqB,CAArB;AACH;;AAED,SAAOI,MAAP;AACH,CAxBM;AA0BP,OAAO,IAAMG,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACX,QAAD,EAAuBY,SAAvB,EAA8CV,IAA9C,EAA2E;AACnH,MAAMW,MAAM,GAAG,EAAf,CADmH,CAGnH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACT,MAA9B,EAAsCW,CAAC,IAAI,CAA3C,EAA8C;AAC1CD,IAAAA,MAAM,CAACD,SAAS,CAACE,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,GAA0BF,SAAS,CAACE,CAAD,CAAT,CAAa,CAAb,CAA1B;AACH;;AAED,MAAMC,IAAI,GAAGf,QAAQ,CAACgB,MAAT,CAAgB;AAAA;AAAA,QAAEV,KAAF;;AAAA,WAAa,CAACO,MAAM,CAACP,KAAD,CAApB;AAAA,GAAhB,CAAb;AACA,MAAMW,OAAO,GAAGL,SAAS,CAACI,MAAV,CAAiB;AAAA;AAAA,QAAEE,CAAF;AAAA,QAAKC,MAAL;;AAAA,WAAiBV,MAAM,CAACU,MAAD,CAAN,KAAmB,CAApC;AAAA,GAAjB,CAAhB;AACA,MAAMX,MAAM,gCAAOO,IAAP,sBAAgBE,OAAhB,EAAZ;;AAEA,MAAIf,IAAI,KAAK,MAAb,EAAqB;AACjB,WAAOL,QAAQ,CAACW,MAAD,CAAf;AACH;;AAED,SAAOV,QAAQ,CAACU,MAAD,CAAf;AACH,CAjBM","sourcesContent":["import { sortAsks, sortBids } from './sortByPrice';\n\nexport const handleIncrementalUpdate = (depthOld: string[][], newLevel: string[], type: string): string[][] => {\n    if (newLevel.length !== 2) {\n        return depthOld;\n    }\n\n    const index = depthOld.findIndex(([price]) => +price === +newLevel[0]);\n\n    if (index === -1 && +newLevel[1]) {\n        const data = [...depthOld, newLevel];\n        if (type === 'asks') {\n            return sortAsks(data);\n        }\n\n        return sortBids(data);\n    }\n\n    const result = [...depthOld];\n    if (Number(newLevel[1]) !== 0) {\n        result[index] = newLevel;\n    } else {\n        result.splice(index, 1);\n    }\n\n    return result;\n};\n\nexport const handleIncrementalUpdateArray = (depthOld: string[][], newLevels: string[][], type: string): string[][] => {\n    const prices = {};\n\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < newLevels.length; i += 1) {\n        prices[newLevels[i][0]] = newLevels[i][1];\n    }\n\n    const rest = depthOld.filter(([price]) => !prices[price]);\n    const newData = newLevels.filter(([_, amount]) => Number(amount) !== 0);\n    const result = [...rest, ...newData];\n\n    if (type === 'asks') {\n        return sortAsks(result);\n    }\n\n    return sortBids(result);\n};\n"]},"metadata":{},"sourceType":"module"}