{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootMarketsSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(marketsFetchSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(tickersSaga);\n\nimport { call, put, takeLeading } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getOrderAPI } from '../../../../helpers';\nimport { marketsData, marketsError, marketsTickersData, marketsTickersError, setCurrentMarketIfUnset } from '../actions';\nimport { MARKETS_FETCH, MARKETS_TICKERS_FETCH } from '../constants';\nvar marketsRequestOptions = {\n  apiVersion: getOrderAPI()\n};\nvar tickersOptions = {\n  apiVersion: 'peatio'\n};\nexport function rootMarketsSaga() {\n  return _regeneratorRuntime.wrap(function rootMarketsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLeading(MARKETS_FETCH, marketsFetchSaga);\n\n        case 2:\n          _context.next = 4;\n          return takeLeading(MARKETS_TICKERS_FETCH, tickersSaga);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function marketsFetchSaga(action) {\n  var markets;\n  return _regeneratorRuntime.wrap(function marketsFetchSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(API.get(marketsRequestOptions), '/public/markets');\n\n        case 3:\n          markets = _context2.sent;\n          _context2.next = 6;\n          return put(marketsData(markets));\n\n        case 6:\n          _context2.next = 8;\n          return put(setCurrentMarketIfUnset(markets[0]));\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put(sendError({\n            error: _context2.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: marketsError\n            }\n          }));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\nexport function tickersSaga(action) {\n  var tickers, pairs, convertedTickers;\n  return _regeneratorRuntime.wrap(function tickersSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(API.get(tickersOptions), \"/public/markets/tickers\");\n\n        case 3:\n          tickers = _context3.sent;\n\n          if (!tickers) {\n            _context3.next = 9;\n            break;\n          }\n\n          pairs = Object.keys(tickers);\n          convertedTickers = pairs.reduce(function (result, pair) {\n            result[pair] = tickers[pair].ticker;\n            return result;\n          }, {});\n          _context3.next = 9;\n          return put(marketsTickersData(convertedTickers));\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 15;\n          return put(sendError({\n            error: _context3.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: marketsTickersError\n            }\n          }));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/markets/sagas/marketsFetchSaga.ts"],"names":["rootMarketsSaga","marketsFetchSaga","tickersSaga","call","put","takeLeading","sendError","API","getOrderAPI","marketsData","marketsError","marketsTickersData","marketsTickersError","setCurrentMarketIfUnset","MARKETS_FETCH","MARKETS_TICKERS_FETCH","marketsRequestOptions","apiVersion","tickersOptions","action","get","markets","error","processingType","extraOptions","actionError","tickers","pairs","Object","keys","convertedTickers","reduce","result","pair","ticker"],"mappings":";;oDAuBiBA,e;qDAKAC,gB;qDAgBAC,W;;AA5CjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,WAApB,QAAuC,oBAAvC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAIIC,kBAJJ,EAKIC,mBALJ,EAOIC,uBAPJ,QAQO,YARP;AASA,SAASC,aAAT,EAAwBC,qBAAxB,QAAqD,cAArD;AAEA,IAAMC,qBAAqC,GAAG;AAC1CC,EAAAA,UAAU,EAAET,WAAW;AADmB,CAA9C;AAIA,IAAMU,cAA8B,GAAG;AACnCD,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUjB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMK,WAAW,CAACS,aAAD,EAAgBb,gBAAhB,CAAjB;;AADG;AAAA;AAEH,iBAAMI,WAAW,CAACU,qBAAD,EAAwBb,WAAxB,CAAjB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUD,gBAAV,CAA2BkB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMhB,IAAI,CAACI,GAAG,CAACa,GAAJ,CAAQJ,qBAAR,CAAD,EAAiC,iBAAjC,CAAV;;AAFjB;AAEOK,UAAAA,OAFP;AAAA;AAGC,iBAAMjB,GAAG,CAACK,WAAW,CAACY,OAAD,CAAZ,CAAT;;AAHD;AAAA;AAIC,iBAAMjB,GAAG,CAACS,uBAAuB,CAACQ,OAAO,CAAC,CAAD,CAAR,CAAxB,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMjB,GAAG,CAACE,SAAS,CAAC;AAChBgB,YAAAA,KAAK,cADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEf;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAUR,WAAV,CAAsBiB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMhB,IAAI,CAACI,GAAG,CAACa,GAAJ,CAAQF,cAAR,CAAD,4BAAV;;AAFjB;AAEOQ,UAAAA,OAFP;;AAAA,eAIKA,OAJL;AAAA;AAAA;AAAA;;AAKWC,UAAAA,KALX,GAKmBC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CALnB;AAOWI,UAAAA,gBAPX,GAO8BH,KAAK,CAACI,MAAN,CAAa,UAACC,MAAD,EAASC,IAAT,EAAkB;AACpDD,YAAAA,MAAM,CAACC,IAAD,CAAN,GAAeP,OAAO,CAACO,IAAD,CAAP,CAAcC,MAA7B;AAEA,mBAAOF,MAAP;AACH,WAJwB,EAItB,EAJsB,CAP9B;AAAA;AAYK,iBAAM5B,GAAG,CAACO,kBAAkB,CAACmB,gBAAD,CAAnB,CAAT;;AAZL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeC,iBAAM1B,GAAG,CAACE,SAAS,CAAC;AAChBgB,YAAAA,KAAK,cADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEb;AADH;AAHE,WAAD,CAAV,CAAT;;AAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeLeading } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getOrderAPI } from '../../../../helpers';\nimport {\n    marketsData,\n    marketsError,\n    MarketsFetch,\n    marketsTickersData,\n    marketsTickersError,\n    MarketsTickersFetch,\n    setCurrentMarketIfUnset,\n} from '../actions';\nimport { MARKETS_FETCH, MARKETS_TICKERS_FETCH } from '../constants';\n\nconst marketsRequestOptions: RequestOptions = {\n    apiVersion: getOrderAPI(),\n};\n\nconst tickersOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* rootMarketsSaga() {\n    yield takeLeading(MARKETS_FETCH, marketsFetchSaga);\n    yield takeLeading(MARKETS_TICKERS_FETCH, tickersSaga);\n}\n\nexport function* marketsFetchSaga(action: MarketsFetch) {\n    try {\n        const markets = yield call(API.get(marketsRequestOptions), '/public/markets');\n        yield put(marketsData(markets));\n        yield put(setCurrentMarketIfUnset(markets[0]));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: marketsError,\n            },\n        }));\n    }\n}\n\nexport function* tickersSaga(action: MarketsTickersFetch) {\n    try {\n        const tickers = yield call(API.get(tickersOptions), `/public/markets/tickers`);\n\n        if (tickers) {\n            const pairs = Object.keys(tickers);\n\n            const convertedTickers = pairs.reduce((result, pair) => {\n                result[pair] = tickers[pair].ticker;\n\n                return result;\n            }, {});\n            yield put(marketsTickersData(convertedTickers));\n        }\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: marketsTickersError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}