{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/TradingChart/index.tsx\";\n// tslint:disable\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { widget } from '../../charting_library/charting_library.min';\nimport { stdTimezoneOffset } from '../../helpers';\nimport { klineUpdatePeriod as _klineUpdatePeriod, klineUpdateTimeRange as _klineUpdateTimeRange, selectChartRebuildState, selectCurrentColorTheme, selectCurrentLanguage, selectCurrentMarket, selectKline, selectMarkets, selectMarketTickers, selectMobileDeviceState } from '../../modules';\nimport { rangerSubscribeKlineMarket, rangerUnsubscribeKlineMarket } from '../../modules/public/ranger';\nimport { periodStringToMinutes } from '../../modules/public/ranger/helpers';\nimport { dataFeedObject, print } from './api';\nimport { widgetOptions, widgetParams } from './config';\nimport { getTradingChartTimezone } from './timezones';\nexport var TradingChartComponent = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(TradingChartComponent, _React$PureComponent);\n\n  var _super = _createSuper(TradingChartComponent);\n\n  function TradingChartComponent() {\n    var _this;\n\n    _classCallCheck(this, TradingChartComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.currentKlineSubscription = {};\n    _this.tvWidget = null;\n    _this.datafeed = dataFeedObject(_assertThisInitialized(_this), _this.props.markets);\n\n    _this.setChart = function (markets, currentMarket, colorTheme) {\n      var _this$props = _this.props,\n          kline = _this$props.kline,\n          lang = _this$props.lang,\n          isMobileDevice = _this$props.isMobileDevice;\n      _this.datafeed = dataFeedObject(_assertThisInitialized(_this), markets);\n      var currentTimeOffset = new Date().getTimezoneOffset();\n      var clockPeriod = currentTimeOffset === stdTimezoneOffset(new Date()) ? 'STD' : 'DST';\n\n      if (_this.props.kline.period) {\n        widgetParams.interval = String(periodStringToMinutes(_this.props.kline.period));\n      }\n\n      var disabledFeatures = {\n        disabled_features: isMobileDevice ? ['border_around_the_chart', 'chart_property_page_background', 'chart_property_page_scales', 'chart_property_page_style', 'chart_property_page_timezone_sessions', 'chart_property_page_trading', 'compare_symbol', 'control_bar', 'countdown', 'create_volume_indicator_by_default', 'display_market_status', 'edit_buttons_in_legend', 'go_to_date', 'header_chart_type', 'header_compare', 'header_indicators', 'header_saveload', 'header_screenshot', 'header_symbol_search', 'header_undo_redo', 'header_widget_dom_node', 'hide_last_na_study_output', 'hide_left_toolbar_by_default', 'left_toolbar', 'legend_context_menu', 'main_series_scale_menu', 'pane_context_menu', 'show_chart_property_page', 'study_dialog_search_control', 'symbol_info', 'timeframes_toolbar', 'timezone_menu', 'volume_force_overlay'] : ['header_symbol_search', 'use_localstorage_for_settings']\n      };\n      var defaultWidgetOptions = {\n        symbol: currentMarket.id,\n        datafeed: _this.datafeed,\n        interval: widgetParams.interval,\n        container_id: widgetParams.containerId,\n        locale: _this.languageIncluded(lang) ? lang : 'en',\n        timezone: getTradingChartTimezone(currentTimeOffset, clockPeriod)\n      };\n      _this.tvWidget = new widget(_objectSpread(_objectSpread(_objectSpread({}, defaultWidgetOptions), widgetOptions(colorTheme)), disabledFeatures));\n      var previousRange = {\n        from: 0,\n        to: 0\n      };\n\n      if (kline.range.from !== 0 && kline.range.to !== 0) {\n        previousRange = _this.props.kline.range;\n      }\n\n      var previousResolution = '';\n\n      if (kline.period) {\n        previousResolution = kline.period;\n      }\n\n      _this.tvWidget.onChartReady(function () {\n        _this.tvWidget.activeChart().setSymbol(currentMarket.id, function () {\n          print('Symbol set', currentMarket.id);\n        });\n\n        if (previousRange.from !== 0 && previousRange.to !== 0) {\n          _this.tvWidget.activeChart().setVisibleRange(previousRange);\n        }\n\n        if (previousResolution) {\n          _this.tvWidget.activeChart().setResolution(String(periodStringToMinutes(previousResolution)), function () {\n            print('Resolution set', previousResolution);\n          });\n        }\n      });\n    };\n\n    _this.updateChart = function (currentMarket) {\n      if (_this.tvWidget) {\n        _this.tvWidget.onChartReady(function () {\n          _this.tvWidget.activeChart().setSymbol(currentMarket.id, function () {\n            print('Symbol set', currentMarket.id);\n          });\n        });\n      }\n    };\n\n    _this.handleRebuildChart = function () {\n      var _this$props2 = _this.props,\n          colorTheme = _this$props2.colorTheme,\n          currentMarket = _this$props2.currentMarket,\n          markets = _this$props2.markets;\n\n      if (_this.tvWidget && currentMarket) {\n        try {\n          _this.tvWidget.remove();\n        } catch (error) {\n          window.console.log(\"TradingChart unmount failed (Rebuild chart): \".concat(error));\n        }\n\n        _this.setChart(markets, currentMarket, colorTheme);\n      }\n    };\n\n    _this.languageIncluded = function (lang) {\n      return ['ar', 'zh', 'cs', 'da_DK', 'nl_NL', 'en', 'et_EE', 'fr', 'de', 'el', 'he_IL', 'hu_HU', 'id_ID', 'it', 'ja', 'ko', 'fa', 'pl', 'pt', 'ro', 'ru', 'sk_SK', 'es', 'sv', 'th', 'tr', 'vi'].includes(lang);\n    };\n\n    return _this;\n  }\n\n  _createClass(TradingChartComponent, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.currentMarket && next.colorTheme && next.colorTheme !== this.props.colorTheme) {\n        this.setChart(next.markets, next.currentMarket, next.colorTheme);\n      }\n\n      if (next.currentMarket && (!this.props.currentMarket || next.currentMarket.id !== this.props.currentMarket.id)) {\n        if (this.props.currentMarket && this.props.currentMarket.id && this.tvWidget) {\n          this.updateChart(next.currentMarket);\n        } else {\n          this.setChart(next.markets, next.currentMarket, next.colorTheme);\n        }\n      }\n\n      if (next.kline && next.kline !== this.props.kline) {\n        this.datafeed.onRealtimeCallback(next.kline);\n      }\n\n      if (next.chartRebuild !== this.props.chartRebuild) {\n        this.handleRebuildChart();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props3 = this.props,\n          colorTheme = _this$props3.colorTheme,\n          currentMarket = _this$props3.currentMarket,\n          markets = _this$props3.markets;\n\n      if (currentMarket) {\n        this.setChart(markets, currentMarket, colorTheme);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.tvWidget) {\n        try {\n          this.tvWidget.remove();\n        } catch (error) {\n          window.console.log(\"TradingChart unmount failed: \".concat(error));\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-table-header__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, this.props.currentMarket ? this.props.currentMarket.name : ''), /*#__PURE__*/React.createElement(\"div\", {\n        id: widgetParams.containerId,\n        className: \"pg-trading-chart\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TradingChartComponent;\n}(React.PureComponent);\n\nvar reduxProps = function reduxProps(state) {\n  return {\n    markets: selectMarkets(state),\n    colorTheme: selectCurrentColorTheme(state),\n    chartRebuild: selectChartRebuildState(state),\n    currentMarket: selectCurrentMarket(state),\n    tickers: selectMarketTickers(state),\n    kline: selectKline(state),\n    lang: selectCurrentLanguage(state),\n    isMobileDevice: selectMobileDeviceState(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    klineUpdateTimeRange: function klineUpdateTimeRange(payload) {\n      return dispatch(_klineUpdateTimeRange(payload));\n    },\n    subscribeKline: function subscribeKline(marketId, periodString) {\n      return dispatch(rangerSubscribeKlineMarket(marketId, periodString));\n    },\n    unSubscribeKline: function unSubscribeKline(marketId, periodString) {\n      return dispatch(rangerUnsubscribeKlineMarket(marketId, periodString));\n    },\n    klineUpdatePeriod: function klineUpdatePeriod(payload) {\n      return dispatch(_klineUpdatePeriod(payload));\n    }\n  };\n};\n\nexport var TradingChart = connect(reduxProps, mapDispatchProps)(TradingChartComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/TradingChart/index.tsx"],"names":["React","connect","widget","stdTimezoneOffset","klineUpdatePeriod","klineUpdateTimeRange","selectChartRebuildState","selectCurrentColorTheme","selectCurrentLanguage","selectCurrentMarket","selectKline","selectMarkets","selectMarketTickers","selectMobileDeviceState","rangerSubscribeKlineMarket","rangerUnsubscribeKlineMarket","periodStringToMinutes","dataFeedObject","print","widgetOptions","widgetParams","getTradingChartTimezone","TradingChartComponent","currentKlineSubscription","tvWidget","datafeed","props","markets","setChart","currentMarket","colorTheme","kline","lang","isMobileDevice","currentTimeOffset","Date","getTimezoneOffset","clockPeriod","period","interval","String","disabledFeatures","disabled_features","defaultWidgetOptions","symbol","id","container_id","containerId","locale","languageIncluded","timezone","previousRange","from","to","range","previousResolution","onChartReady","activeChart","setSymbol","setVisibleRange","setResolution","updateChart","handleRebuildChart","remove","error","window","console","log","includes","next","onRealtimeCallback","chartRebuild","name","PureComponent","reduxProps","state","tickers","mapDispatchProps","dispatch","payload","subscribeKline","marketId","periodString","unSubscribeKline","TradingChart"],"mappings":"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","sourcesContent":["// tslint:disable\nimport * as React from 'react';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport {\n    IChartingLibraryWidget,\n    LanguageCode,\n    widget,\n} from '../../charting_library/charting_library.min';\nimport { stdTimezoneOffset } from '../../helpers';\nimport {\n    KlineState,\n    klineUpdatePeriod,\n    klineUpdateTimeRange,\n    Market,\n    MarketsState,\n    RootState,\n    selectChartRebuildState,\n    selectCurrentColorTheme,\n    selectCurrentLanguage,\n    selectCurrentMarket,\n    selectKline,\n    selectMarkets,\n    selectMarketTickers,\n    selectMobileDeviceState,\n} from '../../modules';\nimport {\n    rangerSubscribeKlineMarket,\n    rangerUnsubscribeKlineMarket,\n} from '../../modules/public/ranger';\nimport { periodStringToMinutes } from '../../modules/public/ranger/helpers';\nimport {\n    CurrentKlineSubscription,\n    dataFeedObject,\n    print,\n} from './api';\nimport {\n    widgetOptions,\n    widgetParams,\n} from './config';\nimport { getTradingChartTimezone } from './timezones';\n\ninterface ReduxProps {\n    markets: Market[];\n    colorTheme: string;\n    chartRebuild: boolean;\n    currentMarket?: Market;\n    tickers: MarketsState['tickers'];\n    kline: KlineState;\n    lang: string;\n    isMobileDevice: boolean;\n}\n\ninterface DispatchProps {\n    subscribeKline: typeof rangerSubscribeKlineMarket;\n    unSubscribeKline: typeof rangerUnsubscribeKlineMarket;\n    klineUpdateTimeRange: typeof klineUpdateTimeRange;\n    klineUpdatePeriod: typeof klineUpdatePeriod;\n}\n\ntype Props = ReduxProps & DispatchProps;\n\nexport class TradingChartComponent extends React.PureComponent<Props> {\n    public currentKlineSubscription: CurrentKlineSubscription = {};\n    public tvWidget: IChartingLibraryWidget | null = null;\n\n    private datafeed = dataFeedObject(this, this.props.markets);\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.currentMarket && next.colorTheme && next.colorTheme !== this.props.colorTheme) {\n            this.setChart(next.markets, next.currentMarket, next.colorTheme);\n        }\n\n        if (next.currentMarket && (!this.props.currentMarket || next.currentMarket.id !== this.props.currentMarket.id)) {\n            if (this.props.currentMarket && (this.props.currentMarket.id && this.tvWidget)) {\n                this.updateChart(next.currentMarket);\n            } else {\n                this.setChart(next.markets, next.currentMarket, next.colorTheme);\n            }\n        }\n\n        if (next.kline && next.kline !== this.props.kline) {\n            this.datafeed.onRealtimeCallback(next.kline);\n        }\n\n        if (next.chartRebuild !== this.props.chartRebuild) {\n            this.handleRebuildChart();\n        }\n    }\n\n    public componentDidMount() {\n        const {\n            colorTheme,\n            currentMarket,\n            markets,\n        } = this.props;\n\n        if (currentMarket) {\n            this.setChart(markets, currentMarket, colorTheme);\n        }\n    }\n\n    public componentWillUnmount() {\n        if (this.tvWidget) {\n            try {\n                this.tvWidget.remove();\n            } catch (error) {\n                window.console.log(`TradingChart unmount failed: ${error}`);\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div className=\"cr-table-header__content\">\n                    {this.props.currentMarket ? this.props.currentMarket.name : ''}\n                </div>\n                <div id={widgetParams.containerId} className=\"pg-trading-chart\" />\n            </React.Fragment>\n        );\n    }\n\n    private setChart = (markets: Market[], currentMarket: Market, colorTheme: string) => {\n        const { kline, lang, isMobileDevice } = this.props;\n        this.datafeed = dataFeedObject(this, markets);\n        const currentTimeOffset = new Date().getTimezoneOffset();\n        const clockPeriod = currentTimeOffset === stdTimezoneOffset(new Date()) ? 'STD' : 'DST';\n\n        if (this.props.kline.period) {\n            widgetParams.interval = String(periodStringToMinutes(this.props.kline.period));\n        }\n\n        const disabledFeatures = {\n            disabled_features: isMobileDevice ?\n            [\n                'border_around_the_chart',\n                'chart_property_page_background',\n                'chart_property_page_scales',\n                'chart_property_page_style',\n                'chart_property_page_timezone_sessions',\n                'chart_property_page_trading',\n                'compare_symbol',\n                'control_bar',\n                'countdown',\n                'create_volume_indicator_by_default',\n                'display_market_status',\n                'edit_buttons_in_legend',\n                'go_to_date',\n                'header_chart_type',\n                'header_compare',\n                'header_indicators',\n                'header_saveload',\n                'header_screenshot',\n                'header_symbol_search',\n                'header_undo_redo',\n                'header_widget_dom_node',\n                'hide_last_na_study_output',\n                'hide_left_toolbar_by_default',\n                'left_toolbar',\n                'legend_context_menu',\n                'main_series_scale_menu',\n                'pane_context_menu',\n                'show_chart_property_page',\n                'study_dialog_search_control',\n                'symbol_info',\n                'timeframes_toolbar',\n                'timezone_menu',\n                'volume_force_overlay',\n            ] : [\n                'header_symbol_search',\n                'use_localstorage_for_settings',\n            ]\n        };\n\n        const defaultWidgetOptions = {\n            symbol: currentMarket.id,\n            datafeed: this.datafeed,\n            interval: widgetParams.interval,\n            container_id: widgetParams.containerId,\n            locale: this.languageIncluded(lang) ? lang as LanguageCode : 'en' as LanguageCode,\n            timezone: getTradingChartTimezone(currentTimeOffset, clockPeriod),\n        };\n\n        this.tvWidget = new widget({...defaultWidgetOptions, ...widgetOptions(colorTheme), ...disabledFeatures});\n\n        let previousRange = { from: 0, to: 0 };\n        if (kline.range.from !== 0 && kline.range.to !== 0) {\n            previousRange = this.props.kline.range;\n        }\n\n        let previousResolution = '';\n        if (kline.period) {\n            previousResolution = kline.period;\n        }\n\n        this.tvWidget.onChartReady(() => {\n            this.tvWidget!.activeChart().setSymbol(currentMarket.id, () => {\n                print('Symbol set', currentMarket.id);\n            });\n\n            if (previousRange.from !== 0 && previousRange.to !== 0) {\n                this.tvWidget!.activeChart().setVisibleRange(previousRange);\n            }\n\n            if (previousResolution) {\n                this.tvWidget!.activeChart().setResolution(String(periodStringToMinutes(previousResolution)), () => {\n                    print('Resolution set', previousResolution);\n                });\n            }\n        });\n    };\n\n    private updateChart = (currentMarket: Market) => {\n        if (this.tvWidget) {\n            this.tvWidget.onChartReady(() => {\n                this.tvWidget!.activeChart().setSymbol(currentMarket.id, () => {\n                    print('Symbol set', currentMarket.id);\n                });\n            });\n        }\n    };\n\n    private handleRebuildChart = () => {\n        const {\n            colorTheme,\n            currentMarket,\n            markets,\n        } = this.props;\n\n        if (this.tvWidget && currentMarket) {\n            try {\n                this.tvWidget.remove();\n            } catch (error) {\n                window.console.log(`TradingChart unmount failed (Rebuild chart): ${error}`);\n            }\n\n            this.setChart(markets, currentMarket, colorTheme);\n        }\n    };\n\n    private languageIncluded = (lang: string) => {\n        return ['ar', 'zh', 'cs', 'da_DK', 'nl_NL', 'en', 'et_EE', 'fr', 'de', 'el', 'he_IL', 'hu_HU', 'id_ID', 'it', 'ja', 'ko', 'fa', 'pl', 'pt', 'ro', 'ru', 'sk_SK', 'es', 'sv', 'th', 'tr', 'vi'].includes(lang)\n    };\n}\n\nconst reduxProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    markets: selectMarkets(state),\n    colorTheme: selectCurrentColorTheme(state),\n    chartRebuild: selectChartRebuildState(state),\n    currentMarket: selectCurrentMarket(state),\n    tickers: selectMarketTickers(state),\n    kline: selectKline(state),\n    lang: selectCurrentLanguage(state),\n    isMobileDevice: selectMobileDeviceState(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    klineUpdateTimeRange: payload => dispatch(klineUpdateTimeRange(payload)),\n    subscribeKline: (marketId: string, periodString: string) => dispatch(rangerSubscribeKlineMarket(marketId, periodString)),\n    unSubscribeKline: (marketId: string, periodString: string) => dispatch(rangerUnsubscribeKlineMarket(marketId, periodString)),\n    klineUpdatePeriod: payload => dispatch(klineUpdatePeriod(payload)),\n});\n\nexport const TradingChart = connect<ReduxProps, DispatchProps, {}, RootState>(reduxProps, mapDispatchProps)(TradingChartComponent);\n"]},"metadata":{},"sourceType":"module"}