{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(userOpenOrdersFetchSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { userOpenOrdersData, userOpenOrdersError } from '../actions';\nvar ordersOptions = {\n  apiVersion: 'peatio'\n};\nexport function userOpenOrdersFetchSaga(action) {\n  var market, list;\n  return _regeneratorRuntime.wrap(function userOpenOrdersFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          market = action.payload.market;\n          _context.next = 4;\n          return call(API.get(ordersOptions), \"/market/orders?market=\".concat(market.id, \"&state=wait\"));\n\n        case 4:\n          list = _context.sent;\n          _context.next = 7;\n          return put(userOpenOrdersData(list));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: userOpenOrdersError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/openOrders/sagas/userOpenOrdersFetchSaga.ts"],"names":["userOpenOrdersFetchSaga","call","put","sendError","API","userOpenOrdersData","userOpenOrdersError","ordersOptions","apiVersion","action","market","payload","get","id","list","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,uB;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,QAA6E,YAA7E;AAEA,IAAMC,aAA6B,GAAG;AAClCC,EAAAA,UAAU,EAAE;AADsB,CAAtC;AAIA,OAAO,SAAUR,uBAAV,CAAkCS,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAESC,UAAAA,MAFT,GAEoBD,MAAM,CAACE,OAF3B,CAESD,MAFT;AAAA;AAGc,iBAAMT,IAAI,CAACG,GAAG,CAACQ,GAAJ,CAAQL,aAAR,CAAD,kCAAkDG,MAAM,CAACG,EAAzD,iBAAV;;AAHd;AAGOC,UAAAA,IAHP;AAAA;AAKC,iBAAMZ,GAAG,CAACG,kBAAkB,CAACS,IAAD,CAAnB,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOC,iBAAMZ,GAAG,CAACC,SAAS,CAAC;AAChBY,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEZ;AADH;AAHE,WAAD,CAAV,CAAT;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { userOpenOrdersData, userOpenOrdersError, UserOpenOrdersFetch } from '../actions';\n\nconst ordersOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* userOpenOrdersFetchSaga(action: UserOpenOrdersFetch) {\n    try {\n        const { market } = action.payload;\n        const list = yield call(API.get(ordersOptions), `/market/orders?market=${market.id}&state=wait`);\n\n        yield put(userOpenOrdersData(list));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: userOpenOrdersError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}