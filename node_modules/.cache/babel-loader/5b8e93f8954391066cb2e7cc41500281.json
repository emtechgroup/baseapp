{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/Customization/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PaletteIcon } from '../../assets/images/customization/PaletteIcon';\nimport { CustomizationFonts, CustomizationImages, CustomizationSpacing, CustomizationThemes, TabPanel } from '../../components';\nimport { customizationUpdate as _customizationUpdate, customizationUpdateCurrent as _customizationUpdateCurrent, selectCustomizationCurrent, selectCustomizationData, selectUserLoggedIn, toggleChartRebuild as _toggleChartRebuild } from '../../modules';\nimport { AVAILABLE_COLORS_TITLES } from '../../themes';\n\nvar CustomizationContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomizationContainer, _React$Component);\n\n  var _super = _createSuper(CustomizationContainer);\n\n  function CustomizationContainer() {\n    var _this;\n\n    _classCallCheck(this, CustomizationContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      currentTabIndex: 0,\n      isOpen: true,\n      resetToDefault: false\n    };\n\n    _this.renderTabs = function () {\n      var _this$props = _this.props,\n          currentCustomization = _this$props.currentCustomization,\n          customization = _this$props.customization;\n      var _this$state = _this.state,\n          currentTabIndex = _this$state.currentTabIndex,\n          resetToDefault = _this$state.resetToDefault;\n      return [{\n        content: currentTabIndex === 0 ? /*#__PURE__*/React.createElement(CustomizationThemes, {\n          translate: _this.translate,\n          customization: customization,\n          resetToDefault: resetToDefault,\n          handleTriggerChartRebuild: _this.handleTriggerChartRebuild,\n          handleSetCurrentCustomization: _this.handleSetCurrentCustomization,\n          currentCustomization: currentCustomization,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }\n        }) : null,\n        label: _this.translate('page.body.customization.tabs.themes')\n      }, {\n        content: currentTabIndex === 1 ? /*#__PURE__*/React.createElement(CustomizationFonts, {\n          translate: _this.translate,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 50\n          }\n        }) : null,\n        label: _this.translate('page.body.customization.tabs.fonts')\n      }, {\n        content: currentTabIndex === 2 ? /*#__PURE__*/React.createElement(CustomizationSpacing, {\n          translate: _this.translate,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 50\n          }\n        }) : null,\n        label: _this.translate('page.body.customization.tabs.spacing')\n      }, {\n        content: currentTabIndex === 3 ? /*#__PURE__*/React.createElement(CustomizationImages, {\n          translate: _this.translate,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 50\n          }\n        }) : null,\n        label: _this.translate('page.body.customization.tabs.images')\n      }];\n    };\n\n    _this.handleClickResetButton = function () {\n      _this.setState(function (prevState) {\n        return {\n          resetToDefault: !prevState.resetToDefault\n        };\n      });\n    };\n\n    _this.handleClickSaveButton = function () {\n      var currentCustomization = _this.props.currentCustomization;\n      var bodyStyles = window.getComputedStyle(document.body);\n      var currentColors = [];\n\n      if (bodyStyles) {\n        AVAILABLE_COLORS_TITLES.reduce(function (result, item) {\n          var itemColor = bodyStyles.getPropertyValue(item.key);\n\n          if (itemColor) {\n            currentColors.push({\n              key: item.key,\n              value: itemColor\n            });\n          }\n\n          return result;\n        }, {});\n      }\n\n      var payload = _objectSpread(_objectSpread({}, currentCustomization), {}, {\n        theme_colors: [].concat(currentColors)\n      });\n\n      _this.props.customizationUpdate({\n        settings: JSON.stringify(payload)\n      });\n    };\n\n    _this.handleChangeTab = function (index) {\n      _this.setState({\n        currentTabIndex: index\n      });\n    };\n\n    _this.handleCheckRoute = function () {\n      if (window.location.hash && window.location.hash.substring(1) === 'settings') {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleSetCurrentCustomization = function (key, value) {\n      var currentCustomization = _this.props.currentCustomization;\n\n      var updatedCustomization = _objectSpread(_objectSpread({}, currentCustomization), {}, {\n        [key]: value\n      }); // @ts-ignore\n\n\n      _this.props.customizationUpdateCurrent(updatedCustomization);\n    };\n\n    _this.handleToggleIsOpen = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen\n        };\n      });\n    };\n\n    _this.handleTriggerChartRebuild = function () {\n      _this.props.toggleChartRebuild();\n    };\n\n    _this.translate = function (key) {\n      return _this.props.intl.formatMessage({\n        id: key\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomizationContainer, [{\n    key: \"renderActionButtons\",\n    value: function renderActionButtons() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization__action-buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pg-customization__action-buttons__button\",\n        onClick: this.handleClickResetButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, this.translate('page.body.customization.actionButtons.reset')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pg-customization__action-buttons__button\",\n        onClick: this.handleClickSaveButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, this.translate('page.body.customization.actionButtons.save')));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var userLoggedIn = this.props.userLoggedIn;\n      var _this$state2 = this.state,\n          currentTabIndex = _this$state2.currentTabIndex,\n          isOpen = _this$state2.isOpen;\n\n      if (!userLoggedIn || !this.handleCheckRoute()) {\n        return null;\n      }\n\n      var customizationClassName = classnames('pg-customization', {\n        'pg-customization--hidden': !isOpen\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: customizationClassName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization__toggler\",\n        onClick: function onClick(e) {\n          return _this2.handleToggleIsOpen();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(PaletteIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(TabPanel, {\n        panels: this.renderTabs(),\n        onTabChange: this.handleChangeTab,\n        currentTabIndex: currentTabIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }), this.renderActionButtons());\n    }\n  }]);\n\n  return CustomizationContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentCustomization: selectCustomizationCurrent(state),\n    customization: selectCustomizationData(state),\n    userLoggedIn: selectUserLoggedIn(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    customizationUpdate: function customizationUpdate(payload) {\n      return dispatch(_customizationUpdate(payload));\n    },\n    customizationUpdateCurrent: function customizationUpdateCurrent(payload) {\n      return dispatch(_customizationUpdateCurrent(payload));\n    },\n    toggleChartRebuild: function toggleChartRebuild() {\n      return dispatch(_toggleChartRebuild());\n    }\n  };\n}; // tslint:disable no-any\n\n\nexport var Customization = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(CustomizationContainer)));","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/Customization/index.tsx"],"names":["classnames","React","injectIntl","connect","withRouter","PaletteIcon","CustomizationFonts","CustomizationImages","CustomizationSpacing","CustomizationThemes","TabPanel","customizationUpdate","customizationUpdateCurrent","selectCustomizationCurrent","selectCustomizationData","selectUserLoggedIn","toggleChartRebuild","AVAILABLE_COLORS_TITLES","CustomizationContainer","state","currentTabIndex","isOpen","resetToDefault","renderTabs","props","currentCustomization","customization","content","translate","handleTriggerChartRebuild","handleSetCurrentCustomization","label","handleClickResetButton","setState","prevState","handleClickSaveButton","bodyStyles","window","getComputedStyle","document","body","currentColors","reduce","result","item","itemColor","getPropertyValue","key","push","value","payload","theme_colors","settings","JSON","stringify","handleChangeTab","index","handleCheckRoute","location","hash","substring","updatedCustomization","handleToggleIsOpen","intl","formatMessage","id","userLoggedIn","customizationClassName","e","renderActionButtons","Component","mapStateToProps","mapDispatchProps","dispatch","Customization"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { IntlProps } from '../../';\nimport { PaletteIcon } from '../../assets/images/customization/PaletteIcon';\nimport {\n    CustomizationFonts,\n    CustomizationImages,\n    CustomizationSpacing,\n    CustomizationThemes,\n    TabPanel,\n} from '../../components';\nimport {\n    CustomizationCurrentDataInterface,\n    CustomizationDataInterface,\n    customizationUpdate,\n    customizationUpdateCurrent,\n    RootState,\n    selectCustomizationCurrent,\n    selectCustomizationData,\n    selectUserLoggedIn,\n    toggleChartRebuild,\n} from '../../modules';\nimport { AVAILABLE_COLORS_TITLES, ThemeColorInterface } from '../../themes';\n\ninterface ReduxProps {\n    currentCustomization?: CustomizationCurrentDataInterface;\n    customization?: CustomizationDataInterface;\n    userLoggedIn: boolean;\n}\n\ninterface DispatchProps {\n    customizationUpdateCurrent: typeof customizationUpdateCurrent;\n    toggleChartRebuild: typeof toggleChartRebuild;\n    customizationUpdate: typeof customizationUpdate;\n}\n\ntype Props = ReduxProps & RouterProps & DispatchProps & IntlProps;\n\ninterface State {\n    currentTabIndex: number;\n    isOpen: boolean;\n    resetToDefault: boolean;\n}\n\nclass CustomizationContainer extends React.Component<Props, State> {\n    public state = {\n        currentTabIndex: 0,\n        isOpen: true,\n        resetToDefault: false,\n    };\n\n    public renderTabs = () => {\n        const { currentCustomization, customization } = this.props;\n        const { currentTabIndex, resetToDefault } = this.state;\n\n        return [\n            {\n                content: currentTabIndex === 0 ? (\n                    <CustomizationThemes\n                        translate={this.translate}\n                        customization={customization}\n                        resetToDefault={resetToDefault}\n                        handleTriggerChartRebuild={this.handleTriggerChartRebuild}\n                        handleSetCurrentCustomization={this.handleSetCurrentCustomization}\n                        currentCustomization={currentCustomization}\n                    />\n                ) : null,\n                label: this.translate('page.body.customization.tabs.themes'),\n            },\n            {\n                content: currentTabIndex === 1 ? <CustomizationFonts translate={this.translate} /> : null,\n                label: this.translate('page.body.customization.tabs.fonts'),\n            },\n            {\n                content: currentTabIndex === 2 ? <CustomizationSpacing translate={this.translate} /> : null,\n                label: this.translate('page.body.customization.tabs.spacing'),\n            },\n            {\n                content: currentTabIndex === 3 ? <CustomizationImages translate={this.translate} /> : null,\n                label: this.translate('page.body.customization.tabs.images'),\n            },\n        ];\n    };\n\n    public renderActionButtons() {\n        return (\n            <div className=\"pg-customization__action-buttons\">\n                <span className=\"pg-customization__action-buttons__button\" onClick={this.handleClickResetButton}>\n                    {this.translate('page.body.customization.actionButtons.reset')}\n                </span>\n                <span className=\"pg-customization__action-buttons__button\" onClick={this.handleClickSaveButton}>\n                    {this.translate('page.body.customization.actionButtons.save')}\n                </span>\n            </div>\n        );\n    }\n\n    public render() {\n        const { userLoggedIn } = this.props;\n        const { currentTabIndex, isOpen } = this.state;\n\n        if (!userLoggedIn || !this.handleCheckRoute()) {\n            return null;\n        }\n\n        const customizationClassName = classnames('pg-customization', {\n            'pg-customization--hidden': !isOpen,\n        });\n\n        return (\n            <div className={customizationClassName}>\n                <div className=\"pg-customization__toggler\" onClick={e => this.handleToggleIsOpen()}>\n                    <PaletteIcon />\n                </div>\n                <TabPanel\n                    panels={this.renderTabs()}\n                    onTabChange={this.handleChangeTab}\n                    currentTabIndex={currentTabIndex}\n                />\n                {this.renderActionButtons()}\n            </div>\n        );\n    }\n\n    private handleClickResetButton = () => {\n        this.setState(prevState => ({\n            resetToDefault: !prevState.resetToDefault,\n        }));\n    };\n\n    private handleClickSaveButton = () => {\n        const { currentCustomization } = this.props;\n        const bodyStyles = window.getComputedStyle(document.body);\n        const currentColors: ThemeColorInterface[] = [];\n\n        if (bodyStyles) {\n            AVAILABLE_COLORS_TITLES.reduce((result, item) => {\n               const itemColor = bodyStyles.getPropertyValue(item.key);\n\n                if (itemColor) {\n                    currentColors.push({\n                        key: item.key,\n                        value: itemColor,\n                    });\n                }\n\n                return result;\n            }, {});\n        }\n\n        const payload = {\n            ...currentCustomization,\n            theme_colors: [...currentColors],\n        };\n\n        this.props.customizationUpdate({ settings: JSON.stringify(payload) });\n    };\n\n\n    private handleChangeTab = (index: number) => {\n        this.setState({\n            currentTabIndex: index,\n        });\n    };\n\n    private handleCheckRoute = () => {\n        if (window.location.hash && window.location.hash.substring(1) === 'settings') {\n            return true;\n        }\n\n        return false;\n    };\n\n    private handleSetCurrentCustomization = (key: string, value: string | number) => {\n        const { currentCustomization } = this.props;\n        const updatedCustomization = {\n            ...currentCustomization,\n            [key]: value,\n        };\n\n        // @ts-ignore\n        this.props.customizationUpdateCurrent(updatedCustomization);\n    };\n\n    private handleToggleIsOpen = () => {\n        this.setState(prevState => ({\n            isOpen: !prevState.isOpen,\n        }));\n    };\n\n    private handleTriggerChartRebuild = () => {\n        this.props.toggleChartRebuild();\n    };\n\n    private translate = (key: string) => this.props.intl.formatMessage({id: key});\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    currentCustomization: selectCustomizationCurrent(state),\n    customization: selectCustomizationData(state),\n    userLoggedIn: selectUserLoggedIn(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        customizationUpdate: payload => dispatch(customizationUpdate(payload)),\n        customizationUpdateCurrent: payload => dispatch(customizationUpdateCurrent(payload)),\n        toggleChartRebuild: () => dispatch(toggleChartRebuild()),\n    });\n\n// tslint:disable no-any\nexport const Customization = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(CustomizationContainer) as any) as any);\n"]},"metadata":{},"sourceType":"module"}