{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/CopyableTextField/index.tsx\";\nimport '@openware/cryptofont';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { CustomInput } from '../';\nimport { copy } from '../../helpers';\n\n/**\n * Text field component with ability to copy inner text.\n */\nvar CopyableTextField = /*#__PURE__*/function (_React$Component) {\n  _inherits(CopyableTextField, _React$Component);\n\n  var _super = _createSuper(CopyableTextField);\n\n  function CopyableTextField() {\n    _classCallCheck(this, CopyableTextField);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CopyableTextField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.fieldId) {\n        throw new Error('CopyableTextField must contain `fieldId` prop');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          fieldId = _this$props.fieldId,\n          copyButtonText = _this$props.copyButtonText,\n          label = _this$props.label;\n\n      var doCopy = function doCopy() {\n        return copy(fieldId);\n      };\n\n      var cx = classnames('cr-copyable-text-field', className);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(InputGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        id: String(fieldId),\n        readOnly: true,\n        inputValue: value,\n        handleClick: doCopy,\n        type: \"text\",\n        isDisabled: disabled,\n        label: label || '',\n        defaultLabel: label || '',\n        placeholder: label || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: doCopy,\n        disabled: disabled,\n        size: \"lg\",\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, copyButtonText ? copyButtonText : 'Copy'))));\n    }\n  }]);\n\n  return CopyableTextField;\n}(React.Component);\n\nexport { CopyableTextField, copy };","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/CopyableTextField/index.tsx"],"names":["classnames","React","Button","InputGroup","CustomInput","copy","CopyableTextField","props","fieldId","Error","value","className","disabled","copyButtonText","label","doCopy","cx","String","Component"],"mappings":";;;;;AAAA,OAAO,sBAAP;AACA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,iBAAnC;AACA,SAASC,WAAT,QAA4B,KAA5B;AACA,SAASC,IAAT,QAAqB,eAArB;;AA8BA;AACA;AACA;IACMC,iB;;;;;;;;;;;;;wCACyB;AACvB,UAAI,CAAC,KAAKC,KAAL,CAAWC,OAAhB,EAAyB;AACrB,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;AACJ;;;6BAEe;AAAA,wBAQR,KAAKF,KARG;AAAA,UAERG,KAFQ,eAERA,KAFQ;AAAA,UAGRC,SAHQ,eAGRA,SAHQ;AAAA,UAIRC,QAJQ,eAIRA,QAJQ;AAAA,UAKRJ,OALQ,eAKRA,OALQ;AAAA,UAMRK,cANQ,eAMRA,cANQ;AAAA,UAORC,KAPQ,eAORA,KAPQ;;AASZ,UAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,eAAMV,IAAI,CAACG,OAAD,CAAV;AAAA,OAAf;;AACA,UAAMQ,EAAE,GAAGhB,UAAU,CAAC,wBAAD,EAA2BW,SAA3B,CAArB;AAEA,0BACI;AAAK,QAAA,SAAS,EAAEK,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD;AACI,QAAA,EAAE,EAAEC,MAAM,CAACT,OAAD,CADd;AAEI,QAAA,QAAQ,EAAE,IAFd;AAGI,QAAA,UAAU,EAAEE,KAHhB;AAII,QAAA,WAAW,EAAEK,MAJjB;AAKI,QAAA,IAAI,EAAC,MALT;AAMI,QAAA,UAAU,EAAEH,QANhB;AAOI,QAAA,KAAK,EAAEE,KAAK,IAAI,EAPpB;AAQI,QAAA,YAAY,EAAEA,KAAK,IAAI,EAR3B;AASI,QAAA,WAAW,EAAEA,KAAK,IAAI,EAT1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAYI,oBAAC,UAAD,CAAY,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAEC,MADb;AAEI,QAAA,QAAQ,EAAEH,QAFd;AAGI,QAAA,IAAI,EAAC,IAHT;AAII,QAAA,OAAO,EAAC,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMKC,cAAc,GAAGA,cAAH,GAAoB,MANvC,CADJ,CAZJ,CADJ,CADJ;AA2BH;;;;EA9C2BZ,KAAK,CAACiB,S;;AAiDtC,SACIZ,iBADJ,EAEID,IAFJ","sourcesContent":["import '@openware/cryptofont';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { CustomInput } from '../';\nimport { copy } from '../../helpers';\n\n\nexport interface CopyableTextFieldProps {\n    /**\n     * Text value that will be copied to the clipboard\n     */\n    value: string;\n    /**\n     * Additional class name for styling. By default element receives `cr-button` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * String value that makes copy field be unique\n     */\n    fieldId: string;\n    /**\n     * @default 'Copy'\n     *  Renders text of the label of copy button component\n     */\n    copyButtonText?: string;\n    /**\n     * @default 'false'\n     * If true, Button will be disabled.\n     */\n    disabled?: boolean;\n    label?: string;\n}\n\n/**\n * Text field component with ability to copy inner text.\n */\nclass CopyableTextField extends React.Component<CopyableTextFieldProps> {\n    public componentDidMount() {\n        if (!this.props.fieldId) {\n            throw new Error('CopyableTextField must contain `fieldId` prop');\n        }\n    }\n\n    public render() {\n        const {\n            value,\n            className,\n            disabled,\n            fieldId,\n            copyButtonText,\n            label,\n        } = this.props;\n        const doCopy = () => copy(fieldId);\n        const cx = classnames('cr-copyable-text-field', className);\n\n        return (\n            <div className={cx}>\n                <InputGroup>\n                    <CustomInput\n                        id={String(fieldId)}\n                        readOnly={true}\n                        inputValue={value}\n                        handleClick={doCopy}\n                        type=\"text\"\n                        isDisabled={disabled}\n                        label={label || ''}\n                        defaultLabel={label || ''}\n                        placeholder={label || ''}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            onClick={doCopy}\n                            disabled={disabled}\n                            size=\"lg\"\n                            variant=\"primary\"\n                        >\n                            {copyButtonText ? copyButtonText : 'Copy'}\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </div>\n        );\n    }\n}\n\nexport {\n    CopyableTextField,\n    copy,\n};\n"]},"metadata":{},"sourceType":"module"}