{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(apiKeysSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { apiKeys2FAModal, apiKeysData, apiKeysError } from '../actions';\nvar apiKeysOptions = {\n  apiVersion: 'barong'\n};\nexport function apiKeysSaga(action) {\n  var _action$payload, pageIndex, limit, apiKeys, nextPageExists, checkData;\n\n  return _regeneratorRuntime.wrap(function apiKeysSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, pageIndex = _action$payload.pageIndex, limit = _action$payload.limit;\n          _context.next = 4;\n          return call(API.get(apiKeysOptions), \"/resource/api_keys?page=\".concat(pageIndex + 1, \"&limit=\").concat(limit));\n\n        case 4:\n          apiKeys = _context.sent;\n          nextPageExists = false;\n\n          if (!(apiKeys.length === limit)) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 9;\n          return call(API.get(apiKeysOptions), \"/resource/api_keys?page=\".concat((pageIndex + 1) * limit + 1, \"&limit=\", 1));\n\n        case 9:\n          checkData = _context.sent;\n\n          if (checkData.length === 1) {\n            nextPageExists = true;\n          }\n\n        case 11:\n          _context.next = 13;\n          return put(apiKeysData({\n            apiKeys,\n            pageIndex,\n            nextPageExists\n          }));\n\n        case 13:\n          _context.next = 15;\n          return put(apiKeys2FAModal({\n            active: false\n          }));\n\n        case 15:\n          _context.next = 21;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 21;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: apiKeysError\n            }\n          }));\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 17]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/apiKeys/sagas/apiKeysSaga.ts"],"names":["apiKeysSaga","call","put","sendError","API","apiKeys2FAModal","apiKeysData","apiKeysError","apiKeysOptions","apiVersion","action","payload","pageIndex","limit","get","apiKeys","nextPageExists","length","checkData","active","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,W;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,YAAvC,QAAyE,YAAzE;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUT,WAAV,CAAsBU,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAE8BA,MAAM,CAACC,OAFrC,EAESC,SAFT,mBAESA,SAFT,EAEoBC,KAFpB,mBAEoBA,KAFpB;AAAA;AAGiB,iBAAMZ,IAAI,CAACG,GAAG,CAACU,GAAJ,CAAQN,cAAR,CAAD,oCAAqDI,SAAS,GAAG,CAAjE,oBAA4EC,KAA5E,EAAV;;AAHjB;AAGOE,UAAAA,OAHP;AAIKC,UAAAA,cAJL,GAIsB,KAJtB;;AAAA,gBAMKD,OAAO,CAACE,MAAR,KAAmBJ,KANxB;AAAA;AAAA;AAAA;;AAAA;AAOuB,iBAAMZ,IAAI,CAACG,GAAG,CAACU,GAAJ,CAAQN,cAAR,CAAD,oCAAqD,CAACI,SAAS,GAAG,CAAb,IAAkBC,KAAlB,GAA0B,CAA/E,aAA0F,CAA1F,EAAV;;AAPvB;AAOWK,UAAAA,SAPX;;AASK,cAAIA,SAAS,CAACD,MAAV,KAAqB,CAAzB,EAA4B;AACxBD,YAAAA,cAAc,GAAG,IAAjB;AACH;;AAXN;AAAA;AAaC,iBAAMd,GAAG,CAACI,WAAW,CAAC;AAAES,YAAAA,OAAF;AAAWH,YAAAA,SAAX;AAAsBI,YAAAA;AAAtB,WAAD,CAAZ,CAAT;;AAbD;AAAA;AAcC,iBAAMd,GAAG,CAACG,eAAe,CAAC;AAAEc,YAAAA,MAAM,EAAE;AAAV,WAAD,CAAhB,CAAT;;AAdD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBC,iBAAMjB,GAAG,CAACC,SAAS,CAAC;AAChBiB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEhB;AADH;AAHE,WAAD,CAAV,CAAT;;AAhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { apiKeys2FAModal, apiKeysData, apiKeysError, ApiKeysFetch } from '../actions';\n\nconst apiKeysOptions: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* apiKeysSaga(action: ApiKeysFetch) {\n    try {\n        const { pageIndex, limit } = action.payload;\n        const apiKeys = yield call(API.get(apiKeysOptions), `/resource/api_keys?page=${pageIndex + 1}&limit=${limit}`);\n        let nextPageExists = false;\n\n        if (apiKeys.length === limit) {\n            const checkData = yield call(API.get(apiKeysOptions), `/resource/api_keys?page=${(pageIndex + 1) * limit + 1}&limit=${1}`);\n\n            if (checkData.length === 1) {\n                nextPageExists = true;\n            }\n        }\n        yield put(apiKeysData({ apiKeys, pageIndex, nextPageExists }));\n        yield put(apiKeys2FAModal({ active: false }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: apiKeysError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}