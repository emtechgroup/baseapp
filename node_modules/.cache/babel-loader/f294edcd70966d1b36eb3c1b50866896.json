{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(entropyPassword);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { entropyPasswordData, entropyPasswordError } from '../actions';\nvar config = {\n  apiVersion: 'barong'\n};\nexport function entropyPassword(action) {\n  var data;\n  return _regeneratorRuntime.wrap(function entropyPassword$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(config), '/identity/password/validate', action.payload);\n\n        case 3:\n          data = _context.sent;\n          _context.next = 6;\n          return put(entropyPasswordData(data));\n\n        case 6:\n          _context.next = 14;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(entropyPasswordError(_context.t0));\n\n        case 12:\n          _context.next = 14;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: entropyPasswordError\n            }\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/auth/sagas/entropyPassword.ts"],"names":["entropyPassword","call","put","sendError","API","entropyPasswordData","entropyPasswordError","config","apiVersion","action","post","payload","data","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,e;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAAgF,YAAhF;AAEA,IAAMC,MAAsB,GAAG;AAC3BC,EAAAA,UAAU,EAAE;AADe,CAA/B;AAIA,OAAO,SAAUR,eAAV,CAA0BS,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAMR,IAAI,CAACG,GAAG,CAACM,IAAJ,CAASH,MAAT,CAAD,EAAmB,6BAAnB,EAAkDE,MAAM,CAACE,OAAzD,CAAV;;AAFd;AAEOC,UAAAA,IAFP;AAAA;AAGC,iBAAMV,GAAG,CAACG,mBAAmB,CAACO,IAAD,CAApB,CAAT;;AAHD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKC,iBAAMV,GAAG,CAACI,oBAAoB,aAArB,CAAT;;AALD;AAAA;AAMC,iBAAMJ,GAAG,CAACC,SAAS,CAAC;AAChBU,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEV;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { entropyPasswordData, entropyPasswordError, EntropyPasswordFetch } from '../actions';\n\nconst config: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* entropyPassword(action: EntropyPasswordFetch) {\n    try {\n        const data = yield call(API.post(config), '/identity/password/validate', action.payload);\n        yield put(entropyPasswordData(data));\n    } catch (error) {\n        yield put(entropyPasswordError(error));\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: entropyPasswordError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}