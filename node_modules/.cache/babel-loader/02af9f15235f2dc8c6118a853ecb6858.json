{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(generate2faQRSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { generate2faQRData, generate2faQRError } from '../actions';\n\nvar generate2faQROptions = function generate2faQROptions(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function generate2faQRSaga(action) {\n  var qrData, _qrData$data, barcode, url;\n\n  return _regeneratorRuntime.wrap(function generate2faQRSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(generate2faQROptions(getCsrfToken())), '/resource/otp/generate_qrcode');\n\n        case 3:\n          qrData = _context.sent;\n          _qrData$data = qrData.data, barcode = _qrData$data.barcode, url = _qrData$data.url;\n          _context.next = 7;\n          return put(generate2faQRData({\n            barcode,\n            url\n          }));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: generate2faQRError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/profile/sagas/generate2faQRSaga.ts"],"names":["generate2faQRSaga","call","put","sendError","API","getCsrfToken","generate2faQRData","generate2faQRError","generate2faQROptions","csrfToken","apiVersion","headers","action","post","qrData","data","barcode","url","error","processingType","extraOptions","actionError"],"mappings":";;oDAoBiBA,iB;;AApBjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAA8BC,iBAA9B,EAAiDC,kBAAjD,QAA2E,YAA3E;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,SAAD,EAAwC;AACjE,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAcA,OAAO,SAAUT,iBAAV,CAA4BY,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoC,iBAAMX,IAAI,CAACG,GAAG,CAACS,IAAJ,CAASL,oBAAoB,CAACH,YAAY,EAAb,CAA7B,CAAD,EAAiD,+BAAjD,CAAV;;AAFpC;AAEOS,UAAAA,MAFP;AAAA,yBAG0BA,MAAM,CAACC,IAHjC,EAGSC,OAHT,gBAGSA,OAHT,EAGkBC,GAHlB,gBAGkBA,GAHlB;AAAA;AAIC,iBAAMf,GAAG,CAACI,iBAAiB,CAAC;AAAEU,YAAAA,OAAF;AAAWC,YAAAA;AAAX,WAAD,CAAlB,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMf,GAAG,CAACC,SAAS,CAAC;AAChBe,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEd;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { ChangePasswordFetch, generate2faQRData, generate2faQRError } from '../actions';\n\nconst generate2faQROptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\ninterface GenerateQRResponse {\n    data: {\n        barcode: string;\n        url: string;\n    };\n}\n\nexport function* generate2faQRSaga(action: ChangePasswordFetch) {\n    try {\n        const qrData: GenerateQRResponse = yield call(API.post(generate2faQROptions(getCsrfToken())), '/resource/otp/generate_qrcode');\n        const { barcode, url } = qrData.data;\n        yield put(generate2faQRData({ barcode, url }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: generate2faQRError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}