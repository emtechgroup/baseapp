{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/Confirm/Phone/index.tsx\";\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { CustomInput } from '../../../components';\nimport { changeUserLevel as _changeUserLevel, resendCode as _resendCode, selectVerifyPhoneSuccess, sendCode as _sendCode, verifyPhone as _verifyPhone } from '../../../modules';\n\nvar PhoneComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(PhoneComponent, _React$Component);\n\n  var _super = _createSuper(PhoneComponent);\n\n  function PhoneComponent(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneComponent);\n\n    _this = _super.call(this, props);\n\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'phoneNumber':\n            _this.addPlusSignToPhoneNumber();\n\n            _this.setState(function (prev) {\n              return {\n                phoneNumberFocused: !prev.phoneNumberFocused\n              };\n            });\n\n            break;\n\n          case 'confirmationCode':\n            _this.setState({\n              confirmationCodeFocused: !_this.state.confirmationCodeFocused\n            });\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    _this.handleConfirmEnterPress = function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n\n        _this.confirmPhone();\n      }\n    };\n\n    _this.handleSendEnterPress = function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n\n        _this.handleSendCode(event);\n      }\n    };\n\n    _this.confirmPhone = function () {\n      var requestProps = {\n        phone_number: String(_this.state.phoneNumber),\n        verification_code: String(_this.state.confirmationCode)\n      };\n\n      _this.props.verifyPhone(requestProps);\n    };\n\n    _this.addPlusSignToPhoneNumber = function () {\n      if (_this.state.phoneNumber.length === 0) {\n        _this.setState({\n          phoneNumber: '+'\n        });\n      }\n    };\n\n    _this.handleChangePhoneNumber = function (value) {\n      if (_this.inputPhoneNumber(value)) {\n        _this.setState({\n          phoneNumber: value,\n          resendCode: false\n        });\n      }\n    };\n\n    _this.handleChangeConfirmationCode = function (value) {\n      if (_this.inputConfirmationCode(value)) {\n        _this.setState({\n          confirmationCode: value\n        });\n      }\n    };\n\n    _this.inputPhoneNumber = function (value) {\n      var convertedText = value.trim();\n      var condition = new RegExp('^(\\\\(?\\\\+?[0-9]*\\\\)?)?[0-9_\\\\- \\\\(\\\\)]*$');\n      return condition.test(convertedText);\n    };\n\n    _this.inputConfirmationCode = function (value) {\n      var convertedText = value.trim();\n      var condition = new RegExp('^\\\\d*?$');\n      return condition.test(convertedText);\n    };\n\n    _this.handleSendCode = function (event) {\n      event.preventDefault();\n      var requestProps = {\n        phone_number: String(_this.state.phoneNumber)\n      };\n\n      if (!_this.state.resendCode) {\n        _this.props.sendCode(requestProps);\n\n        _this.setState({\n          resendCode: true\n        });\n      } else {\n        _this.props.resendCode(requestProps);\n      }\n    };\n\n    _this.translate = function (id) {\n      return _this.props.intl.formatMessage({\n        id\n      });\n    };\n\n    _this.state = {\n      phoneNumber: '',\n      phoneNumberFocused: false,\n      confirmationCode: '',\n      confirmationCodeFocused: false,\n      resendCode: false\n    };\n    return _this;\n  }\n\n  _createClass(PhoneComponent, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          history = _this$props.history,\n          verifyPhoneSuccess = _this$props.verifyPhoneSuccess;\n\n      if (verifyPhoneSuccess !== prevProps.verifyPhoneSuccess) {\n        history.push('/profile');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          phoneNumber = _this$state.phoneNumber,\n          phoneNumberFocused = _this$state.phoneNumberFocused,\n          confirmationCode = _this$state.confirmationCode,\n          confirmationCodeFocused = _this$state.confirmationCodeFocused;\n      var phoneNumberFocusedClass = cr('pg-confirm__content-phone-col-content', {\n        'pg-confirm__content-phone-col-content--focused': phoneNumberFocused\n      });\n      var confirmationCodeFocusedClass = cr('pg-confirm__content-phone-col-content', {\n        'pg-confirm__content-phone-col-content--focused': confirmationCodeFocused\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-phone\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-phone-col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: phoneNumberFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(InputGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        label: phoneNumber ? this.translate('page.body.kyc.phone.phoneNumber') : '',\n        defaultLabel: phoneNumber ? this.translate('page.body.kyc.phone.phoneNumber') : '',\n        placeholder: this.translate('page.body.kyc.phone.phoneNumber'),\n        type: \"tel\",\n        name: \"phone\",\n        autoComplete: \"tel\",\n        inputValue: phoneNumber,\n        handleClick: this.addPlusSignToPhoneNumber,\n        handleChangeInput: this.handleChangePhoneNumber,\n        onKeyPress: this.handleSendEnterPress,\n        autoFocus: true,\n        handleFocusInput: this.handleFieldFocus('phoneNumber'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        onClick: this.handleSendCode,\n        size: \"lg\",\n        variant: \"primary\",\n        type: \"submit\",\n        disabled: !phoneNumber,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 37\n        }\n      }, this.state.resendCode ? this.translate('page.body.kyc.phone.resend') : this.translate('page.body.kyc.phone.send'))))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-phone-col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: confirmationCodeFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        label: confirmationCode ? this.translate('page.body.kyc.phone.code') : '',\n        defaultLabel: confirmationCode ? this.translate('page.body.kyc.phone.code') : '',\n        handleChangeInput: this.handleChangeConfirmationCode,\n        onKeyPress: this.handleConfirmEnterPress,\n        inputValue: confirmationCode,\n        placeholder: this.translate('page.body.kyc.phone.code'),\n        handleFocusInput: this.handleFieldFocus('confirmationCode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-deep\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        onClick: this.confirmPhone,\n        size: \"lg\",\n        variant: \"primary\",\n        disabled: !confirmationCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, this.translate('page.body.kyc.next'))));\n    }\n  }]);\n\n  return PhoneComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    verifyPhoneSuccess: selectVerifyPhoneSuccess(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    resendCode: function resendCode(phone) {\n      return dispatch(_resendCode(phone));\n    },\n    sendCode: function sendCode(phone) {\n      return dispatch(_sendCode(phone));\n    },\n    verifyPhone: function verifyPhone(payload) {\n      return dispatch(_verifyPhone(payload));\n    },\n    changeUserLevel: function changeUserLevel(payload) {\n      return dispatch(_changeUserLevel(payload));\n    }\n  };\n};\n\nexport var Phone = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(PhoneComponent); // tslint:disable-line","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/Confirm/Phone/index.tsx"],"names":["cr","React","Button","InputGroup","injectIntl","connect","withRouter","compose","CustomInput","changeUserLevel","resendCode","selectVerifyPhoneSuccess","sendCode","verifyPhone","PhoneComponent","props","handleFieldFocus","field","addPlusSignToPhoneNumber","setState","prev","phoneNumberFocused","confirmationCodeFocused","state","handleConfirmEnterPress","event","key","preventDefault","confirmPhone","handleSendEnterPress","handleSendCode","requestProps","phone_number","String","phoneNumber","verification_code","confirmationCode","length","handleChangePhoneNumber","value","inputPhoneNumber","handleChangeConfirmationCode","inputConfirmationCode","convertedText","trim","condition","RegExp","test","translate","id","intl","formatMessage","prevProps","history","verifyPhoneSuccess","push","phoneNumberFocusedClass","confirmationCodeFocusedClass","Component","mapStateToProps","mapDispatchToProps","dispatch","phone","payload","Phone"],"mappings":"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","sourcesContent":["import cr from 'classnames';\nimport * as React from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../../';\nimport { CustomInput } from '../../../components';\nimport {\n    changeUserLevel,\n    resendCode,\n    RootState,\n    selectVerifyPhoneSuccess,\n    sendCode,\n    verifyPhone,\n} from '../../../modules';\n\ninterface ReduxProps {\n    verifyPhoneSuccess?: string;\n}\n\ninterface PhoneState {\n    phoneNumber: string;\n    phoneNumberFocused: boolean;\n    confirmationCode: string;\n    confirmationCodeFocused: boolean;\n    resendCode: boolean;\n}\n\ninterface DispatchProps {\n    resendCode: typeof resendCode;\n    sendCode: typeof sendCode;\n    verifyPhone: typeof verifyPhone;\n    changeUserLevel: typeof changeUserLevel;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps;\n\nclass PhoneComponent extends React.Component<Props, PhoneState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            phoneNumber: '',\n            phoneNumberFocused: false,\n            confirmationCode: '',\n            confirmationCodeFocused: false,\n            resendCode: false,\n        };\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        const { history, verifyPhoneSuccess } = this.props;\n\n        if (verifyPhoneSuccess !== prevProps.verifyPhoneSuccess) {\n            history.push('/profile');\n        }\n    }\n\n    public render() {\n        const {\n            phoneNumber,\n            phoneNumberFocused,\n            confirmationCode,\n            confirmationCodeFocused,\n        } = this.state;\n\n        const phoneNumberFocusedClass = cr('pg-confirm__content-phone-col-content', {\n            'pg-confirm__content-phone-col-content--focused': phoneNumberFocused,\n        });\n\n        const confirmationCodeFocusedClass = cr('pg-confirm__content-phone-col-content', {\n            'pg-confirm__content-phone-col-content--focused': confirmationCodeFocused,\n        });\n\n        return (\n            <div className=\"pg-confirm__content-phone\">\n                <div className=\"pg-confirm__content-phone-col\">\n                    <form>\n                        <fieldset className={phoneNumberFocusedClass}>\n                            <InputGroup>\n                                <CustomInput\n                                    label={phoneNumber ? this.translate('page.body.kyc.phone.phoneNumber') : ''}\n                                    defaultLabel={phoneNumber ? this.translate('page.body.kyc.phone.phoneNumber') : ''}\n                                    placeholder={this.translate('page.body.kyc.phone.phoneNumber')}\n                                    type=\"tel\"\n                                    name=\"phone\"\n                                    autoComplete=\"tel\"\n                                    inputValue={phoneNumber}\n                                    handleClick={this.addPlusSignToPhoneNumber}\n                                    handleChangeInput={this.handleChangePhoneNumber}\n                                    onKeyPress={this.handleSendEnterPress}\n                                    autoFocus={true}\n                                    handleFocusInput={this.handleFieldFocus('phoneNumber')}\n                                />\n                                <InputGroup.Append>\n                                    <Button\n                                        block={true}\n                                        onClick={this.handleSendCode}\n                                        size=\"lg\"\n                                        variant=\"primary\"\n                                        type=\"submit\"\n                                        disabled={!phoneNumber}\n                                    >\n                                        {this.state.resendCode ? this.translate('page.body.kyc.phone.resend') : this.translate('page.body.kyc.phone.send')}\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </fieldset>\n                    </form>\n                </div>\n                <div className=\"pg-confirm__content-phone-col\">\n                    <fieldset className={confirmationCodeFocusedClass}>\n                        <CustomInput\n                            type=\"string\"\n                            label={confirmationCode ? this.translate('page.body.kyc.phone.code') : ''}\n                            defaultLabel={confirmationCode ? this.translate('page.body.kyc.phone.code') : ''}\n                            handleChangeInput={this.handleChangeConfirmationCode}\n                            onKeyPress={this.handleConfirmEnterPress}\n                            inputValue={confirmationCode}\n                            placeholder={this.translate('page.body.kyc.phone.code')}\n                            handleFocusInput={this.handleFieldFocus('confirmationCode')}\n                        />\n                    </fieldset>\n                </div>\n                <div className=\"pg-confirm__content-deep\">\n                    <Button\n                        block={true}\n                        onClick={this.confirmPhone}\n                        size=\"lg\"\n                        variant=\"primary\"\n                        disabled={!confirmationCode}\n                    >\n                        {this.translate('page.body.kyc.next')}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleFieldFocus = (field: string) => {\n        return() => {\n            switch (field) {\n                case 'phoneNumber':\n                    this.addPlusSignToPhoneNumber();\n                    this.setState(prev => ({\n                        phoneNumberFocused: !prev.phoneNumberFocused,\n                    }));\n                    break;\n                case 'confirmationCode':\n                    this.setState({\n                        confirmationCodeFocused: !this.state.confirmationCodeFocused,\n                    });\n                    break;\n                default:\n                    break;\n            }\n        };\n    };\n\n    private handleConfirmEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmPhone();\n        }\n    };\n\n    private handleSendEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.handleSendCode(event);\n        }\n    };\n\n    private confirmPhone = () => {\n        const requestProps = {\n            phone_number: String(this.state.phoneNumber),\n            verification_code: String(this.state.confirmationCode),\n        };\n        this.props.verifyPhone(requestProps);\n    };\n\n    private addPlusSignToPhoneNumber = () => {\n        if (this.state.phoneNumber.length === 0) {\n            this.setState({\n                phoneNumber: '+',\n            });\n        }\n    };\n\n    private handleChangePhoneNumber = (value: string) => {\n        if (this.inputPhoneNumber(value)) {\n            this.setState({\n                phoneNumber: value,\n                resendCode: false,\n            });\n        }\n    };\n\n    private handleChangeConfirmationCode = (value: string) => {\n        if (this.inputConfirmationCode(value)) {\n            this.setState({\n                confirmationCode: value,\n            });\n        }\n    };\n\n    private inputPhoneNumber = (value: string) => {\n        const convertedText = value.trim();\n        const condition = new RegExp('^(\\\\(?\\\\+?[0-9]*\\\\)?)?[0-9_\\\\- \\\\(\\\\)]*$');\n\n        return condition.test(convertedText);\n    };\n\n    private inputConfirmationCode = (value: string) => {\n        const convertedText = value.trim();\n        const condition = new RegExp('^\\\\d*?$');\n\n        return condition.test(convertedText);\n    };\n\n    private handleSendCode = event => {\n        event.preventDefault();\n        const requestProps = {\n            phone_number: String(this.state.phoneNumber),\n        };\n\n        if (!this.state.resendCode) {\n            this.props.sendCode(requestProps);\n            this.setState({\n                resendCode: true,\n            });\n        } else {\n            this.props.resendCode(requestProps);\n        }\n    };\n\n    private translate = (id: string) => this.props.intl.formatMessage({ id });\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    verifyPhoneSuccess: selectVerifyPhoneSuccess(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        resendCode: phone => dispatch(resendCode(phone)),\n        sendCode: phone => dispatch(sendCode(phone)),\n        verifyPhone: payload => dispatch(verifyPhone(payload)),\n        changeUserLevel: payload => dispatch(changeUserLevel(payload)),\n    });\n\nexport const Phone = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(PhoneComponent) as any; // tslint:disable-line\n"]},"metadata":{},"sourceType":"module"}