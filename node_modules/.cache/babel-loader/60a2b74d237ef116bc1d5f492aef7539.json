{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/TabPanel/index.tsx\";\n\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { DropdownComponent } from '../Dropdown';\nexport var HideMode;\n\n(function (HideMode) {\n  HideMode[\"hide\"] = \"hide\";\n  HideMode[\"unmount\"] = \"unmount\";\n})(HideMode || (HideMode = {}));\n\n/**\n * Component for switching between different tabs on one page.\n */\nexport var TabPanel = function TabPanel(_ref) {\n  var fixed = _ref.fixed,\n      _ref$hideMode = _ref.hideMode,\n      hideMode = _ref$hideMode === void 0 ? HideMode.hide : _ref$hideMode,\n      panels = _ref.panels,\n      optionalHead = _ref.optionalHead,\n      currentTabIndex = _ref.currentTabIndex,\n      isMobileDevice = _ref.isMobileDevice,\n      onCurrentTabChange = _ref.onCurrentTabChange,\n      onTabChange = _ref.onTabChange;\n  var dropdownLabels = React.useCallback(function () {\n    if (!panels.length) {\n      return [];\n    }\n\n    var tabNames = panels.map(function (panel) {\n      return panel.label;\n    }).filter(function (label) {\n      return label !== panels[currentTabIndex].label;\n    });\n    tabNames.unshift(panels[currentTabIndex].label);\n    return tabNames;\n  }, [currentTabIndex, panels]);\n  var createOnTabChangeHandler = React.useCallback(function (index, tab) {\n    return function () {\n      if (!tab.disabled) {\n        if (onCurrentTabChange) {\n          onCurrentTabChange(index);\n        }\n\n        if (onTabChange) {\n          onTabChange(index, tab.label);\n        }\n      }\n    };\n  }, [onCurrentTabChange, onTabChange]);\n  var handleOrderTypeChange = React.useCallback(function (index) {\n    var currentLabels = dropdownLabels();\n    var activeIndex = panels.findIndex(function (tab) {\n      return tab.label === currentLabels[index];\n    });\n    createOnTabChangeHandler(activeIndex, panels[activeIndex])();\n  }, [createOnTabChangeHandler, dropdownLabels, panels]);\n  var renderTabPanel = React.useCallback(function (tab, index) {\n    var disabled = tab.disabled,\n        hidden = tab.hidden,\n        label = tab.label;\n    var active = currentTabIndex === index;\n    var cn = classnames('cr-tab', {\n      'cr-tab__active': active,\n      'cr-tab__disabled': disabled,\n      'cr-tab__hidden': hidden\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cn,\n      key: index,\n      onClick: createOnTabChangeHandler(index, tab),\n      role: \"tab\",\n      tabIndex: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, label, active && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"cr-tab__pointer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 32\n      }\n    }));\n  }, [createOnTabChangeHandler, currentTabIndex]);\n  var tabPanelRender = React.useCallback(function () {\n    if (isMobileDevice) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-tab-panel__dropdown\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(DropdownComponent, {\n        list: dropdownLabels(),\n        className: \"cr-dropdown--mobile\",\n        onSelect: handleOrderTypeChange,\n        placeholder: \"\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'cr-tab-panel__navigation-container-navigation',\n        role: \"tablist\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, panels.map(renderTabPanel));\n    }\n  }, [dropdownLabels, handleOrderTypeChange, isMobileDevice, panels, renderTabPanel]);\n  var renderTabContent = React.useCallback(function (tab, index) {\n    var cn = classnames('cr-tab-content', {\n      'cr-tab-content__active': hideMode === HideMode.hide ? currentTabIndex === index : false\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cn,\n      key: \"\".concat(tab.label, \"-\").concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, tab.content);\n  }, [currentTabIndex, hideMode]);\n  var contents = React.useMemo(function () {\n    return hideMode === HideMode.hide ? panels.map(renderTabContent) : panels.filter(function (panel, index) {\n      return index === currentTabIndex;\n    }).map(renderTabContent);\n  }, [currentTabIndex, hideMode, panels, renderTabContent]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('cr-tab-panel', {\n      'cr-tab-panel__fixed': fixed\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-tab-panel__navigation-container draggable-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, tabPanelRender(), optionalHead && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-tab-panel__optinal-head\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 34\n    }\n  }, optionalHead)), contents);\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/TabPanel/index.tsx"],"names":["classnames","React","DropdownComponent","HideMode","TabPanel","fixed","hideMode","hide","panels","optionalHead","currentTabIndex","isMobileDevice","onCurrentTabChange","onTabChange","dropdownLabels","useCallback","length","tabNames","map","panel","label","filter","unshift","createOnTabChangeHandler","index","tab","disabled","handleOrderTypeChange","currentLabels","activeIndex","findIndex","renderTabPanel","hidden","active","cn","tabPanelRender","renderTabContent","content","contents","useMemo"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { DropdownComponent } from '../Dropdown';\n\nexport enum HideMode {\n    hide = 'hide',\n    unmount = 'unmount',\n}\n\nexport type OnTabChangeCallback = (index: number, label?: string) => void;\n\ntype OnCurrentTabChange = (index: number) => void;\n\nexport interface Tab {\n    content: React.ReactNode;\n    disabled?: boolean;\n    hidden?: boolean;\n    label: string;\n}\n\nexport interface TabPanelProps {\n    /**\n     * List of tabs to be rendered\n     */\n    panels: Tab[];\n    /**\n     * Determines whether tabs should be full container width\n     * @default false\n     */\n    fixed?: boolean;\n    /**\n     * Tab change mode:\n     * `hide` mode will mount but hide inactive tabs changing `display` css\n     * property of tab content to `none`.\n     * `unmount` mode will not mount the tab content of inactive tabs.\n     * @default hide\n     */\n    hideMode?: HideMode;\n    /**\n     * Callback which is called when currently active tab is changed\n     */\n    onTabChange?: OnTabChangeCallback;\n    /**\n     * Function which is called for changing currently active tab is changed\n     */\n    onCurrentTabChange?: OnCurrentTabChange;\n    /**\n     * Index of tab to switch on\n     */\n    /**\n     * Current index of tab\n     */\n    currentTabIndex: number;\n    /**\n     * Optinal JSX element to head\n     */\n    optionalHead?: React.ReactNode;\n    /**\n     * Determines whether tab header should looks like dropdown or tab switcher\n     */\n    isMobileDevice?: boolean;\n}\n\n/**\n * Component for switching between different tabs on one page.\n */\nexport const TabPanel: React.FC<TabPanelProps> = ({\n    fixed,\n    hideMode = HideMode.hide,\n    panels,\n    optionalHead,\n    currentTabIndex,\n    isMobileDevice,\n    onCurrentTabChange,\n    onTabChange,\n}) => {\n    const dropdownLabels = React.useCallback(() => {\n        if (!panels.length) {\n            return [];\n        }\n\n        const tabNames = panels.map((panel) => panel.label).filter((label) => label !== panels[currentTabIndex].label);\n        tabNames.unshift(panels[currentTabIndex].label);\n\n        return tabNames;\n    }, [currentTabIndex, panels]);\n\n    const createOnTabChangeHandler = React.useCallback(\n        (index: number, tab: Tab) => () => {\n            if (!tab.disabled) {\n                if (onCurrentTabChange) {\n                    onCurrentTabChange(index);\n                }\n                if (onTabChange) {\n                    onTabChange(index, tab.label);\n                }\n            }\n        },\n        [onCurrentTabChange, onTabChange]\n    );\n\n    const handleOrderTypeChange = React.useCallback(\n        (index: number) => {\n            const currentLabels = dropdownLabels();\n\n            const activeIndex = panels.findIndex((tab) => tab.label === currentLabels[index]);\n\n            createOnTabChangeHandler(activeIndex, panels[activeIndex])();\n        },\n        [createOnTabChangeHandler, dropdownLabels, panels]\n    );\n\n    const renderTabPanel = React.useCallback(\n        (tab: Tab, index: number) => {\n            const { disabled, hidden, label } = tab;\n\n            const active = currentTabIndex === index;\n            const cn = classnames('cr-tab', {\n                'cr-tab__active': active,\n                'cr-tab__disabled': disabled,\n                'cr-tab__hidden': hidden,\n            });\n\n            return (\n                <div\n                    className={cn}\n                    key={index}\n                    onClick={createOnTabChangeHandler(index, tab)}\n                    role=\"tab\"\n                    tabIndex={index}>\n                    {label}\n                    {active && <span className=\"cr-tab__pointer\" />}\n                </div>\n            );\n        },\n        [createOnTabChangeHandler, currentTabIndex]\n    );\n\n    const tabPanelRender = React.useCallback(() => {\n        if (isMobileDevice) {\n            return (\n                <div className=\"cr-tab-panel__dropdown\">\n                    <DropdownComponent\n                        list={dropdownLabels()}\n                        className=\"cr-dropdown--mobile\"\n                        onSelect={handleOrderTypeChange}\n                        placeholder=\"\"\n                    />\n                </div>\n            );\n        } else {\n            return (\n                <div className={'cr-tab-panel__navigation-container-navigation'} role=\"tablist\">\n                    {panels.map(renderTabPanel)}\n                </div>\n            );\n        }\n    }, [dropdownLabels, handleOrderTypeChange, isMobileDevice, panels, renderTabPanel]);\n\n    const renderTabContent = React.useCallback(\n        (tab: Tab, index: number) => {\n            const cn: string = classnames('cr-tab-content', {\n                'cr-tab-content__active': hideMode === HideMode.hide ? currentTabIndex === index : false,\n            });\n\n            return (\n                <div className={cn} key={`${tab.label}-${index}`}>\n                    {tab.content}\n                </div>\n            );\n        },\n        [currentTabIndex, hideMode]\n    );\n\n    const contents = React.useMemo(\n        () =>\n            hideMode === HideMode.hide\n                ? panels.map(renderTabContent)\n                : panels.filter((panel, index) => index === currentTabIndex).map(renderTabContent),\n        [currentTabIndex, hideMode, panels, renderTabContent]\n    );\n\n    return (\n        <div\n            className={classnames('cr-tab-panel', {\n                'cr-tab-panel__fixed': fixed,\n            })}>\n            <div className=\"cr-tab-panel__navigation-container draggable-container\">\n                {tabPanelRender()}\n                {optionalHead && <div className=\"cr-tab-panel__optinal-head\">{optionalHead}</div>}\n            </div>\n            {contents}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}