{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(customizationUpdateSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { customizationData } from '../../../public/customization';\nimport { customizationUpdateData, customizationUpdateError } from '../actions';\nvar customizationUpdateOptions = {\n  apiVersion: 'applogic'\n};\nexport function customizationUpdateSaga(action) {\n  return _regeneratorRuntime.wrap(function customizationUpdateSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(customizationUpdateOptions), '/customization', action.payload);\n\n        case 3:\n          _context.next = 5;\n          return put(customizationUpdateData(action.payload));\n\n        case 5:\n          _context.next = 7;\n          return put(customizationData(action.payload));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: customizationUpdateError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/customization/sagas/customizationUpdateSaga.ts"],"names":["customizationUpdateSaga","call","put","sendError","API","customizationData","customizationUpdateData","customizationUpdateError","customizationUpdateOptions","apiVersion","action","post","payload","error","processingType","extraOptions","actionError"],"mappings":";;oDAUiBA,uB;;AAVjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAA8BC,uBAA9B,EAAuDC,wBAAvD,QAAuF,YAAvF;AAEA,IAAMC,0BAA0C,GAAG;AAC/CC,EAAAA,UAAU,EAAE;AADmC,CAAnD;AAIA,OAAO,SAAUT,uBAAV,CAAkCU,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMT,IAAI,CAACG,GAAG,CAACO,IAAJ,CAASH,0BAAT,CAAD,EAAuC,gBAAvC,EAAyDE,MAAM,CAACE,OAAhE,CAAV;;AAFD;AAAA;AAGC,iBAAMV,GAAG,CAACI,uBAAuB,CAACI,MAAM,CAACE,OAAR,CAAxB,CAAT;;AAHD;AAAA;AAIC,iBAAMV,GAAG,CAACG,iBAAiB,CAACK,MAAM,CAACE,OAAR,CAAlB,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMV,GAAG,CAACC,SAAS,CAAC;AAChBU,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAET;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { customizationData } from '../../../public/customization';\nimport { CustomizationUpdate, customizationUpdateData, customizationUpdateError } from '../actions';\n\nconst customizationUpdateOptions: RequestOptions = {\n    apiVersion: 'applogic',\n};\n\nexport function* customizationUpdateSaga(action: CustomizationUpdate) {\n    try {\n        yield call(API.post(customizationUpdateOptions), '/customization', action.payload);\n        yield put(customizationUpdateData(action.payload));\n        yield put(customizationData(action.payload));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: customizationUpdateError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}