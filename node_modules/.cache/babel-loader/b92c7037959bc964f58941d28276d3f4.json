{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(ordersCancelAllSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken, getOrderAPI } from '../../../../helpers';\nimport { ordersCancelAllData, ordersCancelAllError } from '../actions';\n\nvar ordersCancelAllOptions = function ordersCancelAllOptions(csrfToken) {\n  return {\n    apiVersion: getOrderAPI(),\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function ordersCancelAllSaga(action) {\n  return _regeneratorRuntime.wrap(function ordersCancelAllSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(ordersCancelAllOptions(getCsrfToken())), '/market/orders/cancel', action.payload);\n\n        case 3:\n          _context.next = 5;\n          return put(ordersCancelAllData());\n\n        case 5:\n          _context.next = 7;\n          return put(alertPush({\n            message: ['success.order.cancelling.all'],\n            type: 'success'\n          }));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: ordersCancelAllError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/ordersHistory/sagas/ordersCancelAllSaga.ts"],"names":["ordersCancelAllSaga","call","put","alertPush","sendError","API","getCsrfToken","getOrderAPI","ordersCancelAllData","ordersCancelAllError","ordersCancelAllOptions","csrfToken","apiVersion","headers","action","post","payload","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,mB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,qBAA1C;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAAgF,YAAhF;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,SAAD,EAAwC;AACnE,SAAO;AACHC,IAAAA,UAAU,EAAEL,WAAW,EADpB;AAEHM,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,mBAAV,CAA8Bc,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMb,IAAI,CAACI,GAAG,CAACU,IAAJ,CAASL,sBAAsB,CAACJ,YAAY,EAAb,CAA/B,CAAD,EAAmD,uBAAnD,EAA4EQ,MAAM,CAACE,OAAnF,CAAV;;AAFD;AAAA;AAGC,iBAAMd,GAAG,CAACM,mBAAmB,EAApB,CAAT;;AAHD;AAAA;AAIC,iBAAMN,GAAG,CAACC,SAAS,CAAC;AAAEc,YAAAA,OAAO,EAAE,CAAC,8BAAD,CAAX;AAA6CC,YAAAA,IAAI,EAAE;AAAnD,WAAD,CAAV,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMhB,GAAG,CAACE,SAAS,CAAC;AAChBe,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEb;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken, getOrderAPI } from '../../../../helpers';\nimport { ordersCancelAllData, ordersCancelAllError, OrdersCancelAllFetch } from '../actions';\n\nconst ordersCancelAllOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: getOrderAPI(),\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* ordersCancelAllSaga(action: OrdersCancelAllFetch) {\n    try {\n        yield call(API.post(ordersCancelAllOptions(getCsrfToken())), '/market/orders/cancel', action.payload);\n        yield put(ordersCancelAllData());\n        yield put(alertPush({ message: ['success.order.cancelling.all'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: ordersCancelAllError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}