{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/OrderForm/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { validatePriceStep } from '../../filters';\nimport { cleanPositiveFloatInput, precisionRegExp } from '../../helpers';\nimport { OrderInput as OrderInputMobile } from '../../mobile/components';\nimport { Decimal } from '../Decimal';\nimport { DropdownComponent } from '../Dropdown';\nimport { OrderInput } from '../OrderInput';\nimport { PercentageButton } from '../PercentageButton';\n\nvar handleSetValue = function handleSetValue(value, defaultValue) {\n  return value || defaultValue;\n};\n\nexport var OrderForm = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(OrderForm, _React$PureComponent);\n\n  var _super = _createSuper(OrderForm);\n\n  function OrderForm(props) {\n    var _this;\n\n    _classCallCheck(this, OrderForm);\n\n    _this = _super.call(this, props);\n\n    _this.handleOrderTypeChange = function (index) {\n      var orderTypesIndex = _this.props.orderTypesIndex;\n\n      _this.setState({\n        orderType: orderTypesIndex[index]\n      });\n    };\n\n    _this.handleFieldFocus = function (field) {\n      var priceText = _this.props.translate('page.body.trade.header.newOrder.content.price');\n\n      var amountText = _this.props.translate('page.body.trade.header.newOrder.content.amount');\n\n      switch (field) {\n        case priceText:\n          _this.setState(function (prev) {\n            return {\n              priceFocused: !prev.priceFocused\n            };\n          });\n\n          _this.props.listenInputPrice && _this.props.listenInputPrice();\n          break;\n\n        case amountText:\n          _this.setState(function (prev) {\n            return {\n              amountFocused: !prev.amountFocused\n            };\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handlePriceChange = function (value) {\n      var _this$props = _this.props,\n          currentMarketBidPrecision = _this$props.currentMarketBidPrecision,\n          currentMarketFilters = _this$props.currentMarketFilters;\n      var convertedValue = cleanPositiveFloatInput(String(value));\n\n      if (convertedValue.match(precisionRegExp(currentMarketBidPrecision))) {\n        _this.setState({\n          price: convertedValue,\n          isPriceValid: validatePriceStep(convertedValue, currentMarketFilters)\n        });\n      }\n\n      _this.props.listenInputPrice && _this.props.listenInputPrice();\n    };\n\n    _this.handleAmountChange = function (value) {\n      var currentMarketAskPrecision = _this.props.currentMarketAskPrecision;\n      var convertedValue = cleanPositiveFloatInput(String(value));\n\n      if (convertedValue.match(precisionRegExp(currentMarketAskPrecision))) {\n        _this.props.handleAmountChange(convertedValue, _this.props.type);\n      }\n    };\n\n    _this.handleChangeAmountByButton = function (value) {\n      var _this$state = _this.state,\n          orderType = _this$state.orderType,\n          price = _this$state.price;\n\n      _this.props.handleChangeAmountByButton(value, orderType, price, _this.props.type);\n    };\n\n    _this.handleSubmit = function () {\n      var _this$props2 = _this.props,\n          available = _this$props2.available,\n          type = _this$props2.type,\n          amount = _this$props2.amount;\n      var _this$state2 = _this.state,\n          price = _this$state2.price,\n          priceMarket = _this$state2.priceMarket,\n          orderType = _this$state2.orderType;\n      var order = {\n        type,\n        orderType,\n        amount,\n        price: orderType === 'Market' ? priceMarket : price,\n        available: available || 0\n      };\n\n      _this.props.onSubmit(order);\n\n      _this.handlePriceChange('');\n\n      _this.props.handleAmountChange('', _this.props.type);\n    };\n\n    _this.checkButtonIsDisabled = function () {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          available = _this$props3.available,\n          amount = _this$props3.amount,\n          totalPrice = _this$props3.totalPrice;\n      var _this$state3 = _this.state,\n          isPriceValid = _this$state3.isPriceValid,\n          orderType = _this$state3.orderType,\n          priceMarket = _this$state3.priceMarket,\n          price = _this$state3.price;\n      var safePrice = totalPrice / Number(amount) || priceMarket;\n      var invalidAmount = Number(amount) <= 0;\n      var invalidLimitPrice = orderType === 'Limit' && (Number(price) <= 0 || !isPriceValid.valid);\n      var invalidMarketPrice = safePrice <= 0 && orderType === 'Market';\n      return disabled || !available || invalidAmount || invalidLimitPrice || invalidMarketPrice;\n    };\n\n    _this.handleEnterPress = function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n\n        _this.handleSubmit();\n      }\n    };\n\n    _this.state = {\n      orderType: 'Limit',\n      price: '',\n      priceMarket: _this.props.priceMarket,\n      isPriceValid: {\n        valid: true,\n        priceStep: 0\n      },\n      priceFocused: false,\n      amountFocused: false\n    };\n    return _this;\n  }\n\n  _createClass(OrderForm, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var nextPriceLimitTruncated = Decimal.format(next.priceLimit, this.props.currentMarketBidPrecision);\n\n      if (this.state.orderType === 'Limit' && next.priceLimit && nextPriceLimitTruncated !== this.state.price) {\n        this.handlePriceChange(nextPriceLimitTruncated);\n      }\n\n      if (this.state.priceMarket !== next.priceMarket) {\n        this.setState({\n          priceMarket: next.priceMarket\n        });\n      }\n\n      if (this.props.to !== next.to || this.props.from !== next.from) {\n        this.setState({\n          price: ''\n        });\n        this.props.handleAmountChange('', next.type);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          type = _this$props4.type,\n          orderTypes = _this$props4.orderTypes,\n          className = _this$props4.className,\n          from = _this$props4.from,\n          to = _this$props4.to,\n          available = _this$props4.available,\n          currentMarketAskPrecision = _this$props4.currentMarketAskPrecision,\n          currentMarketBidPrecision = _this$props4.currentMarketBidPrecision,\n          totalPrice = _this$props4.totalPrice,\n          amount = _this$props4.amount,\n          isMobileDevice = _this$props4.isMobileDevice,\n          translate = _this$props4.translate;\n      var _this$state4 = this.state,\n          orderType = _this$state4.orderType,\n          price = _this$state4.price,\n          priceMarket = _this$state4.priceMarket,\n          isPriceValid = _this$state4.isPriceValid,\n          priceFocused = _this$state4.priceFocused,\n          amountFocused = _this$state4.amountFocused;\n      var safeAmount = Number(amount) || 0;\n      var safePrice = totalPrice / Number(amount) || priceMarket;\n      var total = orderType === 'Market' ? totalPrice : safeAmount * (Number(price) || 0);\n      var amountPercentageArray = [0.25, 0.5, 0.75, 1];\n      var availablePrecision = type === 'buy' ? currentMarketBidPrecision : currentMarketAskPrecision;\n      var availableCurrency = type === 'buy' ? from : to;\n      var priceErrorClass = classnames('error-message', {\n        'error-message--visible': (priceFocused || isMobileDevice) && !isPriceValid.valid\n      });\n      var priceText = this.props.translate('page.body.trade.header.newOrder.content.price');\n      var amountText = this.props.translate('page.body.trade.header.newOrder.content.amount');\n      var submitButtonText = translate(\"page.body.trade.header.newOrder.content.tabs.\".concat(type));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames('cr-order-form', className),\n        onKeyPress: this.handleEnterPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__dropdown__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }, translate('page.body.trade.header.newOrder.content.orderType')), /*#__PURE__*/React.createElement(DropdownComponent, {\n        list: orderTypes,\n        onSelect: this.handleOrderTypeChange,\n        placeholder: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }\n      })), orderType === 'Limit' ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }\n      }, isMobileDevice ? /*#__PURE__*/React.createElement(OrderInputMobile, {\n        label: priceText,\n        placeholder: translate('page.mobile.order.price.placeholder', {\n          currency: from ? from.toUpperCase() : ''\n        }),\n        value: price || '',\n        isFocused: priceFocused,\n        precision: currentMarketBidPrecision,\n        handleChangeValue: this.handlePriceChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(OrderInput, {\n        currency: from,\n        label: priceText,\n        placeholder: priceText,\n        value: price || '',\n        isFocused: priceFocused,\n        isWrong: !isPriceValid.valid,\n        handleChangeValue: this.handlePriceChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: priceErrorClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }\n      }, translate('page.body.trade.header.newOrder.content.filterPrice', {\n        priceStep: isPriceValid.priceStep\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: \"cr-order-input__fieldset\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        className: 'cr-order-input__fieldset__label',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 33\n        }\n      }, priceText), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-input__fieldset__input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 33\n        }\n      }, \"\\u2248\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-input__fieldset__input__price\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 44\n        }\n      }, handleSetValue(Decimal.format(safePrice, currentMarketBidPrecision, ','), '0')))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-input__crypto-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }\n      }, from.toUpperCase()))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }, isMobileDevice ? /*#__PURE__*/React.createElement(OrderInputMobile, {\n        label: amountText,\n        placeholder: translate('page.mobile.order.amount.placeholder', {\n          currency: to ? to.toUpperCase() : ''\n        }),\n        value: amount || '',\n        isFocused: amountFocused,\n        precision: currentMarketAskPrecision,\n        handleChangeValue: this.handleAmountChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(OrderInput, {\n        currency: to,\n        label: amountText,\n        placeholder: amountText,\n        value: amount || '',\n        isFocused: amountFocused,\n        handleChangeValue: this.handleAmountChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__percentage-buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }\n      }, amountPercentageArray.map(function (value, index) {\n        return /*#__PURE__*/React.createElement(PercentageButton, {\n          value: value,\n          key: index,\n          onClick: _this2.handleChangeAmountByButton,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 73\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__total\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"cr-order-item__total__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }\n      }, translate('page.body.trade.header.newOrder.content.total')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__total__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }\n      }, orderType === 'Market' ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 59\n        }\n      }, \"\\u2248\") : null, Decimal.format(total, currentMarketAskPrecision + currentMarketBidPrecision, ',')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__currency\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 29\n        }\n      }, from.toUpperCase())))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__available\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"cr-order-item__available__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }\n      }, translate('page.body.trade.header.newOrder.content.available')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__available__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__available__content__amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }\n      }, available ? Decimal.format(available, availablePrecision, ',') : ''), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__available__content__currency\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 29\n        }\n      }, available ? availableCurrency.toUpperCase() : '')))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        className: \"btn-block mr-1 mt-1 btn-lg\",\n        disabled: this.checkButtonIsDisabled(),\n        onClick: this.handleSubmit,\n        size: \"lg\",\n        variant: type === 'buy' ? 'success' : 'danger',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }\n      }, submitButtonText || type)));\n    }\n  }]);\n\n  return OrderForm;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/OrderForm/index.tsx"],"names":["classnames","React","Button","validatePriceStep","cleanPositiveFloatInput","precisionRegExp","OrderInput","OrderInputMobile","Decimal","DropdownComponent","PercentageButton","handleSetValue","value","defaultValue","OrderForm","props","handleOrderTypeChange","index","orderTypesIndex","setState","orderType","handleFieldFocus","field","priceText","translate","amountText","prev","priceFocused","listenInputPrice","amountFocused","handlePriceChange","currentMarketBidPrecision","currentMarketFilters","convertedValue","String","match","price","isPriceValid","handleAmountChange","currentMarketAskPrecision","type","handleChangeAmountByButton","state","handleSubmit","available","amount","priceMarket","order","onSubmit","checkButtonIsDisabled","disabled","totalPrice","safePrice","Number","invalidAmount","invalidLimitPrice","valid","invalidMarketPrice","handleEnterPress","event","key","preventDefault","priceStep","next","nextPriceLimitTruncated","format","priceLimit","to","from","orderTypes","className","isMobileDevice","safeAmount","total","amountPercentageArray","availablePrecision","availableCurrency","priceErrorClass","submitButtonText","currency","toUpperCase","map","PureComponent"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n    FilterPrice,\n    PriceValidation,\n    validatePriceStep,\n} from '../../filters';\nimport { cleanPositiveFloatInput, precisionRegExp } from '../../helpers';\nimport { OrderInput as OrderInputMobile } from '../../mobile/components';\nimport { Decimal } from '../Decimal';\nimport { DropdownComponent } from '../Dropdown';\nimport { OrderProps } from '../Order';\nimport { OrderInput } from '../OrderInput';\nimport { PercentageButton } from '../PercentageButton';\n\ntype OnSubmitCallback = (order: OrderProps) => void;\ntype DropdownElem = number | string | React.ReactNode;\ntype FormType = 'buy' | 'sell';\n\nexport interface OrderFormProps {\n    /**\n     * Price that is applied during total order amount calculation when type is Market\n     */\n    priceMarket: number;\n    /**\n     * Price that is applied during total order amount calculation when type is Market\n     */\n    priceLimit?: number;\n    /**\n     * Type of form, can be 'buy' or 'cell'\n     */\n    type: FormType;\n    /**\n     * Available types of order\n     */\n    orderTypes: DropdownElem[];\n    /**\n     * Available types of order without translations\n     */\n    orderTypesIndex: DropdownElem[];\n    /**\n     * Additional class name. By default element receives `cr-order` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * Name of currency for price field\n     */\n    from: string;\n    /**\n     * Name of currency for amount field\n     */\n    to: string;\n    /**\n     * Amount of money in a wallet\n     */\n    available?: number;\n    /**\n     * Precision of amount, total, available, fee value\n     */\n    currentMarketAskPrecision: number;\n    /**\n     * Precision of price value\n     */\n    currentMarketBidPrecision: number;\n    /**\n     * Whether order is disabled to execute\n     */\n    disabled?: boolean;\n    /**\n     * Callback that is called when form is submitted\n     */\n    onSubmit: OnSubmitCallback;\n    /**\n     * start handling change price\n     */\n    listenInputPrice?: () => void;\n    totalPrice: number;\n    amount: string;\n    isMobileDevice?: boolean;\n    currentMarketFilters: FilterPrice[];\n    handleAmountChange: (amount: string, type: FormType) => void;\n    handleChangeAmountByButton: (value: number, orderType: string | React.ReactNode, price: string, type: string) => void;\n    translate: (id: string, value?: any) => string;\n}\n\ninterface OrderFormState {\n    orderType: string | React.ReactNode;\n    price: string;\n    priceMarket: number;\n    isPriceValid: PriceValidation;\n    amountFocused: boolean;\n    priceFocused: boolean;\n}\n\nconst handleSetValue = (value: string | number | undefined, defaultValue: string) => (\n    value || defaultValue\n);\n\nexport class OrderForm extends React.PureComponent<OrderFormProps, OrderFormState> {\n    constructor(props: OrderFormProps) {\n        super(props);\n        this.state = {\n            orderType: 'Limit',\n            price: '',\n            priceMarket: this.props.priceMarket,\n            isPriceValid: {\n                valid: true,\n                priceStep: 0,\n            },\n            priceFocused: false,\n            amountFocused: false,\n        };\n    }\n\n    public componentWillReceiveProps(next: OrderFormProps) {\n        const nextPriceLimitTruncated = Decimal.format(next.priceLimit, this.props.currentMarketBidPrecision);\n\n        if (this.state.orderType === 'Limit' && next.priceLimit && nextPriceLimitTruncated !== this.state.price) {\n            this.handlePriceChange(nextPriceLimitTruncated);\n        }\n\n        if (this.state.priceMarket !== next.priceMarket) {\n            this.setState({\n                priceMarket: next.priceMarket,\n            });\n        }\n\n        if (this.props.to !== next.to || this.props.from !== next.from) {\n            this.setState({ price: '' });\n            this.props.handleAmountChange('', next.type);\n        }\n    }\n\n    public render() {\n        const {\n            type,\n            orderTypes,\n            className,\n            from,\n            to,\n            available,\n            currentMarketAskPrecision,\n            currentMarketBidPrecision,\n            totalPrice,\n            amount,\n            isMobileDevice,\n            translate,\n        } = this.props;\n        const {\n            orderType,\n            price,\n            priceMarket,\n            isPriceValid,\n            priceFocused,\n            amountFocused,\n        } = this.state;\n        const safeAmount = Number(amount) || 0;\n        const safePrice = totalPrice / Number(amount) || priceMarket;\n\n        const total = orderType === 'Market'\n            ? totalPrice : safeAmount * (Number(price) || 0);\n        const amountPercentageArray = [0.25, 0.5, 0.75, 1];\n\n        const availablePrecision = type === 'buy' ? currentMarketBidPrecision : currentMarketAskPrecision;\n        const availableCurrency = type === 'buy' ? from : to;\n\n        const priceErrorClass = classnames('error-message', {\n            'error-message--visible': (priceFocused || isMobileDevice) && !isPriceValid.valid,\n        });\n\n        const priceText = this.props.translate('page.body.trade.header.newOrder.content.price');\n        const amountText = this.props.translate('page.body.trade.header.newOrder.content.amount');\n        const submitButtonText = translate(`page.body.trade.header.newOrder.content.tabs.${type}`);\n\n        return (\n            <div className={classnames('cr-order-form', className)} onKeyPress={this.handleEnterPress}>\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__dropdown__label\">\n                        {translate('page.body.trade.header.newOrder.content.orderType')}\n                    </div>\n                    <DropdownComponent list={orderTypes} onSelect={this.handleOrderTypeChange} placeholder=\"\"/>\n                </div>\n                {orderType === 'Limit' ? (\n                    <div className=\"cr-order-item\">\n                        {isMobileDevice ? (\n                            <OrderInputMobile\n                                label={priceText}\n                                placeholder={translate('page.mobile.order.price.placeholder', { currency: from ? from.toUpperCase() : '' })}\n                                value={price || ''}\n                                isFocused={priceFocused}\n                                precision={currentMarketBidPrecision}\n                                handleChangeValue={this.handlePriceChange}\n                                handleFocusInput={this.handleFieldFocus}\n                            />\n                        ) : (\n                            <OrderInput\n                                currency={from}\n                                label={priceText}\n                                placeholder={priceText}\n                                value={price || ''}\n                                isFocused={priceFocused}\n                                isWrong={!isPriceValid.valid}\n                                handleChangeValue={this.handlePriceChange}\n                                handleFocusInput={this.handleFieldFocus}\n                            />\n                        )}\n                        <div className={priceErrorClass}>\n                            {translate('page.body.trade.header.newOrder.content.filterPrice', { priceStep: isPriceValid.priceStep })}\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"cr-order-item\">\n                        <div className=\"cr-order-input\">\n                            <fieldset className=\"cr-order-input__fieldset\">\n                                <legend className={'cr-order-input__fieldset__label'}>\n                                    {priceText}\n                                </legend>\n                                <div className=\"cr-order-input__fieldset__input\">\n                                    &asymp;<span className=\"cr-order-input__fieldset__input__price\">\n                                        {handleSetValue(Decimal.format(safePrice, currentMarketBidPrecision, ','), '0')}\n                                    </span>\n                                </div>\n                            </fieldset>\n                            <div className=\"cr-order-input__crypto-icon\">\n                                {from.toUpperCase()}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"cr-order-item\">\n                    {isMobileDevice ? (\n                        <OrderInputMobile\n                            label={amountText}\n                            placeholder={translate('page.mobile.order.amount.placeholder', { currency: to ? to.toUpperCase() : '' })}\n                            value={amount || ''}\n                            isFocused={amountFocused}\n                            precision={currentMarketAskPrecision}\n                            handleChangeValue={this.handleAmountChange}\n                            handleFocusInput={this.handleFieldFocus}\n                        />\n                    ) : (\n                        <OrderInput\n                            currency={to}\n                            label={amountText}\n                            placeholder={amountText}\n                            value={amount || ''}\n                            isFocused={amountFocused}\n                            handleChangeValue={this.handleAmountChange}\n                            handleFocusInput={this.handleFieldFocus}\n                        />\n                    )}\n                </div>\n\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__percentage-buttons\">\n                        {\n                            amountPercentageArray.map((value, index) => <PercentageButton\n                                value={value}\n                                key={index}\n                                onClick={this.handleChangeAmountByButton}\n                            />)\n                        }\n                    </div>\n                </div>\n\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__total\">\n                        <label className=\"cr-order-item__total__label\">\n                            {translate('page.body.trade.header.newOrder.content.total')}\n                        </label>\n                        <div className=\"cr-order-item__total__content\">\n                            <span className=\"cr-order-item__total__content__amount\">\n                                {orderType === 'Market' ? <span>&asymp;</span> : null}\n                                {Decimal.format(total, currentMarketAskPrecision + currentMarketBidPrecision, ',')}\n                            </span>\n                            <span className=\"cr-order-item__total__content__currency\">\n                                {from.toUpperCase()}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__available\">\n                        <label className=\"cr-order-item__available__label\">\n                            {translate('page.body.trade.header.newOrder.content.available')}\n                        </label>\n                        <div className=\"cr-order-item__available__content\">\n                            <span className=\"cr-order-item__available__content__amount\">\n                                {available ? Decimal.format(available, availablePrecision, ',') : ''}\n                            </span>\n                            <span className=\"cr-order-item__available__content__currency\">\n                                {available ? availableCurrency.toUpperCase() : ''}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cr-order-item\">\n                    <Button\n                        block={true}\n                        className=\"btn-block mr-1 mt-1 btn-lg\"\n                        disabled={this.checkButtonIsDisabled()}\n                        onClick={this.handleSubmit}\n                        size=\"lg\"\n                        variant={type === 'buy' ? 'success' : 'danger'}\n                    >\n                        {submitButtonText || type}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleOrderTypeChange = (index: number) => {\n        const { orderTypesIndex } = this.props;\n        this.setState({\n            orderType: orderTypesIndex[index],\n        });\n    };\n\n    private handleFieldFocus = (field: string | undefined) => {\n        const priceText = this.props.translate('page.body.trade.header.newOrder.content.price');\n        const amountText = this.props.translate('page.body.trade.header.newOrder.content.amount');\n\n        switch (field) {\n            case priceText:\n                this.setState(prev => ({\n                    priceFocused: !prev.priceFocused,\n                }));\n                this.props.listenInputPrice && this.props.listenInputPrice();\n                break;\n            case amountText:\n                this.setState(prev => ({\n                    amountFocused: !prev.amountFocused,\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handlePriceChange = (value: string) => {\n        const { currentMarketBidPrecision, currentMarketFilters } = this.props;\n        const convertedValue = cleanPositiveFloatInput(String(value));\n\n        if (convertedValue.match(precisionRegExp(currentMarketBidPrecision))) {\n            this.setState({\n                price: convertedValue,\n                isPriceValid: validatePriceStep(convertedValue, currentMarketFilters),\n            });\n        }\n\n        this.props.listenInputPrice && this.props.listenInputPrice();\n    };\n\n    private handleAmountChange = (value: string) => {\n        const { currentMarketAskPrecision } = this.props;\n        const convertedValue = cleanPositiveFloatInput(String(value));\n\n        if (convertedValue.match(precisionRegExp(currentMarketAskPrecision))) {\n            this.props.handleAmountChange(convertedValue, this.props.type);\n        }\n    };\n\n    private handleChangeAmountByButton = (value: number) => {\n        const { orderType, price } = this.state;\n\n        this.props.handleChangeAmountByButton(value, orderType, price, this.props.type);\n    };\n\n    private handleSubmit = () => {\n        const { available, type, amount } = this.props;\n        const { price, priceMarket, orderType } = this.state;\n\n        const order = {\n            type,\n            orderType,\n            amount,\n            price: orderType === 'Market' ? priceMarket : price,\n            available: available || 0,\n        };\n\n        this.props.onSubmit(order);\n        this.handlePriceChange('');\n        this.props.handleAmountChange('', this.props.type);\n    };\n\n    private checkButtonIsDisabled = (): boolean => {\n        const { disabled, available, amount, totalPrice } = this.props;\n        const { isPriceValid, orderType, priceMarket, price } = this.state;\n        const safePrice = totalPrice / Number(amount) || priceMarket;\n\n        const invalidAmount = Number(amount) <= 0;\n        const invalidLimitPrice = orderType === 'Limit' && (Number(price) <= 0 || !isPriceValid.valid);\n        const invalidMarketPrice = safePrice <= 0 && orderType === 'Market';\n\n        return disabled || !available || invalidAmount || invalidLimitPrice || invalidMarketPrice;\n    };\n\n    private handleEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n\n            this.handleSubmit();\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}