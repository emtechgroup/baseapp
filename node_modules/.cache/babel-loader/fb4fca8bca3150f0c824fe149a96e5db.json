{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(configsFetchSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { setBlocklistStatus } from '../../blocklistAccess';\nimport { configsData, configsError } from '../actions';\nvar configsOptions = {\n  apiVersion: 'barong'\n};\nexport function configsFetchSaga(action) {\n  var configs;\n  return _regeneratorRuntime.wrap(function configsFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.get(configsOptions), '/identity/configs');\n\n        case 3:\n          configs = _context.sent;\n          _context.next = 6;\n          return put(configsData(configs));\n\n        case 6:\n          _context.next = 8;\n          return put(setBlocklistStatus({\n            status: 'allowed'\n          }));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: configsError\n            }\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/configs/sagas/configsFetchSaga.ts"],"names":["configsFetchSaga","call","put","sendError","API","setBlocklistStatus","configsData","configsError","configsOptions","apiVersion","action","get","configs","status","error","processingType","extraOptions","actionError"],"mappings":";;oDAUiBA,gB;;AAVjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAAwD,YAAxD;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUT,gBAAV,CAA2BU,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMT,IAAI,CAACG,GAAG,CAACO,GAAJ,CAAQH,cAAR,CAAD,EAA0B,mBAA1B,CAAV;;AAFjB;AAEOI,UAAAA,OAFP;AAAA;AAGC,iBAAMV,GAAG,CAACI,WAAW,CAACM,OAAD,CAAZ,CAAT;;AAHD;AAAA;AAIC,iBAAMV,GAAG,CAACG,kBAAkB,CAAC;AAAEQ,YAAAA,MAAM,EAAE;AAAV,WAAD,CAAnB,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMX,GAAG,CAACC,SAAS,CAAC;AAChBW,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEV;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { setBlocklistStatus } from '../../blocklistAccess';\nimport { configsData, configsError, ConfigsFetch } from '../actions';\n\nconst configsOptions: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* configsFetchSaga(action: ConfigsFetch) {\n    try {\n        const configs = yield call(API.get(configsOptions), '/identity/configs');\n        yield put(configsData(configs));\n        yield put(setBlocklistStatus({ status: 'allowed' }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: configsError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}