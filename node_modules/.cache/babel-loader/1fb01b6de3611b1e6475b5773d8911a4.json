{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/Order/index.tsx\";\n\n/* tslint:disable */\nimport * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { formatWithSeparators, Order, Decimal } from '../../components';\nimport { alertPush, selectCurrentPrice, selectDepthAsks, selectDepthBids, selectMobileDeviceState, selectUserLoggedIn, selectWallets, setCurrentPrice as _setCurrentPrice, walletsFetch as _walletsFetch } from '../../modules';\nimport { selectCurrentMarket, selectCurrentMarketFilters, selectMarketTickers } from '../../modules/public/markets';\nimport { orderExecuteFetch, selectOrderExecuteLoading } from '../../modules/user/orders';\n\nvar OrderInsert = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(OrderInsert, _React$PureComponent);\n\n  var _super = _createSuper(OrderInsert);\n\n  function OrderInsert(props) {\n    var _this;\n\n    _classCallCheck(this, OrderInsert);\n\n    _this = _super.call(this, props);\n    _this.orderRef = void 0;\n\n    _this.handleSubmit = function (value) {\n      var currentMarket = _this.props.currentMarket;\n\n      if (!currentMarket) {\n        return;\n      }\n\n      var amount = value.amount,\n          available = value.available,\n          orderType = value.orderType,\n          price = value.price,\n          type = value.type;\n\n      _this.props.setCurrentPrice(0);\n\n      var resultData = {\n        market: currentMarket.id,\n        side: type,\n        volume: amount.toString(),\n        ord_type: orderType.toLowerCase()\n      };\n      var order = orderType === 'Limit' ? _objectSpread(_objectSpread({}, resultData), {}, {\n        price: price.toString()\n      }) : resultData;\n      var orderAllowed = true;\n\n      if (+resultData.volume < +currentMarket.min_amount) {\n        _this.props.pushAlert({\n          message: [_this.translate('error.order.create.minAmount', {\n            amount: Decimal.format(currentMarket.min_amount, currentMarket.amount_precision, ','),\n            currency: currentMarket.base_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (+price < +currentMarket.min_price) {\n        _this.props.pushAlert({\n          message: [_this.translate('error.order.create.minPrice', {\n            price: Decimal.format(currentMarket.min_price, currentMarket.price_precision, ','),\n            currency: currentMarket.quote_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (+currentMarket.max_price && +price > +currentMarket.max_price) {\n        _this.props.pushAlert({\n          message: [_this.translate('error.order.create.maxPrice', {\n            price: Decimal.format(currentMarket.max_price, currentMarket.price_precision, ','),\n            currency: currentMarket.quote_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (+available < +amount * +price && order.side === 'buy' || +available < +amount && order.side === 'sell') {\n        _this.props.pushAlert({\n          message: [_this.translate('error.order.create.available', {\n            available: formatWithSeparators(String(available), ','),\n            currency: order.side === 'buy' ? currentMarket.quote_unit.toUpperCase() : currentMarket.base_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (orderAllowed) {\n        _this.props.orderExecute(order);\n      }\n    };\n\n    _this.getOrderType = function (index, label) {\n      _this.setState({\n        orderSide: label.toLowerCase()\n      });\n    };\n\n    _this.listenInputPrice = function () {\n      _this.setState({\n        priceLimit: undefined\n      });\n\n      _this.props.setCurrentPrice(0);\n    };\n\n    _this.translate = function (id, value) {\n      return _this.props.intl.formatMessage({\n        id\n      }, _objectSpread({}, value));\n    };\n\n    _this.getOrderTypes = [_this.translate('page.body.trade.header.newOrder.content.orderType.limit'), _this.translate('page.body.trade.header.newOrder.content.orderType.market')];\n    _this.state = {\n      orderSide: 'buy',\n      priceLimit: undefined,\n      width: 0\n    };\n    _this.orderRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(OrderInsert, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.wallets.length) {\n        this.props.walletsFetch();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.orderRef.current && this.state.width !== this.orderRef.current.clientWidth) {\n        this.setState({\n          width: this.orderRef.current.clientWidth\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var userLoggedIn = this.props.userLoggedIn;\n\n      if (userLoggedIn && !next.wallets.length) {\n        this.props.walletsFetch();\n      }\n\n      if (+next.currentPrice && next.currentPrice !== this.state.priceLimit) {\n        this.setState({\n          priceLimit: +next.currentPrice\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          asks = _this$props.asks,\n          bids = _this$props.bids,\n          currentMarket = _this$props.currentMarket,\n          currentMarketFilters = _this$props.currentMarketFilters,\n          defaultTabIndex = _this$props.defaultTabIndex,\n          executeLoading = _this$props.executeLoading,\n          isMobileDevice = _this$props.isMobileDevice,\n          marketTickers = _this$props.marketTickers,\n          wallets = _this$props.wallets;\n      var priceLimit = this.state.priceLimit;\n\n      if (!currentMarket) {\n        return null;\n      }\n\n      var walletBase = this.getWallet(currentMarket.base_unit, wallets);\n      var walletQuote = this.getWallet(currentMarket.quote_unit, wallets);\n      var currentTicker = marketTickers[currentMarket.id];\n      var defaultCurrentTicker = {\n        last: '0'\n      };\n      var headerContent = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-table-header__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-title-component\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"page.body.trade.header.newOrder\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 53\n        }\n      })));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'pg-order',\n        ref: this.orderRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      }, this.state.width > 448 ? headerContent : undefined, /*#__PURE__*/React.createElement(Order, {\n        asks: asks,\n        bids: bids,\n        disabled: executeLoading,\n        from: currentMarket.quote_unit,\n        availableBase: this.getAvailableValue(walletBase),\n        availableQuote: this.getAvailableValue(walletQuote),\n        onSubmit: this.handleSubmit,\n        priceMarketBuy: Number((currentTicker || defaultCurrentTicker).last),\n        priceMarketSell: Number((currentTicker || defaultCurrentTicker).last),\n        priceLimit: priceLimit,\n        to: currentMarket.base_unit,\n        handleSendType: this.getOrderType,\n        orderTypes: this.getOrderTypes,\n        currentMarketAskPrecision: currentMarket.amount_precision,\n        currentMarketBidPrecision: currentMarket.price_precision,\n        width: this.state.width,\n        listenInputPrice: this.listenInputPrice,\n        defaultTabIndex: defaultTabIndex,\n        currentMarketFilters: currentMarketFilters,\n        isMobileDevice: isMobileDevice,\n        translate: this.translate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }\n      }), executeLoading && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-order--loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 71\n        }\n      })));\n    }\n  }, {\n    key: \"getWallet\",\n    value: function getWallet(currency, wallets) {\n      var currencyLower = currency.toLowerCase();\n      return wallets.find(function (w) {\n        return w.currency === currencyLower;\n      });\n    }\n  }, {\n    key: \"getAvailableValue\",\n    value: function getAvailableValue(wallet) {\n      return wallet && wallet.balance ? Number(wallet.balance) : 0;\n    }\n  }]);\n\n  return OrderInsert;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    bids: selectDepthBids(state),\n    asks: selectDepthAsks(state),\n    currentMarket: selectCurrentMarket(state),\n    currentMarketFilters: selectCurrentMarketFilters(state),\n    executeLoading: selectOrderExecuteLoading(state),\n    marketTickers: selectMarketTickers(state),\n    wallets: selectWallets(state),\n    currentPrice: selectCurrentPrice(state),\n    userLoggedIn: selectUserLoggedIn(state),\n    isMobileDevice: selectMobileDeviceState(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    walletsFetch: function walletsFetch() {\n      return dispatch(_walletsFetch());\n    },\n    orderExecute: function orderExecute(payload) {\n      return dispatch(orderExecuteFetch(payload));\n    },\n    pushAlert: function pushAlert(payload) {\n      return dispatch(alertPush(payload));\n    },\n    setCurrentPrice: function setCurrentPrice(payload) {\n      return dispatch(_setCurrentPrice(payload));\n    }\n  };\n}; // tslint:disable-next-line no-any\n\n\nvar OrderComponent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OrderInsert));\nexport { OrderComponent };","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/Order/index.tsx"],"names":["React","Spinner","FormattedMessage","injectIntl","connect","formatWithSeparators","Order","Decimal","alertPush","selectCurrentPrice","selectDepthAsks","selectDepthBids","selectMobileDeviceState","selectUserLoggedIn","selectWallets","setCurrentPrice","walletsFetch","selectCurrentMarket","selectCurrentMarketFilters","selectMarketTickers","orderExecuteFetch","selectOrderExecuteLoading","OrderInsert","props","orderRef","handleSubmit","value","currentMarket","amount","available","orderType","price","type","resultData","market","id","side","volume","toString","ord_type","toLowerCase","order","orderAllowed","min_amount","pushAlert","message","translate","format","amount_precision","currency","base_unit","toUpperCase","min_price","price_precision","quote_unit","max_price","String","orderExecute","getOrderType","index","label","setState","orderSide","listenInputPrice","priceLimit","undefined","intl","formatMessage","getOrderTypes","state","width","createRef","wallets","length","current","clientWidth","next","userLoggedIn","currentPrice","asks","bids","currentMarketFilters","defaultTabIndex","executeLoading","isMobileDevice","marketTickers","walletBase","getWallet","walletQuote","currentTicker","defaultCurrentTicker","last","headerContent","getAvailableValue","Number","currencyLower","find","w","wallet","balance","PureComponent","mapStateToProps","mapDispatchToProps","dispatch","payload","OrderComponent"],"mappings":"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","sourcesContent":["/* tslint:disable */\nimport * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport {\n    FormattedMessage,\n    injectIntl,\n} from 'react-intl';\nimport { connect } from 'react-redux';\nimport {\n    formatWithSeparators,\n    Order,\n    OrderProps,\n    WalletItemProps,\n    Decimal,\n} from '../../components';\nimport { FilterPrice } from '../../filters';\nimport { IntlProps } from '../../';\nimport {\n    alertPush,\n    RootState,\n    selectCurrentPrice,\n    selectDepthAsks,\n    selectDepthBids,\n    selectMobileDeviceState,\n    selectUserLoggedIn,\n    selectWallets,\n    setCurrentPrice,\n    Wallet,\n    walletsFetch,\n} from '../../modules';\nimport {\n    Market,\n    selectCurrentMarket,\n    selectCurrentMarketFilters,\n    selectMarketTickers,\n} from '../../modules/public/markets';\nimport {\n    orderExecuteFetch,\n    selectOrderExecuteLoading,\n} from '../../modules/user/orders';\n\ninterface ReduxProps {\n    currentMarket: Market | undefined;\n    currentMarketFilters: FilterPrice[];\n    executeLoading: boolean;\n    marketTickers: {\n        [key: string]: {\n            last: string;\n        },\n    };\n    bids: string[][];\n    asks: string[][];\n    wallets: WalletItemProps[];\n    currentPrice: number | undefined;\n    isMobileDevice: boolean;\n}\n\ninterface StoreProps {\n    orderSide: string;\n    priceLimit: number | undefined;\n    width: number;\n}\n\ninterface DispatchProps {\n    walletsFetch: typeof walletsFetch;\n    setCurrentPrice: typeof setCurrentPrice;\n    orderExecute: typeof orderExecuteFetch;\n    pushAlert: typeof alertPush;\n}\n\ninterface OwnProps {\n    userLoggedIn: boolean;\n    currentPrice: string;\n    defaultTabIndex?: number;\n}\n\ntype Props = ReduxProps & DispatchProps & OwnProps & IntlProps;\n\nclass OrderInsert extends React.PureComponent<Props, StoreProps> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            orderSide: 'buy',\n            priceLimit: undefined,\n            width: 0,\n        };\n\n        this.orderRef = React.createRef();\n    }\n\n    private orderRef;\n\n    public componentDidMount() {\n        if (!this.props.wallets.length) {\n            this.props.walletsFetch();\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.orderRef.current && this.state.width !== this.orderRef.current.clientWidth) {\n            this.setState({\n                width: this.orderRef.current.clientWidth,\n            });\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        const { userLoggedIn } = this.props;\n\n        if (userLoggedIn && !next.wallets.length) {\n            this.props.walletsFetch();\n        }\n\n        if (+next.currentPrice && next.currentPrice !== this.state.priceLimit) {\n            this.setState({\n                priceLimit: +next.currentPrice,\n            });\n        }\n    }\n\n    public render() {\n        const {\n            asks,\n            bids,\n            currentMarket,\n            currentMarketFilters,\n            defaultTabIndex,\n            executeLoading,\n            isMobileDevice,\n            marketTickers,\n            wallets,\n        } = this.props;\n        const { priceLimit } = this.state;\n\n        if (!currentMarket) {\n            return null;\n        }\n\n        const walletBase = this.getWallet(currentMarket.base_unit, wallets);\n        const walletQuote = this.getWallet(currentMarket.quote_unit, wallets);\n\n        const currentTicker = marketTickers[currentMarket.id];\n        const defaultCurrentTicker = { last: '0' };\n        const headerContent = (\n            <div className=\"cr-table-header__content\">\n                <div className=\"cr-title-component\"><FormattedMessage id=\"page.body.trade.header.newOrder\" /></div>\n            </div>\n        );\n\n        return (\n            <div className={'pg-order'} ref={this.orderRef}>\n                {this.state.width > 448 ? headerContent : undefined}\n                <Order\n                    asks={asks}\n                    bids={bids}\n                    disabled={executeLoading}\n                    from={currentMarket.quote_unit}\n                    availableBase={this.getAvailableValue(walletBase)}\n                    availableQuote={this.getAvailableValue(walletQuote)}\n                    onSubmit={this.handleSubmit}\n                    priceMarketBuy={Number((currentTicker || defaultCurrentTicker).last)}\n                    priceMarketSell={Number((currentTicker || defaultCurrentTicker).last)}\n                    priceLimit={priceLimit}\n                    to={currentMarket.base_unit}\n                    handleSendType={this.getOrderType}\n                    orderTypes={this.getOrderTypes}\n                    currentMarketAskPrecision={currentMarket.amount_precision}\n                    currentMarketBidPrecision={currentMarket.price_precision}\n                    width={this.state.width}\n                    listenInputPrice={this.listenInputPrice}\n                    defaultTabIndex={defaultTabIndex}\n                    currentMarketFilters={currentMarketFilters}\n                    isMobileDevice={isMobileDevice}\n                    translate={this.translate}\n                />\n                {executeLoading && <div className=\"pg-order--loading\"><Spinner animation=\"border\" variant=\"primary\" /></div>}\n            </div>\n        );\n    }\n\n    private handleSubmit = (value: OrderProps) => {\n        const { currentMarket } = this.props;\n\n        if (!currentMarket) {\n            return;\n        }\n\n        const {\n            amount,\n            available,\n            orderType,\n            price,\n            type,\n        } = value;\n\n        this.props.setCurrentPrice(0);\n\n        const resultData = {\n            market: currentMarket.id,\n            side: type,\n            volume: amount.toString(),\n            ord_type: (orderType as string).toLowerCase(),\n        };\n\n        const order = orderType === 'Limit' ? { ...resultData, price: price.toString() } : resultData;\n        let orderAllowed = true;\n\n        if (+resultData.volume < +currentMarket.min_amount) {\n            this.props.pushAlert({\n                message: [this.translate(\n                    'error.order.create.minAmount',\n                    {\n                        amount: Decimal.format(currentMarket.min_amount, currentMarket.amount_precision, ',' ),\n                        currency: currentMarket.base_unit.toUpperCase(),\n                    },\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if (+price < +currentMarket.min_price) {\n            this.props.pushAlert({\n                message: [this.translate(\n                    'error.order.create.minPrice',\n                    {\n                        price: Decimal.format(currentMarket.min_price, currentMarket.price_precision, ','),\n                        currency: currentMarket.quote_unit.toUpperCase(),\n                    },\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if (+currentMarket.max_price && +price > +currentMarket.max_price) {\n            this.props.pushAlert({\n                message: [this.translate(\n                    'error.order.create.maxPrice',\n                    {\n                        price: Decimal.format(currentMarket.max_price, currentMarket.price_precision, ','),\n                        currency: currentMarket.quote_unit.toUpperCase(),\n                    },\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if ((+available < (+amount * +price) && order.side === 'buy') ||\n            (+available < +amount && order.side === 'sell')) {\n            this.props.pushAlert({\n                message: [this.translate(\n                    'error.order.create.available',\n                    {\n                        available: formatWithSeparators(String(available), ','),\n                        currency: order.side === 'buy' ? (\n                            currentMarket.quote_unit.toUpperCase()\n                        ) : (\n                            currentMarket.base_unit.toUpperCase()\n                        ),\n                    },\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if (orderAllowed) {\n            this.props.orderExecute(order);\n        }\n    };\n\n    private getWallet(currency: string, wallets: WalletItemProps[]) {\n        const currencyLower = currency.toLowerCase();\n\n        return wallets.find(w => w.currency === currencyLower) as Wallet;\n    }\n\n    private getOrderType = (index: number, label: string) => {\n        this.setState({\n            orderSide: label.toLowerCase(),\n        });\n    };\n\n    private getAvailableValue(wallet: Wallet | undefined) {\n        return wallet && wallet.balance ? Number(wallet.balance) : 0;\n    }\n\n    private listenInputPrice = () => {\n        this.setState({\n            priceLimit: undefined,\n        });\n        this.props.setCurrentPrice(0);\n    };\n\n    private translate = (id: string, value?: any) => this.props.intl.formatMessage({ id }, { ...value });\n\n    private getOrderTypes = [\n        this.translate('page.body.trade.header.newOrder.content.orderType.limit'),\n        this.translate('page.body.trade.header.newOrder.content.orderType.market'),\n    ];\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    bids: selectDepthBids(state),\n    asks: selectDepthAsks(state),\n    currentMarket: selectCurrentMarket(state),\n    currentMarketFilters: selectCurrentMarketFilters(state),\n    executeLoading: selectOrderExecuteLoading(state),\n    marketTickers: selectMarketTickers(state),\n    wallets: selectWallets(state),\n    currentPrice: selectCurrentPrice(state),\n    userLoggedIn: selectUserLoggedIn(state),\n    isMobileDevice: selectMobileDeviceState(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    walletsFetch: () => dispatch(walletsFetch()),\n    orderExecute: payload => dispatch(orderExecuteFetch(payload)),\n    pushAlert: payload => dispatch(alertPush(payload)),\n    setCurrentPrice: payload => dispatch(setCurrentPrice(payload)),\n});\n\n// tslint:disable-next-line no-any\nconst OrderComponent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OrderInsert as any)) as any;\n\nexport {\n    OrderComponent,\n};\n"]},"metadata":{},"sourceType":"module"}