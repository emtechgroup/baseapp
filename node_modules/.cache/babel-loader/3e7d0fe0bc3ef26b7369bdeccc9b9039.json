{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/screens/EmailVerification/index.tsx\";\nimport * as React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { Captcha } from '../../components';\nimport { EMAIL_REGEX, setDocumentTitle } from '../../helpers';\nimport { emailVerificationFetch, resetCaptchaState, selectCaptchaResponse, selectConfigs, selectCurrentLanguage, selectGeetestCaptchaSuccess, selectMobileDeviceState, selectRecaptchaSuccess, selectSendEmailVerificationError, selectSendEmailVerificationLoading, selectSendEmailVerificationSuccess, selectUserInfo } from '../../modules';\n\nvar EmailVerificationComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(EmailVerificationComponent, _React$Component);\n\n  var _super = _createSuper(EmailVerificationComponent);\n\n  function EmailVerificationComponent() {\n    var _this;\n\n    _classCallCheck(this, EmailVerificationComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.translate = function (id) {\n      return _this.props.intl.formatMessage({\n        id\n      });\n    };\n\n    _this.renderCaptcha = function () {\n      var _this$props = _this.props,\n          error = _this$props.error,\n          success = _this$props.success;\n      return /*#__PURE__*/React.createElement(Captcha, {\n        error: error,\n        success: success,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      });\n    };\n\n    _this.handleClick = function () {\n      var _this$props2 = _this.props,\n          configs = _this$props2.configs,\n          captcha_response = _this$props2.captcha_response;\n\n      switch (configs.captcha_type) {\n        case 'recaptcha':\n        case 'geetest':\n          _this.props.emailVerificationFetch({\n            email: _this.props.user.email,\n            captcha_response\n          });\n\n          break;\n\n        default:\n          _this.props.emailVerificationFetch({\n            email: _this.props.user.email\n          });\n\n          break;\n      }\n\n      _this.props.resetCaptchaState();\n    };\n\n    _this.disableButton = function () {\n      var _this$props3 = _this.props,\n          configs = _this$props3.configs,\n          user = _this$props3.user,\n          geetestCaptchaSuccess = _this$props3.geetestCaptchaSuccess,\n          reCaptchaSuccess = _this$props3.reCaptchaSuccess;\n\n      if (user.email && !user.email.match(EMAIL_REGEX)) {\n        return true;\n      }\n\n      if (configs.captcha_type === 'recaptcha' && !reCaptchaSuccess) {\n        return true;\n      }\n\n      if (configs.captcha_type === 'geetest' && !geetestCaptchaSuccess) {\n        return true;\n      }\n\n      return false;\n    };\n\n    return _this;\n  }\n\n  _createClass(EmailVerificationComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Email verification');\n\n      if (!this.props.user.email.length && !this.props.emailVerificationLoading) {\n        this.props.history.push('/signin');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          emailVerificationLoading = _this$props4.emailVerificationLoading,\n          isMobileDevice = _this$props4.isMobileDevice;\n      var title = this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.header'\n      });\n      var text = this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.body'\n      });\n      var button = this.props.intl.formatMessage({\n        id: 'page.resendConfirmation'\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, !isMobileDevice && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 41\n        }\n      }, title), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification-body-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }\n      }, text), this.renderCaptcha(), !isMobileDevice && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification-body-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }\n      }, emailVerificationLoading ? /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 65\n        }\n      }) : /*#__PURE__*/React.createElement(\"button\", {\n        className: \"pg-emailverification-body-container-button\",\n        onClick: this.handleClick,\n        disabled: this.disableButton(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 41\n        }\n      }, button)), isMobileDevice && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-emailverification-body-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 30\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        type: \"button\",\n        onClick: this.handleClick,\n        size: \"lg\",\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 31\n        }\n      }, this.props.intl.formatMessage({\n        id: 'page.mobile.reset.header'\n      }))))));\n    }\n  }]);\n\n  return EmailVerificationComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    emailVerificationLoading: selectSendEmailVerificationLoading(state),\n    i18n: selectCurrentLanguage(state),\n    isMobileDevice: selectMobileDeviceState(state),\n    configs: selectConfigs(state),\n    error: selectSendEmailVerificationError(state),\n    success: selectSendEmailVerificationSuccess(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state),\n    user: selectUserInfo(state)\n  };\n};\n\nvar mapDispatchToProps = {\n  emailVerificationFetch,\n  resetCaptchaState\n};\nexport var EmailVerificationScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(EmailVerificationComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/screens/EmailVerification/index.tsx"],"names":["React","Button","Spinner","injectIntl","connect","withRouter","compose","Captcha","EMAIL_REGEX","setDocumentTitle","emailVerificationFetch","resetCaptchaState","selectCaptchaResponse","selectConfigs","selectCurrentLanguage","selectGeetestCaptchaSuccess","selectMobileDeviceState","selectRecaptchaSuccess","selectSendEmailVerificationError","selectSendEmailVerificationLoading","selectSendEmailVerificationSuccess","selectUserInfo","EmailVerificationComponent","translate","id","props","intl","formatMessage","renderCaptcha","error","success","handleClick","configs","captcha_response","captcha_type","email","user","disableButton","geetestCaptchaSuccess","reCaptchaSuccess","match","length","emailVerificationLoading","history","push","isMobileDevice","title","text","button","Component","mapStateToProps","state","i18n","mapDispatchToProps","EmailVerificationScreen"],"mappings":"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","sourcesContent":["import { History } from 'history';\nimport * as React from 'react';\nimport {Button, Spinner} from 'react-bootstrap';\nimport {\n    injectIntl,\n} from 'react-intl';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { Captcha } from '../../components';\nimport { EMAIL_REGEX, setDocumentTitle } from '../../helpers';\nimport {\n    Configs,\n    emailVerificationFetch,\n    GeetestCaptchaResponse,\n    resetCaptchaState,\n    RootState,\n    selectCaptchaResponse,\n    selectConfigs,\n    selectCurrentLanguage,\n    selectGeetestCaptchaSuccess,\n    selectMobileDeviceState,\n    selectRecaptchaSuccess,\n    selectSendEmailVerificationError,\n    selectSendEmailVerificationLoading,\n    selectSendEmailVerificationSuccess,\n    selectUserInfo,\n    User,\n} from '../../modules';\nimport { CommonError } from '../../modules/types';\n\ninterface OwnProps {\n    history: History;\n    location: {\n        state: {\n            email: string;\n        };\n    };\n    success: boolean;\n    error?: CommonError;\n}\n\ninterface DispatchProps {\n    emailVerificationFetch: typeof emailVerificationFetch;\n    resetCaptchaState: typeof resetCaptchaState;\n}\n\ninterface ReduxProps {\n    emailVerificationLoading: boolean;\n    isMobileDevice: boolean;\n    configs: Configs;\n    captcha_response?: string | GeetestCaptchaResponse;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n    user: User;\n}\n\ntype Props = DispatchProps & ReduxProps & OwnProps & IntlProps;\n\nclass EmailVerificationComponent extends React.Component<Props> {\n    public componentDidMount() {\n        setDocumentTitle('Email verification');\n        if (!this.props.user.email.length && !this.props.emailVerificationLoading) {\n            this.props.history.push('/signin');\n        }\n    }\n\n    public translate = (id: string) => this.props.intl.formatMessage({ id });\n\n    public renderCaptcha = () => {\n        const { error, success } = this.props;\n\n        return (\n            <Captcha\n                error={error}\n                success={success}\n            />\n        );\n    };\n\n    public render() {\n        const { emailVerificationLoading, isMobileDevice } = this.props;\n\n        const title = this.props.intl.formatMessage({ id: 'page.header.signUp.modal.header' });\n        const text = this.props.intl.formatMessage({ id: 'page.header.signUp.modal.body' });\n        const button = this.props.intl.formatMessage({ id: 'page.resendConfirmation' });\n\n        return (\n            <div className=\"pg-emailverification-container\">\n                <div className=\"pg-emailverification\">\n                    {!isMobileDevice && <div className=\"pg-emailverification-title\">{title}</div>}\n                    <div className=\"pg-emailverification-body\">\n                        <div className=\"pg-emailverification-body-text\">{text}</div>\n                        {this.renderCaptcha()}\n                        {\n                            !isMobileDevice && (\n                                <div className=\"pg-emailverification-body-container\">\n                                    {emailVerificationLoading ? <Spinner animation=\"border\" variant=\"primary\"/> :\n                                        <button className=\"pg-emailverification-body-container-button\"\n                                                onClick={this.handleClick}\n                                                disabled={this.disableButton()}>{button}</button>}\n                                </div>)\n                        }\n                        {isMobileDevice &&\n                            (<div className=\"pg-emailverification-body-container\">\n                              <Button\n                                block={true}\n                                type=\"button\"\n                                onClick={this.handleClick}\n                                size=\"lg\"\n                                variant=\"primary\"\n                              >\n                                  {this.props.intl.formatMessage({ id:  'page.mobile.reset.header' })}\n                              </Button>\n                            </div>)\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private handleClick = () => {\n        const { configs, captcha_response } = this.props;\n\n        switch (configs.captcha_type) {\n            case 'recaptcha':\n            case 'geetest':\n                this.props.emailVerificationFetch({\n                    email: this.props.user.email,\n                    captcha_response,\n                });\n                break;\n            default:\n                this.props.emailVerificationFetch({\n                    email: this.props.user.email,\n                });\n                break;\n        }\n\n        this.props.resetCaptchaState();\n    };\n\n    private disableButton = (): boolean => {\n        const {\n            configs,\n            user,\n            geetestCaptchaSuccess,\n            reCaptchaSuccess,\n        } = this.props;\n\n        if (user.email && !user.email.match(EMAIL_REGEX)) {\n            return true;\n        }\n\n        if (configs.captcha_type === 'recaptcha' && !reCaptchaSuccess) {\n            return true;\n        }\n\n        if (configs.captcha_type === 'geetest' && !geetestCaptchaSuccess) {\n            return true;\n        }\n\n        return false;\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    emailVerificationLoading: selectSendEmailVerificationLoading(state),\n    i18n: selectCurrentLanguage(state),\n    isMobileDevice: selectMobileDeviceState(state),\n    configs: selectConfigs(state),\n    error: selectSendEmailVerificationError(state),\n    success: selectSendEmailVerificationSuccess(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state),\n    user: selectUserInfo(state),\n});\n\nconst mapDispatchToProps = {\n    emailVerificationFetch,\n    resetCaptchaState,\n};\n\nexport const EmailVerificationScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(EmailVerificationComponent) as React.ComponentClass;\n"]},"metadata":{},"sourceType":"module"}