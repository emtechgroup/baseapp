{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/containers/Confirm/Identity/index.tsx\";\nimport cr from 'classnames';\nimport * as moment from 'moment';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport MaskInput from 'react-maskinput';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { languages } from '../../../api/config';\nimport { CustomInput, DropdownComponent } from '../../../components';\nimport { formatDate, isDateInFuture } from '../../../helpers';\nimport { editIdentity as _editIdentity, labelFetch as _labelFetch, selectCurrentLanguage, selectEditIdentitySuccess, selectLabelData, selectSendIdentitySuccess, selectUserInfo, sendIdentity as _sendIdentity } from '../../../modules';\nimport * as countries from 'i18n-iso-countries';\n\nvar IdentityComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(IdentityComponent, _React$Component);\n\n  var _super = _createSuper(IdentityComponent);\n\n  function IdentityComponent() {\n    var _this;\n\n    _classCallCheck(this, IdentityComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      city: '',\n      countryOfBirth: '',\n      dateOfBirth: '',\n      firstName: '',\n      lastName: '',\n      postcode: '',\n      residentialAddress: '',\n      cityFocused: false,\n      dateOfBirthFocused: false,\n      firstNameFocused: false,\n      lastNameFocused: false,\n      postcodeFocused: false,\n      residentialAddressFocused: false\n    };\n\n    _this.translate = function (e) {\n      return _this.props.intl.formatMessage({\n        id: e\n      });\n    };\n\n    _this.scrollToElement = function (displayedElem) {\n      var element = document.getElementsByClassName('pg-confirm__content-identity__forms__row')[displayedElem];\n      element && element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest'\n      });\n    };\n\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'city':\n            _this.setState({\n              cityFocused: !_this.state.cityFocused\n            });\n\n            _this.scrollToElement(6);\n\n            break;\n\n          case 'dateOfBirth':\n            _this.setState({\n              dateOfBirthFocused: !_this.state.dateOfBirthFocused\n            });\n\n            _this.scrollToElement(2);\n\n            break;\n\n          case 'firstName':\n            _this.setState({\n              firstNameFocused: !_this.state.firstNameFocused\n            });\n\n            _this.scrollToElement(0);\n\n            break;\n\n          case 'lastName':\n            _this.setState({\n              lastNameFocused: !_this.state.lastNameFocused\n            });\n\n            _this.scrollToElement(1);\n\n            break;\n\n          case 'postcode':\n            _this.setState({\n              postcodeFocused: !_this.state.postcodeFocused\n            });\n\n            _this.scrollToElement(7);\n\n            break;\n\n          case 'residentialAddress':\n            _this.setState({\n              residentialAddressFocused: !_this.state.residentialAddressFocused\n            });\n\n            _this.scrollToElement(4);\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    _this.handleChange = function (value, key) {\n      // @ts-ignore\n      _this.setState({\n        [key]: value\n      });\n    };\n\n    _this.handleConfirmEnterPress = function (event) {\n      if (event.key === 'Enter' && !_this.handleCheckButtonDisabled()) {\n        event.preventDefault();\n\n        _this.sendData(event);\n      }\n    };\n\n    _this.handleChangeDate = function (e) {\n      _this.setState({\n        dateOfBirth: formatDate(e.target.value)\n      });\n    };\n\n    _this.selectCountry = function (value) {\n      _this.setState({\n        countryOfBirth: countries.getAlpha2Code(value, _this.props.lang)\n      });\n    };\n\n    _this.handleValidateInput = function (field, value) {\n      switch (field) {\n        case 'firstName':\n          var firstNameRegex = new RegExp(\"^[a-zA-Z]{1,100}$\");\n          return value.match(firstNameRegex) ? true : false;\n\n        case 'lastName':\n          var lastNameRegex = new RegExp(\"^[a-zA-Z]{1,100}$\");\n          return value.match(lastNameRegex) ? true : false;\n\n        case 'residentialAddress':\n          var residentialAddressRegex = new RegExp(\"^[a-zA-Z0-9-,.;/\\\\s]+$\");\n          return value.match(residentialAddressRegex) ? true : false;\n\n        case 'city':\n          var cityRegex = new RegExp(\"^[a-zA-Z]+$\");\n          return value.match(cityRegex) ? true : false;\n\n        case 'postcode':\n          var postcodeRegex = new RegExp(\"^[0-9]{1,12}$\");\n          return value.match(postcodeRegex) ? true : false;\n\n        case 'dateOfBirth':\n          if (value.length === 10) {\n            return moment(value, 'DD/MM/YYYY').unix() < Date.now() / 1000;\n          }\n\n          return false;\n\n        default:\n          return true;\n      }\n    };\n\n    _this.handleCheckButtonDisabled = function () {\n      var _this$state = _this.state,\n          city = _this$state.city,\n          dateOfBirth = _this$state.dateOfBirth,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          postcode = _this$state.postcode,\n          residentialAddress = _this$state.residentialAddress,\n          countryOfBirth = _this$state.countryOfBirth;\n\n      var firstNameValid = _this.handleValidateInput('firstName', firstName);\n\n      var lastNameValid = _this.handleValidateInput('lastName', lastName);\n\n      var residentialAddressValid = _this.handleValidateInput('residentialAddress', residentialAddress);\n\n      var cityValid = _this.handleValidateInput('city', city);\n\n      var postcodeValid = _this.handleValidateInput('postcode', postcode);\n\n      var dateOfBirthValid = _this.handleValidateInput('dateOfBirth', dateOfBirth);\n\n      return !firstNameValid || !lastNameValid || !residentialAddressValid || !countryOfBirth || !cityValid || !postcodeValid || !dateOfBirthValid;\n    };\n\n    _this.sendData = function (event) {\n      event.preventDefault();\n      var _this$props = _this.props,\n          labels = _this$props.labels,\n          user = _this$props.user;\n      var dob = !isDateInFuture(_this.state.dateOfBirth) ? _this.state.dateOfBirth : '';\n      var profileInfo = {\n        first_name: _this.state.firstName,\n        last_name: _this.state.lastName,\n        dob,\n        address: _this.state.residentialAddress,\n        postcode: _this.state.postcode,\n        city: _this.state.city,\n        country: _this.state.countryOfBirth,\n        confirm: true\n      };\n      var isIdentity = labels.length && labels.find(function (w) {\n        return w.key === 'profile' && w.value === 'verified' && w.scope === 'private';\n      });\n      var verifiedProfiles = user.profiles.length ? user.profiles.filter(function (i) {\n        return i.state === 'verified';\n      }) : [];\n      var lastVerifiedProfile = verifiedProfiles.length && verifiedProfiles[verifiedProfiles.length - 1];\n\n      if (!isIdentity && lastVerifiedProfile && lastVerifiedProfile.address) {\n        _this.props.editIdentity(profileInfo);\n      } else {\n        _this.props.sendIdentity(profileInfo);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(IdentityComponent, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prev) {\n      var _this$props2 = this.props,\n          history = _this$props2.history,\n          editSuccess = _this$props2.editSuccess,\n          sendSuccess = _this$props2.sendSuccess;\n\n      if (!prev.editSuccess && editSuccess || !prev.sendSuccess && sendSuccess) {\n        this.props.labelFetch();\n        history.push('/profile');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          editSuccess = _this$props3.editSuccess,\n          sendSuccess = _this$props3.sendSuccess,\n          lang = _this$props3.lang;\n      var _this$state2 = this.state,\n          city = _this$state2.city,\n          dateOfBirth = _this$state2.dateOfBirth,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          postcode = _this$state2.postcode,\n          residentialAddress = _this$state2.residentialAddress,\n          cityFocused = _this$state2.cityFocused,\n          dateOfBirthFocused = _this$state2.dateOfBirthFocused,\n          firstNameFocused = _this$state2.firstNameFocused,\n          lastNameFocused = _this$state2.lastNameFocused,\n          postcodeFocused = _this$state2.postcodeFocused,\n          residentialAddressFocused = _this$state2.residentialAddressFocused;\n      var firstNameGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n        'pg-confirm__content-identity__forms__row__content--focused': firstNameFocused,\n        'pg-confirm__content-identity__forms__row__content--wrong': firstName && !this.handleValidateInput('firstName', firstName)\n      });\n      var lastNameGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n        'pg-confirm__content-identity__forms__row__content--focused': lastNameFocused,\n        'pg-confirm__content-identity__forms__row__content--wrong': lastName && !this.handleValidateInput('lastName', lastName)\n      });\n      var dateOfBirthGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n        'pg-confirm__content-identity__forms__row__content--focused': dateOfBirthFocused,\n        'pg-confirm__content-identity__forms__row__content--wrong': dateOfBirth && !this.handleValidateInput('dateOfBirth', dateOfBirth)\n      });\n      var residentialAddressGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n        'pg-confirm__content-identity__forms__row__content--focused': residentialAddressFocused,\n        'pg-confirm__content-identity__forms__row__content--wrong': residentialAddress && !this.handleValidateInput('residentialAddress', residentialAddress)\n      });\n      var cityGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n        'pg-confirm__content-identity__forms__row__content--focused': cityFocused,\n        'pg-confirm__content-identity__forms__row__content--wrong': city && !this.handleValidateInput('city', city)\n      });\n      var postcodeGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n        'pg-confirm__content-identity__forms__row__content--focused': postcodeFocused,\n        'pg-confirm__content-identity__forms__row__content--wrong': postcode && !this.handleValidateInput('postcode', postcode)\n      });\n      /* tslint:disable */\n\n      languages.map(function (l) {\n        return countries.registerLocale(require(\"i18n-iso-countries/langs/\".concat(l, \".json\")));\n      });\n      /* tslint:enable */\n\n      var dataCountries = Object.values(countries.getNames(lang));\n\n      var onSelectCountry = function onSelectCountry(value) {\n        return _this2.selectCountry(dataCountries[value]);\n      };\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"pg-confirm__content-identity\",\n        autoComplete: \"on\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms__row input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: firstNameGroupClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        name: \"fname\",\n        autoComplete: \"given-name\",\n        inputValue: firstName,\n        placeholder: this.translate('page.body.kyc.identity.firstName'),\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'firstName');\n        },\n        autoFocus: true,\n        label: this.translate('page.body.kyc.identity.firstName'),\n        defaultLabel: '',\n        handleFocusInput: this.handleFieldFocus('firstName'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: lastNameGroupClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        name: \"lname\",\n        autoComplete: \"family-name\",\n        inputValue: lastName,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'lastName');\n        },\n        placeholder: this.translate('page.body.kyc.identity.lastName'),\n        label: this.translate('page.body.kyc.identity.lastName'),\n        defaultLabel: '',\n        handleFocusInput: this.handleFieldFocus('lastName'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms__row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: dateOfBirthGroupClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }\n      }, dateOfBirth ? /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 44\n        }\n      }, this.translate('page.body.kyc.identity.dateOfBirth')) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group input-group-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(MaskInput, {\n        className: \"pg-confirm__content-identity__forms__row__content-number\",\n        maskString: \"00/00/0000\",\n        mask: \"00/00/0000\",\n        onChange: this.handleChangeDate,\n        onFocus: this.handleFieldFocus('dateOfBirth'),\n        onBlur: this.handleFieldFocus('dateOfBirth'),\n        value: dateOfBirth,\n        placeholder: this.translate('page.body.kyc.identity.dateOfBirth.placeholder'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 33\n        }\n      }))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms__row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms__row__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DropdownComponent, {\n        className: \"pg-confirm__content-identity__forms__row__content-number-dropdown\",\n        list: dataCountries,\n        onSelect: onSelectCountry,\n        placeholder: this.translate('page.body.kyc.identity.CoR'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms__row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: residentialAddressGroupClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        name: \"ship-address\",\n        autoComplete: \"shipping street-address\",\n        inputValue: residentialAddress,\n        placeholder: this.translate('page.body.kyc.identity.residentialAddress'),\n        label: this.translate('page.body.kyc.identity.residentialAddress'),\n        defaultLabel: '',\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'residentialAddress');\n        },\n        handleFocusInput: this.handleFieldFocus('residentialAddress'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity__forms__row input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: cityGroupClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        name: \"ship-city\",\n        autoComplete: \"shipping locality\",\n        inputValue: city,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'city');\n        },\n        placeholder: this.translate('page.body.kyc.identity.city'),\n        label: this.translate('page.body.kyc.identity.city'),\n        defaultLabel: '',\n        handleFocusInput: this.handleFieldFocus('city'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: postcodeGroupClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        label: this.translate('page.body.kyc.identity.postcode'),\n        defaultLabel: this.translate('page.body.kyc.identity.postcode'),\n        type: \"string\",\n        name: \"ship-zip\",\n        autoComplete: \"shipping postal-code\",\n        inputValue: postcode,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'postcode');\n        },\n        onKeyPress: this.handleConfirmEnterPress,\n        placeholder: this.translate('page.body.kyc.identity.postcode'),\n        handleFocusInput: this.handleFieldFocus('postcode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }\n      })))), sendSuccess && !editSuccess && /*#__PURE__*/React.createElement(\"p\", {\n        className: \"pg-confirm__success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 47\n        }\n      }, this.translate(sendSuccess)), editSuccess && !sendSuccess && /*#__PURE__*/React.createElement(\"p\", {\n        className: \"pg-confirm__success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 47\n        }\n      }, this.translate(editSuccess)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-deep\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.sendData,\n        disabled: this.handleCheckButtonDisabled(),\n        size: \"lg\",\n        variant: \"primary\",\n        type: \"submit\",\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }\n      }, this.translate('page.body.kyc.next'))));\n    }\n  }]);\n\n  return IdentityComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    editSuccess: selectEditIdentitySuccess(state),\n    sendSuccess: selectSendIdentitySuccess(state),\n    lang: selectCurrentLanguage(state),\n    labels: selectLabelData(state),\n    user: selectUserInfo(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    editIdentity: function editIdentity(payload) {\n      return dispatch(_editIdentity(payload));\n    },\n    sendIdentity: function sendIdentity(payload) {\n      return dispatch(_sendIdentity(payload));\n    },\n    labelFetch: function labelFetch() {\n      return dispatch(_labelFetch());\n    }\n  };\n};\n\nexport var Identity = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(IdentityComponent); // tslint:disable-line","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/Confirm/Identity/index.tsx"],"names":["cr","moment","React","Button","injectIntl","MaskInput","connect","withRouter","compose","languages","CustomInput","DropdownComponent","formatDate","isDateInFuture","editIdentity","labelFetch","selectCurrentLanguage","selectEditIdentitySuccess","selectLabelData","selectSendIdentitySuccess","selectUserInfo","sendIdentity","countries","IdentityComponent","state","city","countryOfBirth","dateOfBirth","firstName","lastName","postcode","residentialAddress","cityFocused","dateOfBirthFocused","firstNameFocused","lastNameFocused","postcodeFocused","residentialAddressFocused","translate","e","props","intl","formatMessage","id","scrollToElement","displayedElem","element","document","getElementsByClassName","scrollIntoView","behavior","block","inline","handleFieldFocus","field","setState","handleChange","value","key","handleConfirmEnterPress","event","handleCheckButtonDisabled","preventDefault","sendData","handleChangeDate","target","selectCountry","getAlpha2Code","lang","handleValidateInput","firstNameRegex","RegExp","match","lastNameRegex","residentialAddressRegex","cityRegex","postcodeRegex","length","unix","Date","now","firstNameValid","lastNameValid","residentialAddressValid","cityValid","postcodeValid","dateOfBirthValid","labels","user","dob","profileInfo","first_name","last_name","address","country","confirm","isIdentity","find","w","scope","verifiedProfiles","profiles","filter","i","lastVerifiedProfile","prev","history","editSuccess","sendSuccess","push","firstNameGroupClass","lastNameGroupClass","dateOfBirthGroupClass","residentialAddressGroupClass","cityGroupClass","postcodeGroupClass","map","l","registerLocale","require","dataCountries","Object","values","getNames","onSelectCountry","Component","mapStateToProps","mapDispatchToProps","dispatch","payload","Identity"],"mappings":"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","sourcesContent":["import cr from 'classnames';\nimport * as moment from 'moment';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport MaskInput from 'react-maskinput';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../../';\nimport { languages } from '../../../api/config';\nimport { CustomInput, DropdownComponent } from '../../../components';\nimport { formatDate, isDateInFuture } from '../../../helpers';\nimport {\n    editIdentity,\n    Label,\n    labelFetch,\n    RootState,\n    selectCurrentLanguage,\n    selectEditIdentitySuccess,\n    selectLabelData,\n    selectSendIdentitySuccess,\n    selectUserInfo,\n    sendIdentity,\n    User,\n} from '../../../modules';\nimport { IdentityData } from '../../../modules/user/kyc/identity/types';\n\nimport * as countries from 'i18n-iso-countries';\n\ninterface ReduxProps {\n    editSuccess?: string;\n    sendSuccess?: string;\n    lang: string;\n    labels: Label[];\n    user: User;\n}\n\ninterface DispatchProps {\n    editIdentity: typeof editIdentity;\n    sendIdentity: typeof sendIdentity;\n    labelFetch: typeof labelFetch;\n}\n\ninterface OnChangeEvent {\n    target: {\n        value: string;\n    };\n}\n\ninterface IdentityState {\n    city: string;\n    countryOfBirth: string;\n    dateOfBirth: string;\n    firstName: string;\n    lastName: string;\n    postcode: string;\n    residentialAddress: string;\n    cityFocused: boolean;\n    dateOfBirthFocused: boolean;\n    firstNameFocused: boolean;\n    lastNameFocused: boolean;\n    postcodeFocused: boolean;\n    residentialAddressFocused: boolean;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps;\n\nclass IdentityComponent extends React.Component<Props, IdentityState> {\n    public state = {\n        city: '',\n        countryOfBirth: '',\n        dateOfBirth: '',\n        firstName: '',\n        lastName: '',\n        postcode: '',\n        residentialAddress: '',\n        cityFocused: false,\n        dateOfBirthFocused: false,\n        firstNameFocused: false,\n        lastNameFocused: false,\n        postcodeFocused: false,\n        residentialAddressFocused: false,\n    };\n\n    public translate = (e: string) => {\n        return this.props.intl.formatMessage({id: e});\n    };\n\n    public componentDidUpdate(prev: Props) {\n        const {\n            history,\n            editSuccess,\n            sendSuccess,\n        } = this.props;\n\n        if ((!prev.editSuccess && editSuccess) || (!prev.sendSuccess && sendSuccess)) {\n            this.props.labelFetch();\n            history.push('/profile');\n        }\n    }\n\n    public render() {\n        const {\n            editSuccess,\n            sendSuccess,\n            lang,\n        } = this.props;\n        const {\n            city,\n            dateOfBirth,\n            firstName,\n            lastName,\n            postcode,\n            residentialAddress,\n            cityFocused,\n            dateOfBirthFocused,\n            firstNameFocused,\n            lastNameFocused,\n            postcodeFocused,\n            residentialAddressFocused,\n        } = this.state;\n\n        const firstNameGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n            'pg-confirm__content-identity__forms__row__content--focused': firstNameFocused,\n            'pg-confirm__content-identity__forms__row__content--wrong': firstName && !this.handleValidateInput('firstName', firstName),\n        });\n\n        const lastNameGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n            'pg-confirm__content-identity__forms__row__content--focused': lastNameFocused,\n            'pg-confirm__content-identity__forms__row__content--wrong': lastName && !this.handleValidateInput('lastName', lastName),\n        });\n\n        const dateOfBirthGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n            'pg-confirm__content-identity__forms__row__content--focused': dateOfBirthFocused,\n            'pg-confirm__content-identity__forms__row__content--wrong': dateOfBirth && !this.handleValidateInput('dateOfBirth', dateOfBirth),\n        });\n\n        const residentialAddressGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n            'pg-confirm__content-identity__forms__row__content--focused': residentialAddressFocused,\n            'pg-confirm__content-identity__forms__row__content--wrong': residentialAddress && !this.handleValidateInput('residentialAddress', residentialAddress),\n        });\n\n        const cityGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n            'pg-confirm__content-identity__forms__row__content--focused': cityFocused,\n            'pg-confirm__content-identity__forms__row__content--wrong': city && !this.handleValidateInput('city', city),\n        });\n\n        const postcodeGroupClass = cr('pg-confirm__content-identity__forms__row__content', {\n            'pg-confirm__content-identity__forms__row__content--focused': postcodeFocused,\n            'pg-confirm__content-identity__forms__row__content--wrong': postcode && !this.handleValidateInput('postcode', postcode),\n        });\n\n        /* tslint:disable */\n        languages.map((l: string) => countries.registerLocale(require(`i18n-iso-countries/langs/${l}.json`)));\n\n        /* tslint:enable */\n\n        const dataCountries = Object.values(countries.getNames(lang));\n        const onSelectCountry = value => this.selectCountry(dataCountries[value]);\n\n        return (\n          <form className=\"pg-confirm__content-identity\" autoComplete=\"on\">\n            <div className=\"pg-confirm__content-identity__forms\">\n                <div className=\"pg-confirm__content-identity__forms__row input-group\">\n                    <fieldset className={firstNameGroupClass}>\n                        <CustomInput\n                            type=\"string\"\n                            name=\"fname\"\n                            autoComplete=\"given-name\"\n                            inputValue={firstName}\n                            placeholder={this.translate('page.body.kyc.identity.firstName')}\n                            handleChangeInput={e => this.handleChange(e, 'firstName')}\n                            autoFocus={true}\n                            label={this.translate('page.body.kyc.identity.firstName')}\n                            defaultLabel={''}\n                            handleFocusInput={this.handleFieldFocus('firstName')}\n                        />\n                    </fieldset>\n                    <fieldset className={lastNameGroupClass}>\n                        <CustomInput\n                            type=\"string\"\n                            name=\"lname\"\n                            autoComplete=\"family-name\"\n                            inputValue={lastName}\n                            handleChangeInput={e => this.handleChange(e, 'lastName')}\n                            placeholder={this.translate('page.body.kyc.identity.lastName')}\n                            label={this.translate('page.body.kyc.identity.lastName')}\n                            defaultLabel={''}\n                            handleFocusInput={this.handleFieldFocus('lastName')}\n                        />\n                    </fieldset>\n                </div>\n                <div className=\"pg-confirm__content-identity__forms__row\">\n                    <fieldset className={dateOfBirthGroupClass}>\n                        <div className=\"custom-input\">\n                            {dateOfBirth ? <label>{this.translate('page.body.kyc.identity.dateOfBirth')}</label> : null}\n                            <div className=\"input-group input-group-lg\">\n                                <MaskInput\n                                    className=\"pg-confirm__content-identity__forms__row__content-number\"\n                                    maskString=\"00/00/0000\"\n                                    mask=\"00/00/0000\"\n                                    onChange={this.handleChangeDate}\n                                    onFocus={this.handleFieldFocus('dateOfBirth')}\n                                    onBlur={this.handleFieldFocus('dateOfBirth')}\n                                    value={dateOfBirth}\n                                    placeholder={this.translate('page.body.kyc.identity.dateOfBirth.placeholder')}\n                                />\n                            </div>\n                        </div>\n                    </fieldset>\n                </div>\n                <div className=\"pg-confirm__content-identity__forms__row\">\n                    <div className=\"pg-confirm__content-identity__forms__row__content\">\n                        <DropdownComponent\n                            className=\"pg-confirm__content-identity__forms__row__content-number-dropdown\"\n                            list={dataCountries}\n                            onSelect={onSelectCountry}\n                            placeholder={this.translate('page.body.kyc.identity.CoR')}\n                        />\n                    </div>\n                </div>\n                <div className=\"pg-confirm__content-identity__forms__row\">\n                    <fieldset className={residentialAddressGroupClass}>\n                        <CustomInput\n                            type=\"string\"\n                            name=\"ship-address\"\n                            autoComplete=\"shipping street-address\"\n                            inputValue={residentialAddress}\n                            placeholder={this.translate('page.body.kyc.identity.residentialAddress')}\n                            label={this.translate('page.body.kyc.identity.residentialAddress')}\n                            defaultLabel={''}\n                            handleChangeInput={e => this.handleChange(e, 'residentialAddress')}\n                            handleFocusInput={this.handleFieldFocus('residentialAddress')}\n                        />\n                    </fieldset>\n                </div>\n                <div className=\"pg-confirm__content-identity__forms__row input-group\">\n                    <fieldset className={cityGroupClass}>\n                        <CustomInput\n                            type=\"string\"\n                            name=\"ship-city\"\n                            autoComplete=\"shipping locality\"\n                            inputValue={city}\n                            handleChangeInput={e => this.handleChange(e, 'city')}\n                            placeholder={this.translate('page.body.kyc.identity.city')}\n                            label={this.translate('page.body.kyc.identity.city')}\n                            defaultLabel={''}\n                            handleFocusInput={this.handleFieldFocus('city')}\n                        />\n                    </fieldset>\n                    <fieldset className={postcodeGroupClass}>\n                        <CustomInput\n                            label={this.translate('page.body.kyc.identity.postcode')}\n                            defaultLabel={this.translate('page.body.kyc.identity.postcode')}\n                            type=\"string\"\n                            name=\"ship-zip\"\n                            autoComplete=\"shipping postal-code\"\n                            inputValue={postcode}\n                            handleChangeInput={e => this.handleChange(e, 'postcode')}\n                            onKeyPress={this.handleConfirmEnterPress}\n                            placeholder={this.translate('page.body.kyc.identity.postcode')}\n                            handleFocusInput={this.handleFieldFocus('postcode')}\n                        />\n                    </fieldset>\n                </div>\n              </div>\n              {sendSuccess && !editSuccess && <p className=\"pg-confirm__success\">{this.translate(sendSuccess)}</p>}\n              {editSuccess && !sendSuccess && <p className=\"pg-confirm__success\">{this.translate(editSuccess)}</p>}\n              <div className=\"pg-confirm__content-deep\">\n                    <Button\n                        onClick={this.sendData}\n                        disabled={this.handleCheckButtonDisabled()}\n                        size=\"lg\"\n                        variant=\"primary\"\n                        type=\"submit\"\n                        block={true}\n                    >\n                        {this.translate('page.body.kyc.next')}\n                    </Button>\n              </div>\n          </form>\n        );\n    }\n\n    private scrollToElement = (displayedElem: number) => {\n        const element: HTMLElement = document.getElementsByClassName('pg-confirm__content-identity__forms__row')[displayedElem] as HTMLElement;\n        element && element.scrollIntoView({behavior: 'smooth', block: 'center', inline: 'nearest'});\n    };\n\n    private handleFieldFocus = (field: string) => {\n        return () => {\n            switch (field) {\n                case 'city':\n                    this.setState({\n                        cityFocused: !this.state.cityFocused,\n                    });\n                    this.scrollToElement(6);\n                    break;\n                case 'dateOfBirth':\n                    this.setState({\n                        dateOfBirthFocused: !this.state.dateOfBirthFocused,\n                    });\n                    this.scrollToElement(2);\n                    break;\n                case 'firstName':\n                    this.setState({\n                        firstNameFocused: !this.state.firstNameFocused,\n                    });\n                    this.scrollToElement(0);\n                    break;\n                case 'lastName':\n                    this.setState({\n                        lastNameFocused: !this.state.lastNameFocused,\n                    });\n                    this.scrollToElement(1);\n                    break;\n                case 'postcode':\n                    this.setState({\n                        postcodeFocused: !this.state.postcodeFocused,\n                    });\n                    this.scrollToElement(7);\n                    break;\n                case 'residentialAddress':\n                    this.setState({\n                        residentialAddressFocused: !this.state.residentialAddressFocused,\n                    });\n                    this.scrollToElement(4);\n                    break;\n                default:\n                    break;\n            }\n        };\n    };\n\n    private handleChange = (value: string, key: string) => {\n        // @ts-ignore\n        this.setState({\n            [key]: value,\n        });\n    };\n\n    private handleConfirmEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter' && !this.handleCheckButtonDisabled()) {\n            event.preventDefault();\n            this.sendData(event);\n        }\n    };\n\n    private handleChangeDate = (e: OnChangeEvent) => {\n        this.setState({\n            dateOfBirth: formatDate(e.target.value),\n        });\n    };\n\n    private selectCountry = (value: string) => {\n        this.setState({\n            countryOfBirth: countries.getAlpha2Code(value, this.props.lang),\n        });\n    };\n\n    private handleValidateInput = (field: string, value: string): boolean => {\n        switch (field) {\n            case 'firstName':\n                const firstNameRegex = new RegExp(`^[a-zA-Z]{1,100}$`);\n\n                return value.match(firstNameRegex) ? true : false;\n            case 'lastName':\n                const lastNameRegex = new RegExp(`^[a-zA-Z]{1,100}$`);\n\n                return value.match(lastNameRegex) ? true : false;\n            case 'residentialAddress':\n                const residentialAddressRegex = new RegExp(`^[a-zA-Z0-9-,.;/\\\\s]+$`);\n\n                return value.match(residentialAddressRegex) ? true : false;\n            case 'city':\n                const cityRegex = new RegExp(`^[a-zA-Z]+$`);\n\n                return value.match(cityRegex) ? true : false;\n            case 'postcode':\n                const postcodeRegex = new RegExp(`^[0-9]{1,12}$`);\n\n                return value.match(postcodeRegex) ? true : false;\n            case 'dateOfBirth':\n                if (value.length === 10) {\n                    return moment(value, 'DD/MM/YYYY').unix() < (Date.now() / 1000);\n                }\n\n                return false;\n            default:\n                return true;\n        }\n    };\n\n    private handleCheckButtonDisabled = () => {\n        const {\n            city,\n            dateOfBirth,\n            firstName,\n            lastName,\n            postcode,\n            residentialAddress,\n            countryOfBirth,\n        } = this.state;\n\n        const firstNameValid = this.handleValidateInput('firstName', firstName);\n        const lastNameValid = this.handleValidateInput('lastName', lastName);\n        const residentialAddressValid = this.handleValidateInput('residentialAddress', residentialAddress);\n        const cityValid = this.handleValidateInput('city', city);\n        const postcodeValid = this.handleValidateInput('postcode', postcode);\n        const dateOfBirthValid = this.handleValidateInput('dateOfBirth', dateOfBirth);\n\n        return (\n            !firstNameValid\n            || !lastNameValid\n            || !residentialAddressValid\n            || !countryOfBirth\n            || !cityValid\n            || !postcodeValid\n            || !dateOfBirthValid\n        );\n    };\n\n    private sendData = event => {\n        event.preventDefault();\n        const { labels, user } = this.props;\n        const dob = !isDateInFuture(this.state.dateOfBirth) ? this.state.dateOfBirth : '';\n        const profileInfo: IdentityData = {\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n            dob,\n            address: this.state.residentialAddress,\n            postcode: this.state.postcode,\n            city: this.state.city,\n            country: this.state.countryOfBirth,\n            confirm: true,\n        };\n        const isIdentity = labels.length && labels.find(w => w.key === 'profile' && w.value === 'verified' && w.scope === 'private');\n        const verifiedProfiles = user.profiles.length ? user.profiles.filter(i => i.state === 'verified') : [];\n        const lastVerifiedProfile = verifiedProfiles.length && verifiedProfiles[verifiedProfiles.length - 1];\n\n        if (!isIdentity && lastVerifiedProfile && lastVerifiedProfile.address) {\n            this.props.editIdentity(profileInfo);\n        } else {\n            this.props.sendIdentity(profileInfo);\n        }\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    editSuccess: selectEditIdentitySuccess(state),\n    sendSuccess: selectSendIdentitySuccess(state),\n    lang: selectCurrentLanguage(state),\n    labels: selectLabelData(state),\n    user: selectUserInfo(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        editIdentity: payload => dispatch(editIdentity(payload)),\n        sendIdentity: payload => dispatch(sendIdentity(payload)),\n        labelFetch: () => dispatch(labelFetch()),\n    });\n\nexport const Identity = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(IdentityComponent) as any; // tslint:disable-line\n"]},"metadata":{},"sourceType":"module"}