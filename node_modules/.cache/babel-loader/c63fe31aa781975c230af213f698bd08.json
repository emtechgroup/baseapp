{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/screens/ForgotPassword/index.tsx\";\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { Captcha, EmailForm } from '../../components';\nimport { EMAIL_REGEX, ERROR_INVALID_EMAIL, setDocumentTitle } from '../../helpers';\nimport { forgotPassword as _forgotPassword, resetCaptchaState as _resetCaptchaState, selectCaptchaResponse, selectConfigs, selectCurrentLanguage, selectForgotPasswordError, selectForgotPasswordSuccess, selectGeetestCaptchaSuccess, selectRecaptchaSuccess } from '../../modules';\n\nvar ForgotPasswordComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ForgotPasswordComponent, _React$Component);\n\n  var _super = _createSuper(ForgotPasswordComponent);\n\n  function ForgotPasswordComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ForgotPasswordComponent);\n\n    _this = _super.call(this, props);\n\n    _this.renderCaptcha = function () {\n      var _this$props = _this.props,\n          error = _this$props.error,\n          success = _this$props.success;\n      return /*#__PURE__*/React.createElement(Captcha, {\n        error: error,\n        success: success,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      });\n    };\n\n    _this.handleChangePassword = function () {\n      var email = _this.state.email;\n      var _this$props2 = _this.props,\n          configs = _this$props2.configs,\n          captcha_response = _this$props2.captcha_response;\n\n      switch (configs.captcha_type) {\n        case 'recaptcha':\n        case 'geetest':\n          _this.props.forgotPassword({\n            email,\n            captcha_response\n          });\n\n          break;\n\n        default:\n          _this.props.forgotPassword({\n            email\n          });\n\n          break;\n      }\n\n      _this.setState({\n        email: ''\n      });\n\n      _this.props.resetCaptchaState();\n    };\n\n    _this.handleFocusEmail = function () {\n      _this.setState({\n        emailFocused: !_this.state.emailFocused\n      });\n    };\n\n    _this.handleInputEmail = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n\n    _this.validateForm = function () {\n      var email = _this.state.email;\n      var isEmailValid = email ? email.match(EMAIL_REGEX) : true;\n\n      if (!isEmailValid) {\n        _this.setState({\n          emailError: ERROR_INVALID_EMAIL\n        });\n\n        return;\n      }\n    };\n\n    _this.handleComeBack = function () {\n      _this.props.history.goBack();\n    };\n\n    _this.handleEnterPress = function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n\n        _this.handleChangePassword();\n      }\n    };\n\n    _this.state = {\n      email: '',\n      emailError: '',\n      emailFocused: false\n    };\n    return _this;\n  }\n\n  _createClass(ForgotPasswordComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Forgot password');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          email = _this$state.email,\n          emailFocused = _this$state.emailFocused,\n          emailError = _this$state.emailError;\n      var _this$props3 = this.props,\n          configs = _this$props3.configs,\n          captcha_response = _this$props3.captcha_response,\n          reCaptchaSuccess = _this$props3.reCaptchaSuccess,\n          geetestCaptchaSuccess = _this$props3.geetestCaptchaSuccess;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-forgot-password-screen\",\n        onKeyPress: this.handleEnterPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-forgot-password-screen__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-forgot-password___form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(EmailForm, {\n        OnSubmit: this.handleChangePassword,\n        title: this.props.intl.formatMessage({\n          id: 'page.forgotPassword'\n        }),\n        emailLabel: this.props.intl.formatMessage({\n          id: 'page.forgotPassword.email'\n        }),\n        buttonLabel: this.props.intl.formatMessage({\n          id: 'page.forgotPassword.send'\n        }),\n        email: email,\n        emailFocused: emailFocused,\n        emailError: emailError,\n        message: this.props.intl.formatMessage({\n          id: 'page.forgotPassword.message'\n        }),\n        validateForm: this.validateForm,\n        handleInputEmail: this.handleInputEmail,\n        handleFieldFocus: this.handleFocusEmail,\n        handleReturnBack: this.handleComeBack,\n        captchaType: configs.captcha_type,\n        renderCaptcha: this.renderCaptcha(),\n        reCaptchaSuccess: reCaptchaSuccess,\n        geetestCaptchaSuccess: geetestCaptchaSuccess,\n        captcha_response: captcha_response,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return ForgotPasswordComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    success: selectForgotPasswordSuccess(state),\n    error: selectForgotPasswordError(state),\n    i18n: selectCurrentLanguage(state),\n    configs: selectConfigs(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    forgotPassword: function forgotPassword(credentials) {\n      return dispatch(_forgotPassword(credentials));\n    },\n    resetCaptchaState: function resetCaptchaState() {\n      return dispatch(_resetCaptchaState());\n    }\n  };\n};\n\nexport var ForgotPasswordScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(ForgotPasswordComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/screens/ForgotPassword/index.tsx"],"names":["React","injectIntl","connect","withRouter","compose","Captcha","EmailForm","EMAIL_REGEX","ERROR_INVALID_EMAIL","setDocumentTitle","forgotPassword","resetCaptchaState","selectCaptchaResponse","selectConfigs","selectCurrentLanguage","selectForgotPasswordError","selectForgotPasswordSuccess","selectGeetestCaptchaSuccess","selectRecaptchaSuccess","ForgotPasswordComponent","props","renderCaptcha","error","success","handleChangePassword","email","state","configs","captcha_response","captcha_type","setState","handleFocusEmail","emailFocused","handleInputEmail","value","validateForm","isEmailValid","match","emailError","handleComeBack","history","goBack","handleEnterPress","event","key","preventDefault","reCaptchaSuccess","geetestCaptchaSuccess","intl","formatMessage","id","Component","mapStateToProps","i18n","mapDispatchToProps","dispatch","credentials","ForgotPasswordScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n    injectIntl,\n} from 'react-intl';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { Captcha, EmailForm } from '../../components';\nimport {\n    EMAIL_REGEX,\n    ERROR_INVALID_EMAIL,\n    setDocumentTitle,\n} from '../../helpers';\nimport {\n    Configs,\n    forgotPassword,\n    GeetestCaptchaResponse,\n    resetCaptchaState,\n    RootState,\n    selectCaptchaResponse,\n    selectConfigs,\n    selectCurrentLanguage,\n    selectForgotPasswordError,\n    selectForgotPasswordSuccess,\n    selectGeetestCaptchaSuccess,\n    selectRecaptchaSuccess,\n} from '../../modules';\nimport { CommonError } from '../../modules/types';\n\ninterface ReduxProps {\n    success: boolean;\n    error?: CommonError;\n    configs: Configs;\n    captcha_response?: string | GeetestCaptchaResponse;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n}\n\ninterface DispatchProps {\n    forgotPassword: typeof forgotPassword;\n    resetCaptchaState: typeof resetCaptchaState;\n}\n\ninterface ForgotPasswordState {\n    email: string;\n    emailError: string;\n    emailFocused: boolean;\n}\n\ntype Props = RouterProps & ReduxProps & DispatchProps & IntlProps;\n\nclass ForgotPasswordComponent extends React.Component<Props, ForgotPasswordState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            emailError: '',\n            emailFocused: false,\n        };\n    }\n\n    public componentDidMount() {\n        setDocumentTitle('Forgot password');\n    }\n\n    public renderCaptcha = () => {\n        const { error, success } = this.props;\n\n        return (\n            <Captcha\n                error={error}\n                success={success}\n            />\n        );\n    };\n\n    public render() {\n        const {\n            email,\n            emailFocused,\n            emailError,\n        } = this.state;\n        const {\n            configs,\n            captcha_response,\n            reCaptchaSuccess,\n            geetestCaptchaSuccess,\n        } = this.props;\n\n        return (\n            <div className=\"pg-forgot-password-screen\" onKeyPress={this.handleEnterPress}>\n                <div className=\"pg-forgot-password-screen__container\">\n                    <div className=\"pg-forgot-password___form\">\n                        <EmailForm\n                            OnSubmit={this.handleChangePassword}\n                            title={this.props.intl.formatMessage({id: 'page.forgotPassword'})}\n                            emailLabel={this.props.intl.formatMessage({id: 'page.forgotPassword.email'})}\n                            buttonLabel={this.props.intl.formatMessage({id: 'page.forgotPassword.send'})}\n                            email={email}\n                            emailFocused={emailFocused}\n                            emailError={emailError}\n                            message={this.props.intl.formatMessage({id: 'page.forgotPassword.message'})}\n                            validateForm={this.validateForm}\n                            handleInputEmail={this.handleInputEmail}\n                            handleFieldFocus={this.handleFocusEmail}\n                            handleReturnBack={this.handleComeBack}\n                            captchaType={configs.captcha_type}\n                            renderCaptcha={this.renderCaptcha()}\n                            reCaptchaSuccess={reCaptchaSuccess}\n                            geetestCaptchaSuccess={geetestCaptchaSuccess}\n                            captcha_response={captcha_response}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private handleChangePassword = () => {\n        const { email } = this.state;\n        const { configs, captcha_response } = this.props;\n\n        switch (configs.captcha_type) {\n            case 'recaptcha':\n            case 'geetest':\n                this.props.forgotPassword({ email, captcha_response });\n                break;\n            default:\n                this.props.forgotPassword({ email });\n                break;\n        }\n\n        this.setState({ email: '' });\n\n        this.props.resetCaptchaState();\n    };\n\n    private handleFocusEmail = () => {\n        this.setState({\n            emailFocused: !this.state.emailFocused,\n        });\n    };\n\n    private handleInputEmail = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private validateForm = () => {\n        const { email } = this.state;\n\n        const isEmailValid = email ? email.match(EMAIL_REGEX) : true;\n\n        if (!isEmailValid) {\n            this.setState({\n                emailError: ERROR_INVALID_EMAIL,\n            });\n\n            return;\n        }\n    };\n\n    private handleComeBack = () => {\n        this.props.history.goBack();\n    };\n\n    private handleEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n\n            this.handleChangePassword();\n        }\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    success: selectForgotPasswordSuccess(state),\n    error: selectForgotPasswordError(state),\n    i18n: selectCurrentLanguage(state),\n    configs: selectConfigs(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        forgotPassword: credentials => dispatch(forgotPassword(credentials)),\n        resetCaptchaState: () => dispatch(resetCaptchaState()),\n    });\n\nexport const ForgotPasswordScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(ForgotPasswordComponent) as React.ComponentClass;\n"]},"metadata":{},"sourceType":"module"}