{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(apiKeyUpdateSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { apiKeys2FAModal, apiKeysError, apiKeyUpdate } from '../actions';\n\nvar updateOptions = function updateOptions(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function apiKeyUpdateSaga(action) {\n  var totp_code, _action$payload$apiKe, kid, state, updatedApiKey;\n\n  return _regeneratorRuntime.wrap(function apiKeyUpdateSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          totp_code = action.payload.totp_code;\n          _action$payload$apiKe = action.payload.apiKey, kid = _action$payload$apiKe.kid, state = _action$payload$apiKe.state;\n          _context.next = 5;\n          return call(API.patch(updateOptions(getCsrfToken())), \"/resource/api_keys/\".concat(kid), {\n            totp_code,\n            state\n          });\n\n        case 5:\n          updatedApiKey = _context.sent;\n          _context.next = 8;\n          return put(apiKeyUpdate(updatedApiKey));\n\n        case 8:\n          _context.next = 10;\n          return put(alertPush({\n            message: ['success.api_keys.updated'],\n            type: 'success'\n          }));\n\n        case 10:\n          _context.next = 12;\n          return put(apiKeys2FAModal({\n            active: false\n          }));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 18;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: apiKeysError\n            }\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/apiKeys/sagas/apiKeyUpdateSaga.ts"],"names":["apiKeyUpdateSaga","call","put","alertPush","sendError","API","getCsrfToken","apiKeys2FAModal","apiKeysError","apiKeyUpdate","updateOptions","csrfToken","apiVersion","headers","action","totp_code","payload","apiKey","kid","state","patch","updatedApiKey","message","type","active","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,gB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,YAAxC,QAA+E,YAA/E;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAwC;AAC1D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,gBAAV,CAA2Bc,MAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,SAFR,GAEqBD,MAAM,CAACE,OAF5B,CAEQD,SAFR;AAAA,kCAGsBD,MAAM,CAACE,OAAP,CAAeC,MAHrC,EAGQC,GAHR,yBAGQA,GAHR,EAGaC,KAHb,yBAGaA,KAHb;AAAA;AAIuB,iBAAMlB,IAAI,CAACI,GAAG,CAACe,KAAJ,CAAUV,aAAa,CAACJ,YAAY,EAAb,CAAvB,CAAD,+BAAiEY,GAAjE,GAAwE;AAACH,YAAAA,SAAD;AAAYI,YAAAA;AAAZ,WAAxE,CAAV;;AAJvB;AAIOE,UAAAA,aAJP;AAAA;AAKC,iBAAMnB,GAAG,CAACO,YAAY,CAACY,aAAD,CAAb,CAAT;;AALD;AAAA;AAMC,iBAAMnB,GAAG,CAACC,SAAS,CAAC;AAAEmB,YAAAA,OAAO,EAAE,CAAC,0BAAD,CAAX;AAAyCC,YAAAA,IAAI,EAAE;AAA/C,WAAD,CAAV,CAAT;;AAND;AAAA;AAOC,iBAAMrB,GAAG,CAACK,eAAe,CAAC;AAAEiB,YAAAA,MAAM,EAAE;AAAV,WAAD,CAAhB,CAAT;;AAPD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASC,iBAAMtB,GAAG,CAACE,SAAS,CAAC;AAChBqB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEpB;AADH;AAHE,WAAD,CAAV,CAAT;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { apiKeys2FAModal, apiKeysError, apiKeyUpdate, ApiKeyUpdateFetch } from '../actions';\n\nconst updateOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* apiKeyUpdateSaga(action: ApiKeyUpdateFetch) {\n    try {\n        const {totp_code} = action.payload;\n        const {kid, state} = action.payload.apiKey;\n        const updatedApiKey = yield call(API.patch(updateOptions(getCsrfToken())), `/resource/api_keys/${kid}`, {totp_code, state});\n        yield put(apiKeyUpdate(updatedApiKey));\n        yield put(alertPush({ message: ['success.api_keys.updated'], type: 'success' }));\n        yield put(apiKeys2FAModal({ active: false }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: apiKeysError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}