{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleKlineFetchSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, isFinexEnabled } from '../../../../api';\nimport { buildQueryString, getTimestampPeriod } from '../../../../helpers';\nimport { klineData, klineError } from '../actions';\nvar klineRequestOptions = {\n  apiVersion: isFinexEnabled() ? 'finex' : 'peatio'\n};\nexport function handleKlineFetchSaga(action) {\n  var _action$payload, market, resolution, from, to, payload, endPoint, data, convertedData;\n\n  return _regeneratorRuntime.wrap(function handleKlineFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, market = _action$payload.market, resolution = _action$payload.resolution, from = _action$payload.from, to = _action$payload.to;\n          payload = {\n            period: resolution,\n            time_from: getTimestampPeriod(from, resolution),\n            time_to: getTimestampPeriod(to, resolution)\n          };\n          endPoint = \"/public/markets/\".concat(market, \"/k-line\");\n\n          if (payload) {\n            endPoint = \"\".concat(endPoint, \"?\").concat(buildQueryString(payload));\n          }\n\n          _context.next = 7;\n          return call(API.get(klineRequestOptions), endPoint);\n\n        case 7:\n          data = _context.sent;\n          convertedData = data.map(function (elem) {\n            var _elem$map = elem.map(function (e) {\n              switch (typeof e) {\n                case 'number':\n                  return e;\n\n                case 'string':\n                  return Number.parseFloat(e);\n\n                default:\n                  throw new Error(\"unexpected type \".concat(typeof e));\n              }\n            }),\n                _elem$map2 = _slicedToArray(_elem$map, 6),\n                date = _elem$map2[0],\n                open = _elem$map2[1],\n                high = _elem$map2[2],\n                low = _elem$map2[3],\n                close = _elem$map2[4],\n                volume = _elem$map2[5];\n\n            return {\n              date: date * 1e3,\n              open,\n              high,\n              low,\n              close,\n              volume\n            };\n          });\n          _context.next = 11;\n          return put(klineData(convertedData));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: klineError\n            }\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/kline/sagas/handleKlineFetchSaga.ts"],"names":["handleKlineFetchSaga","call","put","sendError","API","isFinexEnabled","buildQueryString","getTimestampPeriod","klineData","klineError","klineRequestOptions","apiVersion","action","payload","market","resolution","from","to","period","time_from","time_to","endPoint","get","data","convertedData","map","elem","e","Number","parseFloat","Error","date","open","high","low","close","volume","error","processingType","extraOptions","actionError"],"mappings":";;;oDAUiBA,oB;;AAVjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,EAAcC,cAAd,QAAoD,iBAApD;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,qBAArD;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAkD,YAAlD;AAEA,IAAMC,mBAAmC,GAAG;AACxCC,EAAAA,UAAU,EAAEN,cAAc,KAAK,OAAL,GAAe;AADD,CAA5C;AAIA,OAAO,SAAUL,oBAAV,CAA+BY,MAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAOKA,MAAM,CAACC,OAPZ,EAGKC,MAHL,mBAGKA,MAHL,EAIKC,UAJL,mBAIKA,UAJL,EAKKC,IALL,mBAKKA,IALL,EAMKC,EANL,mBAMKA,EANL;AASOJ,UAAAA,OATP,GASiB;AACZK,YAAAA,MAAM,EAAEH,UADI;AAEZI,YAAAA,SAAS,EAAEZ,kBAAkB,CAACS,IAAD,EAAOD,UAAP,CAFjB;AAGZK,YAAAA,OAAO,EAAEb,kBAAkB,CAACU,EAAD,EAAKF,UAAL;AAHf,WATjB;AAeKM,UAAAA,QAfL,6BAemCP,MAfnC;;AAiBC,cAAID,OAAJ,EAAa;AACTQ,YAAAA,QAAQ,aAAMA,QAAN,cAAkBf,gBAAgB,CAACO,OAAD,CAAlC,CAAR;AACH;;AAnBF;AAqBc,iBAAMZ,IAAI,CAACG,GAAG,CAACkB,GAAJ,CAAQZ,mBAAR,CAAD,EAA+BW,QAA/B,CAAV;;AArBd;AAqBOE,UAAAA,IArBP;AAuBOC,UAAAA,aAvBP,GAuBuBD,IAAI,CAACE,GAAL,CAAS,UAAAC,IAAI,EAAI;AAAA,4BACYA,IAAI,CAACD,GAAL,CAAS,UAAAE,CAAC,EAAI;AACzD,sBAAQ,OAAOA,CAAf;AACI,qBAAK,QAAL;AACI,yBAAOA,CAAP;;AACJ,qBAAK,QAAL;AACI,yBAAOC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,CAAP;;AACJ;AACI,wBAAO,IAAIG,KAAJ,2BAA6B,OAAOH,CAApC,EAAP;AANR;AAQH,aAT8C,CADZ;AAAA;AAAA,gBAC5BI,IAD4B;AAAA,gBACtBC,IADsB;AAAA,gBAChBC,IADgB;AAAA,gBACVC,GADU;AAAA,gBACLC,KADK;AAAA,gBACEC,MADF;;AAYnC,mBAAO;AACHL,cAAAA,IAAI,EAAEA,IAAI,GAAG,GADV;AAEHC,cAAAA,IAFG;AAGHC,cAAAA,IAHG;AAIHC,cAAAA,GAJG;AAKHC,cAAAA,KALG;AAMHC,cAAAA;AANG,aAAP;AAQH,WApBqB,CAvBvB;AAAA;AA4CC,iBAAMlC,GAAG,CAACM,SAAS,CAACgB,aAAD,CAAV,CAAT;;AA5CD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA8CC,iBAAMtB,GAAG,CAACC,SAAS,CAAC;AAChBkC,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAE/B;AADH;AAHE,WAAD,CAAV,CAAT;;AA9CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, isFinexEnabled, RequestOptions } from '../../../../api';\nimport { buildQueryString, getTimestampPeriod } from '../../../../helpers';\nimport { klineData, klineError, KlineFetch } from '../actions';\n\nconst klineRequestOptions: RequestOptions = {\n    apiVersion: isFinexEnabled() ? 'finex' : 'peatio',\n};\n\nexport function* handleKlineFetchSaga(action: KlineFetch) {\n    try {\n        const {\n            market,\n            resolution,\n            from,\n            to,\n        } = action.payload;\n\n        const payload = {\n            period: resolution,\n            time_from: getTimestampPeriod(from, resolution),\n            time_to: getTimestampPeriod(to, resolution),\n        };\n\n        let endPoint = `/public/markets/${market}/k-line`;\n\n        if (payload) {\n            endPoint = `${endPoint}?${buildQueryString(payload)}`;\n        }\n\n        const data = yield call(API.get(klineRequestOptions), endPoint);\n\n        const convertedData = data.map(elem => {\n            const [date, open, high, low, close, volume] = elem.map(e => {\n                switch (typeof e) {\n                    case 'number':\n                        return e;\n                    case 'string':\n                        return Number.parseFloat(e);\n                    default:\n                        throw (new Error(`unexpected type ${typeof e}`));\n                }\n            });\n\n            return {\n                date: date * 1e3,\n                open,\n                high,\n                low,\n                close,\n                volume,\n            };\n        });\n        yield put(klineData(convertedData));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: klineError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}