{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/screens/MagicLinkScreen/index.tsx\";\nimport * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { compose } from 'redux';\nimport { selectBlocklistAccessLoading, selectBlocklistAccessSuccess, sendAccessToken as _sendAccessToken } from '../../modules';\n\nvar MagicLinkScreen = /*#__PURE__*/function (_React$Component) {\n  _inherits(MagicLinkScreen, _React$Component);\n\n  var _super = _createSuper(MagicLinkScreen);\n\n  function MagicLinkScreen(props) {\n    var _this;\n\n    _classCallCheck(this, MagicLinkScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      token: ''\n    };\n    return _this;\n  }\n\n  _createClass(MagicLinkScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var urlParams = new URLSearchParams(this.props.location.search);\n      var token = urlParams.get('token');\n\n      if (token) {\n        this.props.sendAccessToken({\n          whitelink_token: token\n        });\n      } else {\n        this.props.history.replace('/');\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!this.props.success && nextProps.success) {\n        this.props.history.replace('/');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.props.loading;\n\n      if (loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pg-loader-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Spinner, {\n          animation: \"border\",\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      return null;\n    }\n  }]);\n\n  return MagicLinkScreen;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    success: selectBlocklistAccessLoading(state),\n    loading: selectBlocklistAccessSuccess(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    sendAccessToken: function sendAccessToken(payload) {\n      return dispatch(_sendAccessToken(payload));\n    }\n  };\n};\n\nexport var MagicLink = compose(withRouter, connect(mapStateToProps, mapDispatchProps))(MagicLinkScreen);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/screens/MagicLinkScreen/index.tsx"],"names":["React","Spinner","connect","withRouter","compose","selectBlocklistAccessLoading","selectBlocklistAccessSuccess","sendAccessToken","MagicLinkScreen","props","state","token","urlParams","URLSearchParams","location","search","get","whitelink_token","history","replace","nextProps","success","loading","Component","mapStateToProps","mapDispatchProps","dispatch","payload","MagicLink"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SACIC,OADJ,QAIO,aAJP;AAKA,SAAsBC,UAAtB,QAAwC,cAAxC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAEIC,4BAFJ,EAGIC,4BAHJ,EAIIC,eAAe,IAAfA,gBAJJ,QAKO,eALP;;IA4BMC,e;;;;;AACF,2BAAYC,KAAZ,EAAmC;AAAA;;AAAA;;AAC/B,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAH+B;AAMlC;;;;wCAE0B;AACvB,UAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,MAAxC,CAAlB;AACA,UAAMJ,KAAK,GAAGC,SAAS,CAACI,GAAV,CAAc,OAAd,CAAd;;AAEA,UAAIL,KAAJ,EAAW;AACP,aAAKF,KAAL,CAAWF,eAAX,CAA2B;AAAEU,UAAAA,eAAe,EAAEN;AAAnB,SAA3B;AACH,OAFD,MAEO;AACH,aAAKF,KAAL,CAAWS,OAAX,CAAmBC,OAAnB,CAA2B,GAA3B;AACH;AACJ;;;8CAEgCC,S,EAA2B;AACxD,UAAI,CAAC,KAAKX,KAAL,CAAWY,OAAZ,IAAuBD,SAAS,CAACC,OAArC,EAA8C;AAC1C,aAAKZ,KAAL,CAAWS,OAAX,CAAmBC,OAAnB,CAA2B,GAA3B;AACH;AACJ;;;6BAEe;AAAA,UACJG,OADI,GACQ,KAAKb,KADb,CACJa,OADI;;AAGZ,UAAIA,OAAJ,EAAa;AACT,4BACI;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAC,QAAnB;AAA4B,UAAA,OAAO,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAKH;;AAED,aAAO,IAAP;AACH;;;;EAtCyBtB,KAAK,CAACuB,S;;AAyCpC,IAAMC,eAA2D,GAAG,SAA9DA,eAA8D,CAAAd,KAAK;AAAA,SAAK;AAC1EW,IAAAA,OAAO,EAAEhB,4BAA4B,CAACK,KAAD,CADqC;AAE1EY,IAAAA,OAAO,EAAEhB,4BAA4B,CAACI,KAAD;AAFqC,GAAL;AAAA,CAAzE;;AAKA,IAAMe,gBAA+D,GAAG,SAAlEA,gBAAkE,CAAAC,QAAQ;AAAA,SAAK;AACjFnB,IAAAA,eAAe,EAAE,yBAAAoB,OAAO;AAAA,aAAID,QAAQ,CAACnB,gBAAe,CAACoB,OAAD,CAAhB,CAAZ;AAAA;AADyD,GAAL;AAAA,CAAhF;;AAIA,OAAO,IAAMC,SAAS,GAAGxB,OAAO,CAC5BD,UAD4B,EAE5BD,OAAO,CAACsB,eAAD,EAAkBC,gBAAlB,CAFqB,CAAP,CAGvBjB,eAHuB,CAAlB","sourcesContent":["import * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { RouterProps, withRouter } from 'react-router';\nimport { compose } from 'redux';\nimport {\n    RootState,\n    selectBlocklistAccessLoading,\n    selectBlocklistAccessSuccess,\n    sendAccessToken,\n} from '../../modules';\n\ninterface LocationProps extends RouterProps {\n    location: {\n        search: string;\n    };\n}\n\ninterface MagicLinkState {\n    token: string;\n}\n\ninterface ReduxProps {\n    success: boolean;\n    loading: boolean;\n}\n\ninterface DispatchProps {\n    sendAccessToken: typeof sendAccessToken;\n}\n\nexport type MagicLinkProps = LocationProps & ReduxProps & DispatchProps;\n\nclass MagicLinkScreen extends React.Component<MagicLinkProps, MagicLinkState> {\n    constructor(props: MagicLinkProps) {\n        super(props);\n\n        this.state = {\n            token: '',\n        };\n    }\n\n    public componentDidMount() {\n        const urlParams = new URLSearchParams(this.props.location.search);\n        const token = urlParams.get('token') as string;\n\n        if (token) {\n            this.props.sendAccessToken({ whitelink_token: token });\n        } else {\n            this.props.history.replace('/');\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: MagicLinkProps) {\n        if (!this.props.success && nextProps.success) {\n            this.props.history.replace('/');\n        }\n    }\n\n    public render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return (\n                <div className=\"pg-loader-container\">\n                    <Spinner animation=\"border\" variant=\"primary\" />\n                </div>\n            );\n        }\n\n        return null;\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    success: selectBlocklistAccessLoading(state),\n    loading: selectBlocklistAccessSuccess(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    sendAccessToken: payload => dispatch(sendAccessToken(payload)),\n});\n\nexport const MagicLink = compose(\n    withRouter,\n    connect(mapStateToProps, mapDispatchProps),\n)(MagicLinkScreen) as React.ComponentClass;\n"]},"metadata":{},"sourceType":"module"}