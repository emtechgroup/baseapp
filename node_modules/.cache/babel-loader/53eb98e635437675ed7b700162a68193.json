{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inputValue;\n\nvar _charTypesEnum = require('../constants/charTypesEnum.js');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction inputValue(_ref) {\n  var data = _ref.data,\n      _ref$input = _ref.input,\n      input = _ref$input === undefined ? '' : _ref$input,\n      selection = _ref.selection,\n      mask = _ref.mask,\n      maskChar = _ref.maskChar,\n      maskString = _ref.maskString;\n  var value = [];\n  var maskedValue = '';\n  var maskIndex = 0;\n  var valueIndex = 0;\n  var pastedIndex = 0;\n  var inputValuesApplied = 0;\n\n  while (mask[maskIndex]) {\n    var item = data.length > valueIndex ? data[valueIndex] : null;\n    var maskPart = mask[maskIndex];\n    var pastedValuesStack = null;\n\n    if (selection.start <= maskIndex && pastedIndex < input.length) {\n      pastedValuesStack = input.slice(pastedIndex);\n    } // Обработка захардкоженных в маску символов. \n\n\n    if (maskPart.char) {\n      // Если есть вводимые пользователем значение, в первую очередь проверяем его.\n      // Но не проверяем по всему стеку.\n      if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {\n        pastedIndex++;\n      } else {\n        if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {\n          valueIndex++;\n        }\n      }\n\n      value.push({\n        char: maskPart.char,\n        type: _charTypesEnum2.default.CHAR\n      });\n\n      if (pastedValuesStack) {\n        inputValuesApplied++;\n      }\n\n      maskedValue += maskPart.char;\n    } // Кастомный текст\n\n\n    if (maskPart.regexp) {\n      var part = null; // Если есть вводимое пользователем значение, то проверям его. \n      // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное\n\n      if (pastedValuesStack) {\n        var i = 0;\n\n        while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {\n          i++;\n          pastedIndex++;\n        }\n\n        if (pastedValuesStack.length > i) {\n          pastedIndex++;\n          inputValuesApplied++; // Игнорируем предыдущее значение в инпуте\n\n          valueIndex++;\n          part = pastedValuesStack[i];\n          value.push({\n            char: part,\n            type: _charTypesEnum2.default.USER\n          });\n          maskedValue += part;\n        }\n      } // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер\n\n\n      if (!part) {\n        // Если произошел сдвиг, пропускаем лишнее значение\n        if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {\n          valueIndex++;\n          continue;\n        }\n\n        if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {\n          value.push({\n            char: item.char,\n            type: _charTypesEnum2.default.USER\n          });\n          maskedValue += item.char;\n          valueIndex++;\n        } else {\n          part = maskString ? maskString[maskIndex] : maskChar;\n          value.push({\n            char: part,\n            type: _charTypesEnum2.default.MASK\n          });\n\n          if (data.length > maskIndex) {\n            valueIndex++;\n          }\n\n          maskedValue += part;\n        }\n      }\n    }\n\n    maskIndex++;\n  }\n\n  var selectionPosition = selection.start + inputValuesApplied; // Удаляем все ведующие maskChar\n\n  var bound = value.length - 1;\n  var charsCount = 0;\n\n  while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {\n    if (value[bound].type === _charTypesEnum2.default.MASK) {\n      charsCount = 0;\n    }\n\n    if (value[bound].type === _charTypesEnum2.default.CHAR) {\n      charsCount++;\n    }\n\n    bound--;\n  }\n\n  bound += charsCount;\n  var visibleValue = '';\n\n  for (var _i = 0; _i <= bound; _i++) {\n    visibleValue += value[_i].char;\n  }\n\n  return {\n    value: value,\n    visibleValue: visibleValue,\n    maskedValue: maskedValue,\n    selection: {\n      start: selectionPosition,\n      end: selectionPosition\n    }\n  };\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/node_modules/input-core/lib/functions/inputValue.js"],"names":["Object","defineProperty","exports","value","default","inputValue","_charTypesEnum","require","_charTypesEnum2","_interopRequireDefault","obj","__esModule","_ref","data","_ref$input","input","undefined","selection","mask","maskChar","maskString","maskedValue","maskIndex","valueIndex","pastedIndex","inputValuesApplied","item","length","maskPart","pastedValuesStack","start","slice","char","type","USER","push","CHAR","regexp","part","i","test","MASK","selectionPosition","bound","charsCount","visibleValue","_i","end"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = inputValue;\n\nvar _charTypesEnum = require('../constants/charTypesEnum.js');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction inputValue(_ref) {\n    var data = _ref.data,\n        _ref$input = _ref.input,\n        input = _ref$input === undefined ? '' : _ref$input,\n        selection = _ref.selection,\n        mask = _ref.mask,\n        maskChar = _ref.maskChar,\n        maskString = _ref.maskString;\n\n    var value = [];\n    var maskedValue = '';\n\n    var maskIndex = 0;\n    var valueIndex = 0;\n    var pastedIndex = 0;\n\n    var inputValuesApplied = 0;\n\n    while (mask[maskIndex]) {\n        var item = data.length > valueIndex ? data[valueIndex] : null;\n        var maskPart = mask[maskIndex];\n\n        var pastedValuesStack = null;\n        if (selection.start <= maskIndex && pastedIndex < input.length) {\n            pastedValuesStack = input.slice(pastedIndex);\n        }\n\n        // Обработка захардкоженных в маску символов. \n        if (maskPart.char) {\n            // Если есть вводимые пользователем значение, в первую очередь проверяем его.\n            // Но не проверяем по всему стеку.\n            if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {\n                pastedIndex++;\n            } else {\n                if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {\n                    valueIndex++;\n                }\n            }\n\n            value.push({\n                char: maskPart.char,\n                type: _charTypesEnum2.default.CHAR\n            });\n\n            if (pastedValuesStack) {\n                inputValuesApplied++;\n            }\n\n            maskedValue += maskPart.char;\n        }\n\n        // Кастомный текст\n        if (maskPart.regexp) {\n            var part = null;\n\n            // Если есть вводимое пользователем значение, то проверям его. \n            // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное\n            if (pastedValuesStack) {\n                var i = 0;\n                while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {\n                    i++;\n                    pastedIndex++;\n                }\n                if (pastedValuesStack.length > i) {\n                    pastedIndex++;\n                    inputValuesApplied++;\n\n                    // Игнорируем предыдущее значение в инпуте\n                    valueIndex++;\n\n                    part = pastedValuesStack[i];\n                    value.push({\n                        char: part,\n                        type: _charTypesEnum2.default.USER\n                    });\n                    maskedValue += part;\n                }\n            }\n\n            // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер\n            if (!part) {\n                // Если произошел сдвиг, пропускаем лишнее значение\n                if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {\n                    valueIndex++;\n                    continue;\n                }\n                if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {\n                    value.push({\n                        char: item.char,\n                        type: _charTypesEnum2.default.USER\n                    });\n                    maskedValue += item.char;\n                    valueIndex++;\n                } else {\n                    part = maskString ? maskString[maskIndex] : maskChar;\n\n                    value.push({\n                        char: part,\n                        type: _charTypesEnum2.default.MASK\n                    });\n\n                    if (data.length > maskIndex) {\n                        valueIndex++;\n                    }\n\n                    maskedValue += part;\n                }\n            }\n        }\n\n        maskIndex++;\n    }\n\n    var selectionPosition = selection.start + inputValuesApplied;\n\n    // Удаляем все ведующие maskChar\n    var bound = value.length - 1;\n    var charsCount = 0;\n    while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {\n        if (value[bound].type === _charTypesEnum2.default.MASK) {\n            charsCount = 0;\n        }\n        if (value[bound].type === _charTypesEnum2.default.CHAR) {\n            charsCount++;\n        }\n        bound--;\n    }\n    bound += charsCount;\n\n    var visibleValue = '';\n    for (var _i = 0; _i <= bound; _i++) {\n        visibleValue += value[_i].char;\n    }\n\n    return {\n        value: value,\n        visibleValue: visibleValue,\n        maskedValue: maskedValue,\n        selection: {\n            start: selectionPosition,\n            end: selectionPosition\n        }\n    };\n}"]},"metadata":{},"sourceType":"script"}