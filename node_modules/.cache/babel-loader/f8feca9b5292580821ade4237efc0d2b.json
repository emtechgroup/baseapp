{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/mobile/components/WalletDepositBody/index.tsx\";\n\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Blur } from '../../../components/Blur';\nimport { CurrencyInfo } from '../../../components/CurrencyInfo';\nimport { DepositCrypto } from '../../../components/DepositCrypto';\nimport { DepositFiat } from '../../../components/DepositFiat';\nimport { formatCCYAddress } from '../../../helpers';\nimport { selectCurrencies } from '../../../modules/public/currencies';\nimport { selectUserInfo } from '../../../modules/user/profile';\nimport { selectWalletAddress } from '../../../modules/user/wallets';\n\nvar WalletDepositBodyComponent = function WalletDepositBodyComponent(props) {\n  var intl = useIntl();\n  var currencies = useSelector(selectCurrencies);\n  var user = useSelector(selectUserInfo);\n  var selectedWalletAddress = useSelector(selectWalletAddress);\n  var label = React.useMemo(function () {\n    return intl.formatMessage({\n      id: 'page.body.wallets.tabs.deposit.ccy.message.address'\n    });\n  }, [intl]);\n\n  var handleOnCopy = function handleOnCopy() {\n    return {};\n  };\n\n  var renderDeposit = function renderDeposit(isAccountActivated) {\n    var addressDepositError = props.addressDepositError,\n        wallet = props.wallet;\n    var currencyItem = currencies && currencies.find(function (item) {\n      return item.id === wallet.currency;\n    }) || {\n      min_confirmations: 6,\n      deposit_enabled: false\n    };\n    var text = intl.formatMessage({\n      id: 'page.body.wallets.tabs.deposit.ccy.message.submit'\n    }, {\n      confirmations: currencyItem.min_confirmations\n    });\n    var error = addressDepositError ? intl.formatMessage({\n      id: addressDepositError.message[0]\n    }) : intl.formatMessage({\n      id: 'page.body.wallets.tabs.deposit.ccy.message.error'\n    });\n    var walletAddress = formatCCYAddress(wallet.currency, selectedWalletAddress) || '';\n    var title = intl.formatMessage({\n      id: 'page.body.wallets.tabs.deposit.fiat.message1'\n    });\n    var description = intl.formatMessage({\n      id: 'page.body.wallets.tabs.deposit.fiat.message2'\n    });\n    var blurCryptoClassName = classnames('pg-blur-deposit-crypto', {\n      'pg-blur-deposit-crypto--active': isAccountActivated\n    });\n\n    if (wallet.type === 'coin') {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CurrencyInfo, {\n        wallet: wallet,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }), currencyItem && !currencyItem.deposit_enabled ? /*#__PURE__*/React.createElement(Blur, {\n        className: blurCryptoClassName,\n        text: intl.formatMessage({\n          id: 'page.body.wallets.tabs.deposit.disabled.message'\n        }),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }\n      }) : null, /*#__PURE__*/React.createElement(DepositCrypto, {\n        currency: wallet.currency,\n        data: walletAddress,\n        handleOnCopy: handleOnCopy,\n        error: error,\n        text: text,\n        disabled: walletAddress === '',\n        copiableTextFieldText: \"\".concat(wallet.currency.toUpperCase(), \" \").concat(label),\n        copyButtonText: intl.formatMessage({\n          id: 'page.body.wallets.tabs.deposit.ccy.message.button'\n        }),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CurrencyInfo, {\n        wallet: wallet,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }), currencyItem && !currencyItem.deposit_enabled ? /*#__PURE__*/React.createElement(Blur, {\n        className: \"pg-blur-deposit-fiat\",\n        text: intl.formatMessage({\n          id: 'page.body.wallets.tabs.deposit.disabled.message'\n        }),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }\n      }) : null, /*#__PURE__*/React.createElement(DepositFiat, {\n        title: title,\n        description: description,\n        uid: user ? user.uid : '',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-mobile-wallet-deposit-body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, renderDeposit(props.isAccountActivated));\n};\n\nvar WalletDepositBody = React.memo(WalletDepositBodyComponent);\nexport { WalletDepositBody };","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/mobile/components/WalletDepositBody/index.tsx"],"names":["classnames","React","useIntl","useSelector","Blur","CurrencyInfo","DepositCrypto","DepositFiat","formatCCYAddress","selectCurrencies","selectUserInfo","selectWalletAddress","WalletDepositBodyComponent","props","intl","currencies","user","selectedWalletAddress","label","useMemo","formatMessage","id","handleOnCopy","renderDeposit","isAccountActivated","addressDepositError","wallet","currencyItem","find","item","currency","min_confirmations","deposit_enabled","text","confirmations","error","message","walletAddress","title","description","blurCryptoClassName","type","toUpperCase","uid","WalletDepositBody","memo"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Blur } from '../../../components/Blur';\nimport { CurrencyInfo } from '../../../components/CurrencyInfo';\nimport { DepositCrypto } from '../../../components/DepositCrypto';\nimport { DepositFiat } from '../../../components/DepositFiat';\nimport { formatCCYAddress } from '../../../helpers';\nimport { selectCurrencies } from '../../../modules/public/currencies';\nimport { selectUserInfo } from '../../../modules/user/profile';\nimport { selectWalletAddress } from '../../../modules/user/wallets';\n\nconst WalletDepositBodyComponent = props => {\n    const intl = useIntl();\n    const currencies = useSelector(selectCurrencies);\n    const user = useSelector(selectUserInfo);\n    const selectedWalletAddress = useSelector(selectWalletAddress);\n    const label = React.useMemo(() => intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.ccy.message.address' }), [intl]);\n    const handleOnCopy = () => ({});\n    const renderDeposit = (isAccountActivated: boolean) => {\n        const {\n            addressDepositError,\n            wallet,\n        } = props;\n        const currencyItem = (currencies && currencies.find(item => item.id === wallet.currency)) || { min_confirmations: 6, deposit_enabled: false };\n        const text = intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.ccy.message.submit' },\n            { confirmations: currencyItem.min_confirmations });\n        const error = addressDepositError ?\n            intl.formatMessage({id: addressDepositError.message[0]}) :\n            intl.formatMessage({id: 'page.body.wallets.tabs.deposit.ccy.message.error'});\n\n        const walletAddress = formatCCYAddress(wallet.currency, selectedWalletAddress) || '';\n\n        const title = intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.fiat.message1' });\n        const description = intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.fiat.message2' });\n        const blurCryptoClassName = classnames('pg-blur-deposit-crypto', {\n            'pg-blur-deposit-crypto--active': isAccountActivated,\n        });\n\n        if (wallet.type === 'coin') {\n            return (\n                <React.Fragment>\n                    <CurrencyInfo wallet={wallet}/>\n                    {currencyItem && !currencyItem.deposit_enabled ? (\n                        <Blur\n                            className={blurCryptoClassName}\n                            text={intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.disabled.message' })}\n                        />\n                    ) : null}\n                    <DepositCrypto\n                        currency={wallet.currency as string}\n                        data={walletAddress}\n                        handleOnCopy={handleOnCopy}\n                        error={error}\n                        text={text}\n                        disabled={walletAddress === ''}\n                        copiableTextFieldText={`${wallet.currency.toUpperCase()} ${label}`}\n                        copyButtonText={intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.ccy.message.button'} )}\n                    />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <CurrencyInfo wallet={wallet}/>\n                    {currencyItem && !currencyItem.deposit_enabled ? (\n                        <Blur\n                            className=\"pg-blur-deposit-fiat\"\n                            text={intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.disabled.message' })}\n                        />\n                    ) : null}\n                    <DepositFiat title={title} description={description} uid={user ? user.uid : ''}/>\n                </React.Fragment>\n            );\n        }\n    };\n\n    return (\n        <div className=\"cr-mobile-wallet-deposit-body\">\n            {renderDeposit(props.isAccountActivated)}\n        </div>\n    );\n};\n\nconst WalletDepositBody = React.memo(WalletDepositBodyComponent);\n\nexport {\n    WalletDepositBody,\n};\n"]},"metadata":{},"sourceType":"module"}