{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sendAddressesSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../../';\nimport { API } from '../../../../../api';\nimport { getCsrfToken } from '../../../../../helpers';\nimport { sendAddressesData, sendAddressesError } from '../actions';\n\nvar sessionsConfig = function sessionsConfig(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function sendAddressesSaga(action) {\n  var response, defaultMessage, _response$message, message;\n\n  return _regeneratorRuntime.wrap(function sendAddressesSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig(getCsrfToken())), '/resource/addresses', action.payload);\n\n        case 3:\n          response = _context.sent;\n          defaultMessage = 'success.addresses.accepted';\n          _response$message = response.message, message = _response$message === void 0 ? defaultMessage : _response$message;\n          _context.next = 8;\n          return put(sendAddressesData({\n            message\n          }));\n\n        case 8:\n          _context.next = 10;\n          return put(alertPush({\n            message: [defaultMessage],\n            type: 'success'\n          }));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: sendAddressesError\n            }\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/kyc/addresses/sagas/sendAddressesSaga.ts"],"names":["sendAddressesSaga","call","put","alertPush","sendError","API","getCsrfToken","sendAddressesData","sendAddressesError","sessionsConfig","csrfToken","apiVersion","headers","action","post","payload","response","defaultMessage","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,iB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,cAArC;AACA,SAASC,GAAT,QAAoC,oBAApC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAA0E,YAA1E;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAwC;AAC3D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUV,iBAAV,CAA4Ba,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB,iBAAMZ,IAAI,CAACI,GAAG,CAACS,IAAJ,CAASL,cAAc,CAACH,YAAY,EAAb,CAAvB,CAAD,EAA2C,qBAA3C,EAAkEO,MAAM,CAACE,OAAzE,CAAV;;AAFlB;AAEOC,UAAAA,QAFP;AAGOC,UAAAA,cAHP,GAGwB,4BAHxB;AAAA,8BAIsCD,QAJtC,CAISE,OAJT,EAISA,OAJT,kCAImBD,cAJnB;AAAA;AAKC,iBAAMf,GAAG,CAACK,iBAAiB,CAAC;AAAEW,YAAAA;AAAF,WAAD,CAAlB,CAAT;;AALD;AAAA;AAMC,iBAAMhB,GAAG,CAACC,SAAS,CAAC;AAAEe,YAAAA,OAAO,EAAE,CAACD,cAAD,CAAX;AAA6BE,YAAAA,IAAI,EAAE;AAAnC,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQC,iBAAMjB,GAAG,CAACE,SAAS,CAAC;AAChBgB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEf;AADH;AAHE,WAAD,CAAV,CAAT;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../../';\nimport { API, RequestOptions } from '../../../../../api';\nimport { getCsrfToken } from '../../../../../helpers';\nimport { sendAddressesData, sendAddressesError, SendAddressesFetch } from '../actions';\n\nconst sessionsConfig = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* sendAddressesSaga(action: SendAddressesFetch) {\n    try {\n        const response = yield call(API.post(sessionsConfig(getCsrfToken())), '/resource/addresses', action.payload);\n        const defaultMessage = 'success.addresses.accepted';\n        const { message = defaultMessage } = response;\n        yield put(sendAddressesData({ message }));\n        yield put(alertPush({ message: [defaultMessage], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: sendAddressesError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}