{"ast":null,"code":"'use strict';\n\nvar bch = module.exports; // module information\n\nbch.version = 'v' + require('../package.json').version;\n\nbch.versionGuard = function (version) {\n  if (version !== undefined) {\n    var message = 'More than one instance of bitcoincashjs found. ' + 'Please make sure to require bitcoincashjs and check that submodules do' + ' not also include their own bitcoincashjs dependency.';\n    throw new Error(message);\n  }\n};\n\nbch.versionGuard(global._bch);\nglobal._bch = bch.version; // crypto\n\nbch.crypto = {};\nbch.crypto.BN = require('./crypto/bn');\nbch.crypto.ECDSA = require('./crypto/ecdsa');\nbch.crypto.Hash = require('./crypto/hash');\nbch.crypto.Random = require('./crypto/random');\nbch.crypto.Point = require('./crypto/point');\nbch.crypto.Signature = require('./crypto/signature'); // encoding\n\nbch.encoding = {};\nbch.encoding.Base58 = require('./encoding/base58');\nbch.encoding.Base58Check = require('./encoding/base58check');\nbch.encoding.BufferReader = require('./encoding/bufferreader');\nbch.encoding.BufferWriter = require('./encoding/bufferwriter');\nbch.encoding.Varint = require('./encoding/varint'); // utilities\n\nbch.util = {};\nbch.util.buffer = require('./util/buffer');\nbch.util.js = require('./util/js');\nbch.util.preconditions = require('./util/preconditions'); // errors thrown by the library\n\nbch.errors = require('./errors'); // main bitcoin library\n\nbch.Address = require('./address');\nbch.Block = require('./block');\nbch.BlockHeader = require('./block/blockheader');\nbch.HDPrivateKey = require('./hdprivatekey.js');\nbch.HDPublicKey = require('./hdpublickey.js');\nbch.MerkleBlock = require('./block/merkleblock');\nbch.Message = require('./message');\nbch.Mnemonic = require('./mnemonic');\nbch.Networks = require('./networks');\nbch.Opcode = require('./opcode');\nbch.PrivateKey = require('./privatekey');\nbch.PublicKey = require('./publickey');\nbch.Script = require('./script');\nbch.Transaction = require('./transaction');\nbch.Unit = require('./unit');\nbch.URI = require('./uri'); // dependencies, subject to change\n\nbch.deps = {};\nbch.deps.bnjs = require('bn.js');\nbch.deps.bs58 = require('bs58');\nbch.deps.Buffer = Buffer;\nbch.deps.elliptic = require('elliptic');\nbch.deps._ = require('lodash'); // Internal usage, exposed for testing/advanced tweaking\n\nbch.Transaction.sighash = require('./transaction/sighash');","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/node_modules/bitcoincashjs/src/bitcoincash.js"],"names":["bch","module","exports","version","require","versionGuard","undefined","message","Error","global","_bch","crypto","BN","ECDSA","Hash","Random","Point","Signature","encoding","Base58","Base58Check","BufferReader","BufferWriter","Varint","util","buffer","js","preconditions","errors","Address","Block","BlockHeader","HDPrivateKey","HDPublicKey","MerkleBlock","Message","Mnemonic","Networks","Opcode","PrivateKey","PublicKey","Script","Transaction","Unit","URI","deps","bnjs","bs58","Buffer","elliptic","_","sighash"],"mappings":"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","sourcesContent":["'use strict';\n\nvar bch = module.exports;\n\n// module information\nbch.version = 'v' + require('../package.json').version;\nbch.versionGuard = function(version) {\n  if (version !== undefined) {\n    var message = 'More than one instance of bitcoincashjs found. ' +\n      'Please make sure to require bitcoincashjs and check that submodules do' +\n      ' not also include their own bitcoincashjs dependency.';\n    throw new Error(message);\n  }\n};\nbch.versionGuard(global._bch);\nglobal._bch = bch.version;\n\n// crypto\nbch.crypto = {};\nbch.crypto.BN = require('./crypto/bn');\nbch.crypto.ECDSA = require('./crypto/ecdsa');\nbch.crypto.Hash = require('./crypto/hash');\nbch.crypto.Random = require('./crypto/random');\nbch.crypto.Point = require('./crypto/point');\nbch.crypto.Signature = require('./crypto/signature');\n\n// encoding\nbch.encoding = {};\nbch.encoding.Base58 = require('./encoding/base58');\nbch.encoding.Base58Check = require('./encoding/base58check');\nbch.encoding.BufferReader = require('./encoding/bufferreader');\nbch.encoding.BufferWriter = require('./encoding/bufferwriter');\nbch.encoding.Varint = require('./encoding/varint');\n\n// utilities\nbch.util = {};\nbch.util.buffer = require('./util/buffer');\nbch.util.js = require('./util/js');\nbch.util.preconditions = require('./util/preconditions');\n\n// errors thrown by the library\nbch.errors = require('./errors');\n\n// main bitcoin library\nbch.Address = require('./address');\nbch.Block = require('./block');\nbch.BlockHeader = require('./block/blockheader');\nbch.HDPrivateKey = require('./hdprivatekey.js');\nbch.HDPublicKey = require('./hdpublickey.js');\nbch.MerkleBlock = require('./block/merkleblock');\nbch.Message = require('./message');\nbch.Mnemonic = require('./mnemonic');\nbch.Networks = require('./networks');\nbch.Opcode = require('./opcode');\nbch.PrivateKey = require('./privatekey');\nbch.PublicKey = require('./publickey');\nbch.Script = require('./script');\nbch.Transaction = require('./transaction');\nbch.Unit = require('./unit');\nbch.URI = require('./uri');\n\n// dependencies, subject to change\nbch.deps = {};\nbch.deps.bnjs = require('bn.js');\nbch.deps.bs58 = require('bs58');\nbch.deps.Buffer = Buffer;\nbch.deps.elliptic = require('elliptic');\nbch.deps._ = require('lodash');\n\n// Internal usage, exposed for testing/advanced tweaking\nbch.Transaction.sighash = require('./transaction/sighash');\n"]},"metadata":{},"sourceType":"script"}