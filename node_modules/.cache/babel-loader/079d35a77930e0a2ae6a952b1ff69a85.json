{"ast":null,"code":"import _toConsumableArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { defaultStorageLimit } from '../../../api';\nimport { sliceArray } from '../../../helpers';\nimport { RECENT_TRADES_DATA, RECENT_TRADES_ERROR, RECENT_TRADES_FETCH, RECENT_TRADES_PUSH } from './constants';\nvar initialState = {\n  list: [],\n  loading: false\n};\nexport var convertTradeEventToTrade = function convertTradeEventToTrade(market, trade) {\n  return {\n    market,\n    id: trade.tid,\n    created_at: new Date(trade.date * 1000).toISOString(),\n    taker_type: trade.taker_type,\n    price: String(trade.price),\n    amount: String(trade.amount),\n    total: String(trade.total)\n  };\n};\nexport var convertTradeEventList = function convertTradeEventList(market, trades) {\n  return trades.map(function (trade) {\n    return convertTradeEventToTrade(market, trade);\n  });\n};\nexport var recentTradesReducer = function recentTradesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECENT_TRADES_DATA:\n      {\n        return {\n          list: sliceArray(action.payload, defaultStorageLimit()),\n          loading: false\n        };\n      }\n\n    case RECENT_TRADES_ERROR:\n      {\n        return {\n          list: [],\n          loading: false,\n          error: action.error\n        };\n      }\n\n    case RECENT_TRADES_FETCH:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true\n        });\n      }\n\n    case RECENT_TRADES_PUSH:\n      {\n        var lastTrades = convertTradeEventList(action.payload.market, action.payload.trades);\n        var updatedList = [].concat(_toConsumableArray(lastTrades), _toConsumableArray(state.list));\n        return _objectSpread(_objectSpread({}, state), {}, {\n          list: sliceArray(updatedList, defaultStorageLimit())\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/recentTrades/reducer.ts"],"names":["defaultStorageLimit","sliceArray","RECENT_TRADES_DATA","RECENT_TRADES_ERROR","RECENT_TRADES_FETCH","RECENT_TRADES_PUSH","initialState","list","loading","convertTradeEventToTrade","market","trade","id","tid","created_at","Date","date","toISOString","taker_type","price","String","amount","total","convertTradeEventList","trades","map","recentTradesReducer","state","action","type","payload","error","lastTrades","updatedList"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,cAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAIA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,mBAAlD,EAAuEC,kBAAvE,QAAiG,aAAjG;AASA,IAAMC,YAA+B,GAAG;AACpCC,EAAAA,IAAI,EAAE,EAD8B;AAEpCC,EAAAA,OAAO,EAAE;AAF2B,CAAxC;AAKA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,MAAD,EAAiBC,KAAjB;AAAA,SAA2D;AAC/FD,IAAAA,MAD+F;AAE/FE,IAAAA,EAAE,EAAED,KAAK,CAACE,GAFqF;AAG/FC,IAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASJ,KAAK,CAACK,IAAN,GAAa,IAAtB,EAA4BC,WAA5B,EAHmF;AAI/FC,IAAAA,UAAU,EAAEP,KAAK,CAACO,UAJ6E;AAK/FC,IAAAA,KAAK,EAAEC,MAAM,CAACT,KAAK,CAACQ,KAAP,CALkF;AAM/FE,IAAAA,MAAM,EAAED,MAAM,CAACT,KAAK,CAACU,MAAP,CANiF;AAO/FC,IAAAA,KAAK,EAAEF,MAAM,CAACT,KAAK,CAACW,KAAP;AAPkF,GAA3D;AAAA,CAAjC;AAUP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACb,MAAD,EAAiBc,MAAjB;AAAA,SACjCA,MAAM,CAACC,GAAP,CAAW,UAAAd,KAAK;AAAA,WAAIF,wBAAwB,CAACC,MAAD,EAASC,KAAT,CAA5B;AAAA,GAAhB,CADiC;AAAA,CAA9B;AAIP,OAAO,IAAMe,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAuD;AAAA,MAAtDC,KAAsD,uEAA9CrB,YAA8C;AAAA,MAAhCsB,MAAgC;;AACtF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK3B,kBAAL;AAAyB;AACrB,eAAO;AACHK,UAAAA,IAAI,EAAEN,UAAU,CAAC2B,MAAM,CAACE,OAAR,EAAiB9B,mBAAmB,EAApC,CADb;AAEHQ,UAAAA,OAAO,EAAE;AAFN,SAAP;AAIH;;AACD,SAAKL,mBAAL;AAA0B;AACtB,eAAO;AACHI,UAAAA,IAAI,EAAE,EADH;AAEHC,UAAAA,OAAO,EAAE,KAFN;AAGHuB,UAAAA,KAAK,EAAEH,MAAM,CAACG;AAHX,SAAP;AAKH;;AACD,SAAK3B,mBAAL;AAA0B;AACtB,+CACOuB,KADP;AAEInB,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD,SAAKH,kBAAL;AAAyB;AACrB,YAAM2B,UAAU,GAAGT,qBAAqB,CAACK,MAAM,CAACE,OAAP,CAAepB,MAAhB,EAAwBkB,MAAM,CAACE,OAAP,CAAeN,MAAvC,CAAxC;AACA,YAAMS,WAAW,gCACVD,UADU,sBAEVL,KAAK,CAACpB,IAFI,EAAjB;AAKA,+CACOoB,KADP;AAEIpB,UAAAA,IAAI,EAAEN,UAAU,CAACgC,WAAD,EAAcjC,mBAAmB,EAAjC;AAFpB;AAIH;;AACD;AACI,aAAO2B,KAAP;AAjCR;AAmCH,CApCM","sourcesContent":["import { defaultStorageLimit } from '../../../api';\nimport { sliceArray } from '../../../helpers';\nimport { CommonError } from '../../types';\nimport { PublicTrade } from '../../user/history';\nimport { RecentTradesActions } from './actions';\nimport { RECENT_TRADES_DATA, RECENT_TRADES_ERROR, RECENT_TRADES_FETCH, RECENT_TRADES_PUSH } from './constants';\nimport { PublicTradeEvent } from './types';\n\nexport interface RecentTradesState {\n    list: PublicTrade[];\n    loading: boolean;\n    error?: CommonError;\n}\n\nconst initialState: RecentTradesState = {\n    list: [],\n    loading: false,\n};\n\nexport const convertTradeEventToTrade = (market: string, trade: PublicTradeEvent): PublicTrade => ({\n    market,\n    id: trade.tid,\n    created_at: new Date(trade.date * 1000).toISOString(),\n    taker_type: trade.taker_type,\n    price: String(trade.price),\n    amount: String(trade.amount),\n    total: String(trade.total),\n});\n\nexport const convertTradeEventList = (market: string, trades: PublicTradeEvent[]): PublicTrade[] =>\n    trades.map(trade => convertTradeEventToTrade(market, trade));\n\n\nexport const recentTradesReducer = (state = initialState, action: RecentTradesActions) => {\n    switch (action.type) {\n        case RECENT_TRADES_DATA: {\n            return {\n                list: sliceArray(action.payload, defaultStorageLimit()),\n                loading: false,\n            };\n        }\n        case RECENT_TRADES_ERROR: {\n            return {\n                list: [],\n                loading: false,\n                error: action.error,\n            };\n        }\n        case RECENT_TRADES_FETCH: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case RECENT_TRADES_PUSH: {\n            const lastTrades = convertTradeEventList(action.payload.market, action.payload.trades);\n            const updatedList = [\n                ...lastTrades,\n                ...state.list,\n            ];\n\n            return {\n                ...state,\n                list: sliceArray(updatedList, defaultStorageLimit()),\n            };\n        }\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}