{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/Captcha/index.tsx\";\n\nimport * as React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GeetestCaptcha } from '../../containers';\nimport { useSetShouldGeetestReset } from '../../hooks';\nimport { selectConfigs, selectShouldGeetestReset, setGeetestCaptchaSuccess, setRecaptchaSuccess } from '../../modules';\nexport var CaptchaComponent = function CaptchaComponent(props) {\n  var dispatch = useDispatch();\n  var configs = useSelector(selectConfigs);\n  var shouldGeetestReset = useSelector(selectShouldGeetestReset);\n  var reCaptchaRef;\n  reCaptchaRef = React.useRef();\n  var geetestCaptchaRef = React.useRef(null);\n  React.useEffect(function () {\n    if (props.error || props.success) {\n      if (reCaptchaRef.current) {\n        reCaptchaRef.current.reset();\n      }\n    }\n  }, [props.error, props.success, reCaptchaRef]);\n  useSetShouldGeetestReset(props.error, props.success, geetestCaptchaRef);\n\n  var handleRecaptchaChange = function handleRecaptchaChange(value) {\n    dispatch(setRecaptchaSuccess({\n      captcha_response: value\n    }));\n  };\n\n  var handleGeetestCaptchaChange = function handleGeetestCaptchaChange(value) {\n    dispatch(setGeetestCaptchaSuccess({\n      captcha_response: value\n    }));\n  };\n\n  var renderCaptcha = function renderCaptcha() {\n    switch (configs.captcha_type) {\n      case 'recaptcha':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pg-captcha--recaptcha\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(ReCAPTCHA, {\n          ref: reCaptchaRef,\n          sitekey: configs.captcha_id,\n          onChange: handleRecaptchaChange,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }\n        }));\n\n      case 'geetest':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pg-captcha--geetest\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(GeetestCaptcha, {\n          ref: geetestCaptchaRef,\n          shouldCaptchaReset: shouldGeetestReset,\n          onSuccess: handleGeetestCaptchaChange,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }\n        }));\n\n      default:\n        return null;\n    }\n  };\n\n  return renderCaptcha();\n};\nexport var Captcha = React.memo(CaptchaComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/Captcha/index.tsx"],"names":["React","ReCAPTCHA","useDispatch","useSelector","GeetestCaptcha","useSetShouldGeetestReset","selectConfigs","selectShouldGeetestReset","setGeetestCaptchaSuccess","setRecaptchaSuccess","CaptchaComponent","props","dispatch","configs","shouldGeetestReset","reCaptchaRef","useRef","geetestCaptchaRef","useEffect","error","success","current","reset","handleRecaptchaChange","value","captcha_response","handleGeetestCaptchaChange","renderCaptcha","captcha_type","captcha_id","Captcha","memo"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,wBAAT,QAAyC,aAAzC;AACA,SAEIC,aAFJ,EAGIC,wBAHJ,EAIIC,wBAJJ,EAKIC,mBALJ,QAMO,eANP;AAQA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AACrC,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAMW,OAAO,GAAGV,WAAW,CAACG,aAAD,CAA3B;AACA,MAAMQ,kBAAkB,GAAGX,WAAW,CAACI,wBAAD,CAAtC;AAEA,MAAIQ,YAAJ;AAEAA,EAAAA,YAAY,GAAGf,KAAK,CAACgB,MAAN,EAAf;AACA,MAAMC,iBAAiB,GAAGjB,KAAK,CAACgB,MAAN,CAAa,IAAb,CAA1B;AAEAhB,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAM;AAClB,QAAIP,KAAK,CAACQ,KAAN,IAAeR,KAAK,CAACS,OAAzB,EAAkC;AAC9B,UAAIL,YAAY,CAACM,OAAjB,EAA0B;AACtBN,QAAAA,YAAY,CAACM,OAAb,CAAqBC,KAArB;AACH;AACJ;AACJ,GAND,EAMG,CAACX,KAAK,CAACQ,KAAP,EAAcR,KAAK,CAACS,OAApB,EAA6BL,YAA7B,CANH;AAQAV,EAAAA,wBAAwB,CAACM,KAAK,CAACQ,KAAP,EAAcR,KAAK,CAACS,OAApB,EAA6BH,iBAA7B,CAAxB;;AAEA,MAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAmB;AAC7CZ,IAAAA,QAAQ,CAACH,mBAAmB,CAAC;AAAEgB,MAAAA,gBAAgB,EAAED;AAApB,KAAD,CAApB,CAAR;AACH,GAFD;;AAIA,MAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACF,KAAD,EAAoC;AACnEZ,IAAAA,QAAQ,CAACJ,wBAAwB,CAAC;AAAEiB,MAAAA,gBAAgB,EAAED;AAApB,KAAD,CAAzB,CAAR;AACH,GAFD;;AAIA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,YAAQd,OAAO,CAACe,YAAhB;AACI,WAAK,WAAL;AACI,4BACI;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AACI,UAAA,GAAG,EAAEb,YADT;AAEI,UAAA,OAAO,EAAEF,OAAO,CAACgB,UAFrB;AAGI,UAAA,QAAQ,EAAEN,qBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;;AASJ,WAAK,SAAL;AACI,4BACI;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,cAAD;AACI,UAAA,GAAG,EAAEN,iBADT;AAEI,UAAA,kBAAkB,EAAEH,kBAFxB;AAGI,UAAA,SAAS,EAAEY,0BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;;AASJ;AACI,eAAO,IAAP;AAtBR;AAwBH,GAzBD;;AA2BA,SAAOC,aAAa,EAApB;AACH,CAxDM;AA0DP,OAAO,IAAMG,OAAO,GAAG9B,KAAK,CAAC+B,IAAN,CAAWrB,gBAAX,CAAhB","sourcesContent":["import * as React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GeetestCaptcha } from '../../containers';\nimport { useSetShouldGeetestReset } from '../../hooks';\nimport {\n    GeetestCaptchaResponse,\n    selectConfigs,\n    selectShouldGeetestReset,\n    setGeetestCaptchaSuccess,\n    setRecaptchaSuccess,\n} from '../../modules';\n\nexport const CaptchaComponent = props => {\n    const dispatch = useDispatch();\n    const configs = useSelector(selectConfigs);\n    const shouldGeetestReset = useSelector(selectShouldGeetestReset);\n\n    let reCaptchaRef;\n\n    reCaptchaRef = React.useRef();\n    const geetestCaptchaRef = React.useRef(null);\n\n    React.useEffect(() => {\n        if (props.error || props.success) {\n            if (reCaptchaRef.current) {\n                reCaptchaRef.current.reset();\n            }\n        }\n    }, [props.error, props.success, reCaptchaRef]);\n\n    useSetShouldGeetestReset(props.error, props.success, geetestCaptchaRef);\n\n    const handleRecaptchaChange = (value: string) => {\n        dispatch(setRecaptchaSuccess({ captcha_response: value }));\n    };\n\n    const handleGeetestCaptchaChange = (value?: GeetestCaptchaResponse) => {\n        dispatch(setGeetestCaptchaSuccess({ captcha_response: value }));\n    };\n\n    const renderCaptcha = () => {\n        switch (configs.captcha_type) {\n            case 'recaptcha':\n                return (\n                    <div className=\"pg-captcha--recaptcha\">\n                        <ReCAPTCHA\n                            ref={reCaptchaRef}\n                            sitekey={configs.captcha_id}\n                            onChange={handleRecaptchaChange}\n                        />\n                    </div>\n                );\n            case 'geetest':\n                return (\n                    <div className=\"pg-captcha--geetest\">\n                        <GeetestCaptcha\n                            ref={geetestCaptchaRef}\n                            shouldCaptchaReset={shouldGeetestReset}\n                            onSuccess={handleGeetestCaptchaChange}\n                        />\n                    </div>\n                );\n            default:\n                return null;\n        }\n    };\n\n    return renderCaptcha();\n};\n\nexport const Captcha = React.memo(CaptchaComponent);\n"]},"metadata":{},"sourceType":"module"}