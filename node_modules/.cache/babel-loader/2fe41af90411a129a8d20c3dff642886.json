{"ast":null,"code":"import _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/screens/ChangeForgottenPasswordScreen/index.tsx\";\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { ChangePassword } from '../../components';\nimport { setDocumentTitle } from '../../helpers';\nimport { changeForgotPasswordFetch as _changeForgotPasswordFetch, changeLanguage as _changeLanguage, entropyPasswordFetch, selectChangeForgotPasswordSuccess, selectConfigs, selectCurrentPasswordEntropy, selectMobileDeviceState } from '../../modules';\n\nvar ChangeForgottenPasswordComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChangeForgottenPasswordComponent, _React$Component);\n\n  var _super = _createSuper(ChangeForgottenPasswordComponent);\n\n  function ChangeForgottenPasswordComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ChangeForgottenPasswordComponent);\n\n    _this = _super.call(this, props);\n\n    _this.handleSendNewPassword = function (payload) {\n      var confirmToken = _this.state.confirmToken;\n\n      _this.props.changeForgotPasswordFetch(_objectSpread(_objectSpread({}, payload), {}, {\n        reset_password_token: confirmToken\n      }));\n    };\n\n    _this.state = {\n      confirmToken: ''\n    };\n    return _this;\n  }\n\n  _createClass(ChangeForgottenPasswordComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Change forgotten password');\n      var history = this.props.history;\n      var token = new URLSearchParams(history.location.search).get('reset_token');\n      var lang = new URLSearchParams(history.location.search).get('lang');\n\n      if (token) {\n        this.setState({\n          confirmToken: token\n        });\n      }\n\n      if (lang) {\n        this.props.changeLanguage(lang.toLowerCase());\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.changeForgotPassword && !this.props.changeForgotPassword) {\n        this.props.history.push('/signin');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isMobileDevice = _this$props.isMobileDevice,\n          configs = _this$props.configs,\n          currentPasswordEntropy = _this$props.currentPasswordEntropy;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-change-forgotten-password-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-change-forgotten-password-screen__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ChangePassword, {\n        handleChangePassword: this.handleSendNewPassword,\n        title: !isMobileDevice && this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.title'\n        }),\n        configs: configs,\n        currentPasswordEntropy: currentPasswordEntropy,\n        fetchCurrentPasswordEntropy: this.props.fetchCurrentPasswordEntropy,\n        hideOldPassword: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return ChangeForgottenPasswordComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    changeForgotPassword: selectChangeForgotPasswordSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    configs: selectConfigs(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changeForgotPasswordFetch: function changeForgotPasswordFetch(credentials) {\n      return dispatch(_changeForgotPasswordFetch(credentials));\n    },\n    changeLanguage: function changeLanguage(lang) {\n      return dispatch(_changeLanguage(lang));\n    },\n    fetchCurrentPasswordEntropy: function fetchCurrentPasswordEntropy(payload) {\n      return dispatch(entropyPasswordFetch(payload));\n    }\n  };\n};\n\nexport var ChangeForgottenPasswordScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(ChangeForgottenPasswordComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/screens/ChangeForgottenPasswordScreen/index.tsx"],"names":["React","injectIntl","connect","withRouter","compose","ChangePassword","setDocumentTitle","changeForgotPasswordFetch","changeLanguage","entropyPasswordFetch","selectChangeForgotPasswordSuccess","selectConfigs","selectCurrentPasswordEntropy","selectMobileDeviceState","ChangeForgottenPasswordComponent","props","handleSendNewPassword","payload","confirmToken","state","reset_password_token","history","token","URLSearchParams","location","search","get","lang","setState","toLowerCase","next","changeForgotPassword","push","isMobileDevice","configs","currentPasswordEntropy","intl","formatMessage","id","fetchCurrentPasswordEntropy","Component","mapStateToProps","mapDispatchToProps","dispatch","credentials","ChangeForgottenPasswordScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport {\n  connect,\n  MapDispatchToPropsFunction,\n  MapStateToProps,\n} from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { ChangePassword } from '../../components';\nimport { setDocumentTitle } from '../../helpers';\nimport {\n    changeForgotPasswordFetch,\n    changeLanguage,\n    Configs,\n    entropyPasswordFetch,\n    RootState, selectChangeForgotPasswordSuccess,\n    selectConfigs,\n    selectCurrentPasswordEntropy,\n    selectMobileDeviceState,\n} from '../../modules';\n\ninterface ChangeForgottenPasswordState {\n    confirmToken: string;\n}\n\ninterface ReduxProps {\n    changeForgotPassword?: boolean;\n    isMobileDevice: boolean;\n    configs: Configs;\n    currentPasswordEntropy: number;\n}\n\ninterface DispatchProps {\n    changeForgotPasswordFetch: typeof changeForgotPasswordFetch;\n    changeLanguage: typeof changeLanguage;\n    fetchCurrentPasswordEntropy: typeof entropyPasswordFetch;\n}\n\ninterface HistoryProps {\n    history: {\n        location: {\n            search: string;\n        };\n    };\n}\n\ntype Props = RouterProps & DispatchProps & HistoryProps & ReduxProps & IntlProps;\n\nclass ChangeForgottenPasswordComponent extends React.Component<Props, ChangeForgottenPasswordState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            confirmToken: '',\n        };\n    }\n\n    public componentDidMount() {\n        setDocumentTitle('Change forgotten password');\n        const { history } = this.props;\n        const token = new URLSearchParams(history.location.search).get('reset_token');\n        const lang = new URLSearchParams(history.location.search).get('lang');\n        if (token) {\n            this.setState({\n                confirmToken: token,\n            });\n        }\n        if (lang) {\n            this.props.changeLanguage(lang.toLowerCase());\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.changeForgotPassword && (!this.props.changeForgotPassword)) {\n            this.props.history.push('/signin');\n        }\n    }\n\n    public render() {\n        const { isMobileDevice, configs, currentPasswordEntropy } = this.props;\n\n        return (\n            <div className=\"pg-change-forgotten-password-screen\">\n                <div className=\"pg-change-forgotten-password-screen__container\">\n                    <ChangePassword\n                        handleChangePassword={this.handleSendNewPassword}\n                        title={!isMobileDevice && this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.title'})}\n                        configs={configs}\n                        currentPasswordEntropy={currentPasswordEntropy}\n                        fetchCurrentPasswordEntropy={this.props.fetchCurrentPasswordEntropy}\n                        hideOldPassword={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private handleSendNewPassword = payload => {\n        const { confirmToken } = this.state;\n        this.props.changeForgotPasswordFetch({\n            ...payload,\n            reset_password_token: confirmToken,\n        });\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    changeForgotPassword: selectChangeForgotPasswordSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    configs: selectConfigs(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        changeForgotPasswordFetch: credentials => dispatch(changeForgotPasswordFetch(credentials)),\n        changeLanguage: lang => dispatch(changeLanguage(lang)),\n        fetchCurrentPasswordEntropy: payload => dispatch(entropyPasswordFetch(payload)),\n    });\n\nexport const ChangeForgottenPasswordScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(ChangeForgottenPasswordComponent) as React.ComponentClass;\n"]},"metadata":{},"sourceType":"module"}