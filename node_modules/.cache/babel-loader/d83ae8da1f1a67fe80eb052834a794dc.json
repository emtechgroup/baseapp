{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(walletsAddressSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { walletsAddressData, walletsAddressError } from '../actions';\nvar walletsAddressOptions = {\n  apiVersion: 'peatio'\n};\nexport function walletsAddressSaga(action) {\n  var currency, url, _yield$call, address, currencies, state;\n\n  return _regeneratorRuntime.wrap(function walletsAddressSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          currency = action.payload.currency.toLocaleLowerCase();\n          url = \"/account/deposit_address/\".concat(currency);\n          _context.next = 5;\n          return call(API.get(walletsAddressOptions), url);\n\n        case 5:\n          _yield$call = _context.sent;\n          address = _yield$call.address;\n          currencies = _yield$call.currencies;\n          state = _yield$call.state;\n          _context.next = 11;\n          return put(walletsAddressData({\n            address,\n            currencies,\n            currency,\n            state\n          }));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: walletsAddressError\n            }\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/wallets/sagas/walletsAddressSaga.ts"],"names":["walletsAddressSaga","call","put","sendError","API","walletsAddressData","walletsAddressError","walletsAddressOptions","apiVersion","action","currency","payload","toLocaleLowerCase","url","get","address","currencies","state","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,kB;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,QAA6E,YAA7E;AAEA,IAAMC,qBAAqC,GAAG;AAC1CC,EAAAA,UAAU,EAAE;AAD8B,CAA9C;AAIA,OAAO,SAAUR,kBAAV,CAA6BS,MAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOC,UAAAA,QAFP,GAEkBD,MAAM,CAACE,OAAP,CAAeD,QAAf,CAAwBE,iBAAxB,EAFlB;AAGOC,UAAAA,GAHP,sCAGyCH,QAHzC;AAAA;AAIwC,iBAAMT,IAAI,CAACG,GAAG,CAACU,GAAJ,CAAQP,qBAAR,CAAD,EAAiCM,GAAjC,CAAV;;AAJxC;AAAA;AAISE,UAAAA,OAJT,eAISA,OAJT;AAIkBC,UAAAA,UAJlB,eAIkBA,UAJlB;AAI8BC,UAAAA,KAJ9B,eAI8BA,KAJ9B;AAAA;AAKC,iBAAMf,GAAG,CAACG,kBAAkB,CAAC;AACzBU,YAAAA,OADyB;AAEzBC,YAAAA,UAFyB;AAGzBN,YAAAA,QAHyB;AAIzBO,YAAAA;AAJyB,WAAD,CAAnB,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYC,iBAAMf,GAAG,CAACC,SAAS,CAAC;AAChBe,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEf;AADH;AAHE,WAAD,CAAV,CAAT;;AAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { walletsAddressData, walletsAddressError, WalletsAddressFetch } from '../actions';\n\nconst walletsAddressOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* walletsAddressSaga(action: WalletsAddressFetch) {\n    try {\n        const currency = action.payload.currency.toLocaleLowerCase();\n        const url = `/account/deposit_address/${currency}`;\n        const { address, currencies, state } = yield call(API.get(walletsAddressOptions), url);\n        yield put(walletsAddressData({\n            address,\n            currencies,\n            currency,\n            state,\n        }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: walletsAddressError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}