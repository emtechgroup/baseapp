{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(apiKeyDeleteSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { apiKeyDelete, apiKeys2FAModal, apiKeysError } from '../actions';\n\nvar deleteOptions = function deleteOptions(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function apiKeyDeleteSaga(action) {\n  var _action$payload, kid, totp_code;\n\n  return _regeneratorRuntime.wrap(function apiKeyDeleteSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, kid = _action$payload.kid, totp_code = _action$payload.totp_code;\n          _context.next = 4;\n          return call(API.delete(deleteOptions(getCsrfToken())), \"/resource/api_keys/\".concat(kid, \"?totp_code=\").concat(totp_code));\n\n        case 4:\n          _context.next = 6;\n          return put(apiKeyDelete({\n            kid\n          }));\n\n        case 6:\n          _context.next = 8;\n          return put(alertPush({\n            message: ['success.api_keys.deleted'],\n            type: 'success'\n          }));\n\n        case 8:\n          _context.next = 10;\n          return put(apiKeys2FAModal({\n            active: false\n          }));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: apiKeysError\n            }\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/apiKeys/sagas/apiKeyDeleteSaga.ts"],"names":["apiKeyDeleteSaga","call","put","alertPush","sendError","API","getCsrfToken","apiKeyDelete","apiKeys2FAModal","apiKeysError","deleteOptions","csrfToken","apiVersion","headers","action","payload","kid","totp_code","delete","message","type","active","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,gB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,YAAT,EAA0CC,eAA1C,EAA2DC,YAA3D,QAA+E,YAA/E;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAwC;AAC1D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,gBAAV,CAA2Bc,MAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAE4BA,MAAM,CAACC,OAFnC,EAESC,GAFT,mBAESA,GAFT,EAEcC,SAFd,mBAEcA,SAFd;AAAA;AAGC,iBAAMhB,IAAI,CAACI,GAAG,CAACa,MAAJ,CAAWR,aAAa,CAACJ,YAAY,EAAb,CAAxB,CAAD,+BAAkEU,GAAlE,wBAAmFC,SAAnF,EAAV;;AAHD;AAAA;AAIC,iBAAMf,GAAG,CAACK,YAAY,CAAC;AAACS,YAAAA;AAAD,WAAD,CAAb,CAAT;;AAJD;AAAA;AAKC,iBAAMd,GAAG,CAACC,SAAS,CAAC;AAAEgB,YAAAA,OAAO,EAAE,CAAC,0BAAD,CAAX;AAAyCC,YAAAA,IAAI,EAAE;AAA/C,WAAD,CAAV,CAAT;;AALD;AAAA;AAMC,iBAAMlB,GAAG,CAACM,eAAe,CAAC;AAAEa,YAAAA,MAAM,EAAE;AAAV,WAAD,CAAhB,CAAT;;AAND;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQC,iBAAMnB,GAAG,CAACE,SAAS,CAAC;AAChBkB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEhB;AADH;AAHE,WAAD,CAAV,CAAT;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { apiKeyDelete, ApiKeyDeleteFetch, apiKeys2FAModal, apiKeysError } from '../actions';\n\nconst deleteOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* apiKeyDeleteSaga(action: ApiKeyDeleteFetch) {\n    try {\n        const { kid, totp_code } = action.payload;\n        yield call(API.delete(deleteOptions(getCsrfToken())), `/resource/api_keys/${kid}?totp_code=${totp_code}`);\n        yield put(apiKeyDelete({kid}));\n        yield put(alertPush({ message: ['success.api_keys.deleted'], type: 'success' }));\n        yield put(apiKeys2FAModal({ active: false }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: apiKeysError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}