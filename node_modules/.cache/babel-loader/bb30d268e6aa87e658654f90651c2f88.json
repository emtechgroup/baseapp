{"ast":null,"code":"import _slicedToArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/ChangePassword/index.tsx\";\n\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\nimport { PasswordStrengthMeter } from '..';\nimport { CloseIcon } from '../../assets/images/CloseIcon';\nimport { PASSWORD_REGEX, passwordErrorFirstSolution, passwordErrorSecondSolution, passwordErrorThirdSolution } from '../../helpers';\nimport { CustomInput } from '../CustomInput';\nexport var ChangePasswordComponent = function ChangePasswordComponent(props) {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      oldPassword = _React$useState2[0],\n      setOldPassword = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      newPassword = _React$useState4[0],\n      setNewPassword = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      confirmationPassword = _React$useState6[0],\n      setConfirmationPassword = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      oldPasswordFocus = _React$useState8[0],\n      setOldPasswordFocus = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      newPasswordFocus = _React$useState10[0],\n      setNewPasswordFocus = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      confirmPasswordFocus = _React$useState12[0],\n      setConfirmPasswordFocus = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      passwordErrorFirstSolved = _React$useState14[0],\n      setPasswordErrorFirstSolved = _React$useState14[1];\n\n  var _React$useState15 = React.useState(false),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      passwordErrorSecondSolved = _React$useState16[0],\n      setPasswordErrorSecondSolved = _React$useState16[1];\n\n  var _React$useState17 = React.useState(false),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      passwordErrorThirdSolved = _React$useState18[0],\n      setPasswordErrorThirdSolved = _React$useState18[1];\n\n  var _React$useState19 = React.useState(false),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      passwordPopUp = _React$useState20[0],\n      setPasswordPopUp = _React$useState20[1];\n\n  var intl = useIntl();\n\n  var handleChangePassword = function handleChangePassword() {\n    var payload = props.hideOldPassword ? {\n      password: newPassword,\n      confirm_password: confirmationPassword\n    } : {\n      old_password: oldPassword,\n      new_password: newPassword,\n      confirm_password: confirmationPassword\n    };\n    props.handleChangePassword(payload);\n    setOldPassword('');\n    setNewPassword('');\n    setConfirmationPassword('');\n    setOldPasswordFocus(false);\n    setNewPasswordFocus(false);\n    setConfirmPasswordFocus(false);\n  };\n\n  var handleEnterPress = function handleEnterPress(event) {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (isValidForm()) {\n        handleChangePassword();\n      }\n    }\n  };\n\n  var handleChangeNewPassword = function handleChangeNewPassword(value) {\n    if (passwordErrorFirstSolution(value) && !passwordErrorFirstSolved) {\n      setPasswordErrorFirstSolved(true);\n    } else if (!passwordErrorFirstSolution(value) && passwordErrorFirstSolved) {\n      setPasswordErrorFirstSolved(false);\n    }\n\n    if (passwordErrorSecondSolution(value) && !passwordErrorSecondSolved) {\n      setPasswordErrorSecondSolved(true);\n    } else if (!passwordErrorSecondSolution(value) && passwordErrorSecondSolved) {\n      setPasswordErrorSecondSolved(false);\n    }\n\n    if (passwordErrorThirdSolution(value) && !passwordErrorThirdSolved) {\n      setPasswordErrorThirdSolved(true);\n    } else if (!passwordErrorThirdSolution(value) && passwordErrorThirdSolved) {\n      setPasswordErrorThirdSolved(false);\n    }\n\n    setNewPassword(value);\n    setTimeout(function () {\n      props.fetchCurrentPasswordEntropy({\n        password: value\n      });\n    }, 500);\n  };\n\n  var handleFocusNewPassword = function handleFocusNewPassword() {\n    setNewPasswordFocus(!newPassword);\n    setPasswordPopUp(!passwordPopUp);\n  };\n\n  var translate = function translate(key) {\n    return intl.formatMessage({\n      id: key\n    });\n  };\n\n  var isValidForm = function isValidForm() {\n    var isNewPasswordValid = newPassword.match(PASSWORD_REGEX);\n    var isConfirmPasswordValid = newPassword === confirmationPassword;\n    var isOldPasswordValid = !props.hideOldPassword && oldPassword || true;\n    return isOldPasswordValid && isNewPasswordValid && isConfirmPasswordValid;\n  };\n\n  var renderHeader = function renderHeader() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cr-email-form__options-group\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cr-email-form__option\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cr-email-form__option-inner\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, props.title, props.closeModal && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cr-email-form__cros-icon\",\n      onClick: props.closeModal,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      className: \"close-icon\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    })))));\n  };\n\n  var renderBody = function renderBody() {\n    var oldPasswordClass = cr('cr-email-form__group', {\n      'cr-email-form__group--focused': oldPasswordFocus\n    });\n    var newPasswordClass = cr('cr-email-form__group', {\n      'cr-email-form__group--focused': newPasswordFocus\n    });\n    var confirmPasswordClass = cr('cr-email-form__group', {\n      'cr-email-form__group--focused': confirmPasswordFocus\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pg-mobile-change-password__body\",\n      onKeyPress: handleEnterPress,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, !props.hideOldPassword && /*#__PURE__*/React.createElement(\"div\", {\n      className: oldPasswordClass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      type: \"password\",\n      label: intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password.old'\n      }),\n      placeholder: intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password.old'\n      }),\n      defaultLabel: \"Old password\",\n      handleChangeInput: setOldPassword,\n      inputValue: oldPassword,\n      handleFocusInput: function handleFocusInput() {\n        return setOldPasswordFocus(!oldPasswordFocus);\n      },\n      classNameLabel: \"cr-email-form__label\",\n      classNameInput: \"cr-email-form__input\",\n      autoFocus: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: newPasswordClass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      type: \"password\",\n      label: intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password.new'\n      }),\n      placeholder: intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password.new'\n      }),\n      defaultLabel: \"New password\",\n      handleChangeInput: handleChangeNewPassword,\n      inputValue: newPassword,\n      handleFocusInput: handleFocusNewPassword,\n      classNameLabel: \"cr-email-form__label\",\n      classNameInput: \"cr-email-form__input\",\n      autoFocus: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }), newPassword ? /*#__PURE__*/React.createElement(PasswordStrengthMeter, {\n      minPasswordEntropy: props.configs.password_min_entropy,\n      currentPasswordEntropy: props.currentPasswordEntropy,\n      passwordExist: newPassword !== '',\n      passwordErrorFirstSolved: passwordErrorFirstSolved,\n      passwordErrorSecondSolved: passwordErrorSecondSolved,\n      passwordErrorThirdSolved: passwordErrorThirdSolved,\n      passwordPopUp: passwordPopUp,\n      translate: translate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: confirmPasswordClass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      type: \"password\",\n      label: intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password.conf'\n      }),\n      placeholder: intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password.conf'\n      }),\n      defaultLabel: \"Password confirmation\",\n      handleChangeInput: setConfirmationPassword,\n      inputValue: confirmationPassword,\n      handleFocusInput: function handleFocusInput() {\n        return setConfirmPasswordFocus(!confirmPasswordFocus);\n      },\n      classNameLabel: \"cr-email-form__label\",\n      classNameInput: \"cr-email-form__input\",\n      autoFocus: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    })));\n  };\n\n  var renderFooter = function renderFooter() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pg-mobile-change-password__footer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      block: true,\n      disabled: !isValidForm(),\n      onClick: handleChangePassword,\n      size: \"lg\",\n      variant: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, intl.formatMessage({\n      id: 'page.body.profile.header.account.content.password.button.change'\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pg-mobile-change-password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, props.title && renderHeader(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pg-mobile-change-password__wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, renderBody(), renderFooter()));\n};\nexport var ChangePassword = React.memo(ChangePasswordComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/ChangePassword/index.tsx"],"names":["cr","React","Button","useIntl","PasswordStrengthMeter","CloseIcon","PASSWORD_REGEX","passwordErrorFirstSolution","passwordErrorSecondSolution","passwordErrorThirdSolution","CustomInput","ChangePasswordComponent","props","useState","oldPassword","setOldPassword","newPassword","setNewPassword","confirmationPassword","setConfirmationPassword","oldPasswordFocus","setOldPasswordFocus","newPasswordFocus","setNewPasswordFocus","confirmPasswordFocus","setConfirmPasswordFocus","passwordErrorFirstSolved","setPasswordErrorFirstSolved","passwordErrorSecondSolved","setPasswordErrorSecondSolved","passwordErrorThirdSolved","setPasswordErrorThirdSolved","passwordPopUp","setPasswordPopUp","intl","handleChangePassword","payload","hideOldPassword","password","confirm_password","old_password","new_password","handleEnterPress","event","key","preventDefault","isValidForm","handleChangeNewPassword","value","setTimeout","fetchCurrentPasswordEntropy","handleFocusNewPassword","translate","formatMessage","id","isNewPasswordValid","match","isConfirmPasswordValid","isOldPasswordValid","renderHeader","title","closeModal","renderBody","oldPasswordClass","newPasswordClass","confirmPasswordClass","configs","password_min_entropy","currentPasswordEntropy","renderFooter","ChangePassword","memo"],"mappings":"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","sourcesContent":["import cr from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\nimport { PasswordStrengthMeter } from '..';\nimport { CloseIcon } from '../../assets/images/CloseIcon';\nimport {\n    PASSWORD_REGEX,\n    passwordErrorFirstSolution,\n    passwordErrorSecondSolution,\n    passwordErrorThirdSolution,\n} from '../../helpers';\nimport { CustomInput } from '../CustomInput';\n\nexport const ChangePasswordComponent = props => {\n    const [oldPassword, setOldPassword] = React.useState('');\n    const [newPassword, setNewPassword] = React.useState('');\n    const [confirmationPassword, setConfirmationPassword] = React.useState('');\n    const [oldPasswordFocus, setOldPasswordFocus] = React.useState(false);\n    const [newPasswordFocus, setNewPasswordFocus] = React.useState(false);\n    const [confirmPasswordFocus, setConfirmPasswordFocus] = React.useState(false);\n    const [passwordErrorFirstSolved, setPasswordErrorFirstSolved] = React.useState(false);\n    const [passwordErrorSecondSolved, setPasswordErrorSecondSolved] = React.useState(false);\n    const [passwordErrorThirdSolved, setPasswordErrorThirdSolved] = React.useState(false);\n    const [passwordPopUp, setPasswordPopUp] = React.useState(false);\n\n    const intl = useIntl();\n\n    const handleChangePassword = () => {\n        const payload = props.hideOldPassword\n        ? {\n            password: newPassword,\n            confirm_password: confirmationPassword,\n        } : {\n            old_password: oldPassword,\n            new_password: newPassword,\n            confirm_password: confirmationPassword,\n        };\n\n        props.handleChangePassword(payload);\n\n        setOldPassword('');\n        setNewPassword('');\n        setConfirmationPassword('');\n        setOldPasswordFocus(false);\n        setNewPasswordFocus(false);\n        setConfirmPasswordFocus(false);\n    };\n\n    const handleEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n\n            if (isValidForm()) {\n                handleChangePassword();\n            }\n        }\n    };\n\n    const handleChangeNewPassword = (value: string) => {\n        if (passwordErrorFirstSolution(value) && !passwordErrorFirstSolved) {\n            setPasswordErrorFirstSolved(true);\n        } else if (!passwordErrorFirstSolution(value) && passwordErrorFirstSolved) {\n            setPasswordErrorFirstSolved(false);\n        }\n\n        if (passwordErrorSecondSolution(value) && !passwordErrorSecondSolved) {\n            setPasswordErrorSecondSolved(true);\n        } else if (!passwordErrorSecondSolution(value) && passwordErrorSecondSolved) {\n            setPasswordErrorSecondSolved(false);\n        }\n\n        if (passwordErrorThirdSolution(value) && !passwordErrorThirdSolved) {\n            setPasswordErrorThirdSolved(true);\n        } else if (!passwordErrorThirdSolution(value) && passwordErrorThirdSolved) {\n            setPasswordErrorThirdSolved(false);\n        }\n\n        setNewPassword(value);\n        setTimeout(() => {\n            props.fetchCurrentPasswordEntropy({ password: value });\n        }, 500);\n    };\n\n    const handleFocusNewPassword = () => {\n        setNewPasswordFocus(!newPassword);\n        setPasswordPopUp(!passwordPopUp);\n    };\n\n    const translate = (key: string) => intl.formatMessage({id: key});\n\n    const isValidForm = () => {\n        const isNewPasswordValid = newPassword.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = newPassword === confirmationPassword;\n        const isOldPasswordValid = (!props.hideOldPassword && oldPassword) || true;\n\n        return isOldPasswordValid && isNewPasswordValid && isConfirmPasswordValid;\n    };\n\n    const renderHeader = () => (\n        <div className=\"cr-email-form__options-group\">\n            <div className=\"cr-email-form__option\">\n                <div className=\"cr-email-form__option-inner\">\n                    {props.title}\n                    {props.closeModal && (\n                        <div className=\"cr-email-form__cros-icon\" onClick={props.closeModal}>\n                            <CloseIcon className=\"close-icon\" />\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n\n    const renderBody = () => {\n        const oldPasswordClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': oldPasswordFocus,\n        });\n\n        const newPasswordClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': newPasswordFocus,\n        });\n\n        const confirmPasswordClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': confirmPasswordFocus,\n        });\n\n        return (\n            <div className=\"pg-mobile-change-password__body\" onKeyPress={handleEnterPress}>\n                {!props.hideOldPassword &&\n                    <div className={oldPasswordClass}>\n                        <CustomInput\n                            type=\"password\"\n                            label={intl.formatMessage({id: 'page.body.profile.header.account.content.password.old'})}\n                            placeholder={intl.formatMessage({id: 'page.body.profile.header.account.content.password.old'})}\n                            defaultLabel=\"Old password\"\n                            handleChangeInput={setOldPassword}\n                            inputValue={oldPassword}\n                            handleFocusInput={() => setOldPasswordFocus(!oldPasswordFocus)}\n                            classNameLabel=\"cr-email-form__label\"\n                            classNameInput=\"cr-email-form__input\"\n                            autoFocus={true}\n                        />\n                    </div>\n                }\n                <div className={newPasswordClass}>\n                    <CustomInput\n                        type=\"password\"\n                        label={intl.formatMessage({id: 'page.body.profile.header.account.content.password.new'})}\n                        placeholder={intl.formatMessage({id: 'page.body.profile.header.account.content.password.new'})}\n                        defaultLabel=\"New password\"\n                        handleChangeInput={handleChangeNewPassword}\n                        inputValue={newPassword}\n                        handleFocusInput={handleFocusNewPassword}\n                        classNameLabel=\"cr-email-form__label\"\n                        classNameInput=\"cr-email-form__input\"\n                        autoFocus={false}\n                    />\n                    {newPassword ?\n                        <PasswordStrengthMeter\n                            minPasswordEntropy={props.configs.password_min_entropy}\n                            currentPasswordEntropy={props.currentPasswordEntropy}\n                            passwordExist={newPassword !== ''}\n                            passwordErrorFirstSolved={passwordErrorFirstSolved}\n                            passwordErrorSecondSolved={passwordErrorSecondSolved}\n                            passwordErrorThirdSolved={passwordErrorThirdSolved}\n                            passwordPopUp={passwordPopUp}\n                            translate={translate}\n                        /> : null}\n                </div>\n                <div className={confirmPasswordClass}>\n                    <CustomInput\n                        type=\"password\"\n                        label={intl.formatMessage({id: 'page.body.profile.header.account.content.password.conf'})}\n                        placeholder={intl.formatMessage({id: 'page.body.profile.header.account.content.password.conf'})}\n                        defaultLabel=\"Password confirmation\"\n                        handleChangeInput={setConfirmationPassword}\n                        inputValue={confirmationPassword}\n                        handleFocusInput={() => setConfirmPasswordFocus(!confirmPasswordFocus)}\n                        classNameLabel=\"cr-email-form__label\"\n                        classNameInput=\"cr-email-form__input\"\n                        autoFocus={false}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    const renderFooter = () => {\n        return (\n            <div className=\"pg-mobile-change-password__footer\">\n                <Button\n                    block={true}\n                    disabled={!isValidForm()}\n                    onClick={handleChangePassword}\n                    size=\"lg\"\n                    variant=\"primary\"\n                >\n                    {intl.formatMessage({id: 'page.body.profile.header.account.content.password.button.change'})}\n                </Button>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"pg-mobile-change-password\">\n            {props.title && renderHeader()}\n            <div className=\"pg-mobile-change-password__wrapper\">\n                {renderBody()}\n                {renderFooter()}\n            </div>\n        </div>\n    );\n};\n\nexport const ChangePassword = React.memo(ChangePasswordComponent);\n"]},"metadata":{},"sourceType":"module"}