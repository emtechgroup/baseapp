{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(toggle2faSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { toggle2faData, toggle2faError, toggleUser2fa } from '../actions';\n\nvar enable2faOptions = function enable2faOptions(csrfToken) {\n  return {\n    apiVersion: 'barong',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function toggle2faSaga(action) {\n  var enable, code;\n  return _regeneratorRuntime.wrap(function toggle2faSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          enable = action.payload.enable;\n          code = {\n            code: action.payload.code\n          };\n          _context.next = 5;\n          return call(API.post(enable2faOptions(getCsrfToken())), \"/resource/otp/\".concat(enable ? 'enable' : 'disable'), code);\n\n        case 5:\n          _context.next = 7;\n          return put(toggle2faData());\n\n        case 7:\n          _context.next = 9;\n          return put(toggleUser2fa());\n\n        case 9:\n          _context.next = 11;\n          return put(alertPush({\n            message: [\"success.otp.\".concat(enable ? 'enabled' : 'disabled')],\n            type: 'success'\n          }));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: toggle2faError\n            }\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/profile/sagas/toggle2faSaga.ts"],"names":["toggle2faSaga","call","put","alertPush","sendError","API","getCsrfToken","toggle2faData","toggle2faError","toggleUser2fa","enable2faOptions","csrfToken","apiVersion","headers","action","enable","payload","code","post","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,a;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwDC,aAAxD,QAA6E,YAA7E;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAwC;AAC7D,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUX,aAAV,CAAwBc,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOC,UAAAA,MAFP,GAEgBD,MAAM,CAACE,OAAP,CAAeD,MAF/B;AAGOE,UAAAA,IAHP,GAGc;AAAEA,YAAAA,IAAI,EAAEH,MAAM,CAACE,OAAP,CAAeC;AAAvB,WAHd;AAAA;AAKC,iBAAMhB,IAAI,CAACI,GAAG,CAACa,IAAJ,CAASR,gBAAgB,CAACJ,YAAY,EAAb,CAAzB,CAAD,0BAA8DS,MAAM,GAAG,QAAH,GAAc,SAAlF,GAA+FE,IAA/F,CAAV;;AALD;AAAA;AAMC,iBAAMf,GAAG,CAACK,aAAa,EAAd,CAAT;;AAND;AAAA;AAOC,iBAAML,GAAG,CAACO,aAAa,EAAd,CAAT;;AAPD;AAAA;AAQC,iBAAMP,GAAG,CAACC,SAAS,CAAC;AAACgB,YAAAA,OAAO,EAAE,uBAAgBJ,MAAM,GAAG,SAAH,GAAe,UAArC,EAAV;AAA8DK,YAAAA,IAAI,EAAE;AAApE,WAAD,CAAV,CAAT;;AARD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUC,iBAAMlB,GAAG,CAACE,SAAS,CAAC;AAChBiB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEhB;AADH;AAHE,WAAD,CAAV,CAAT;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { toggle2faData, toggle2faError, Toggle2FAFetch, toggleUser2fa } from '../actions';\n\nconst enable2faOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'barong',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* toggle2faSaga(action: Toggle2FAFetch) {\n    try {\n        const enable = action.payload.enable;\n        const code = { code: action.payload.code};\n\n        yield call(API.post(enable2faOptions(getCsrfToken())), `/resource/otp/${enable ? 'enable' : 'disable'}`, code);\n        yield put(toggle2faData());\n        yield put(toggleUser2fa());\n        yield put(alertPush({message: [`success.otp.${enable ? 'enabled' : 'disabled'}`], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: toggle2faError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}