{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(historySaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, defaultStorageLimit } from '../../../../api';\nimport { getHistorySagaParam, sliceArray } from '../../../../helpers';\nimport { failHistory, successHistory } from '../actions';\nvar config = {\n  apiVersion: 'peatio'\n};\nexport function historySaga(action) {\n  var _action$payload, type, limit, page, coreEndpoint, params, data, nextPageExists, testActionPayload, testParams, checkData, updatedData;\n\n  return _regeneratorRuntime.wrap(function historySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, type = _action$payload.type, limit = _action$payload.limit, page = _action$payload.page;\n          coreEndpoint = {\n            deposits: '/account/deposits',\n            withdraws: '/account/withdraws',\n            trades: '/market/trades'\n          };\n          params = getHistorySagaParam(action.payload);\n          _context.next = 6;\n          return call(API.get(config), \"\".concat(coreEndpoint[type], \"?\").concat(params));\n\n        case 6:\n          data = _context.sent;\n          nextPageExists = false;\n\n          if (!(limit && data.length === limit)) {\n            _context.next = 15;\n            break;\n          }\n\n          testActionPayload = _objectSpread(_objectSpread({}, action.payload), {}, {\n            page: (page + 1) * limit,\n            limit: 1\n          });\n          testParams = getHistorySagaParam(testActionPayload);\n          _context.next = 13;\n          return call(API.get(config), \"\".concat(coreEndpoint[type], \"?\").concat(testParams));\n\n        case 13:\n          checkData = _context.sent;\n\n          if (checkData.length === 1) {\n            nextPageExists = true;\n          }\n\n        case 15:\n          updatedData = data;\n\n          if (type === 'trades') {\n            updatedData = sliceArray(data, defaultStorageLimit());\n          }\n\n          _context.next = 19;\n          return put(successHistory({\n            list: updatedData,\n            page,\n            nextPageExists\n          }));\n\n        case 19:\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 25;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: failHistory\n            }\n          }));\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 21]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/history/sagas/historySaga.ts"],"names":["historySaga","call","put","sendError","API","defaultStorageLimit","getHistorySagaParam","sliceArray","failHistory","successHistory","config","apiVersion","action","payload","type","limit","page","coreEndpoint","deposits","withdraws","trades","params","get","data","nextPageExists","length","testActionPayload","testParams","checkData","updatedData","list","error","processingType","extraOptions","actionError"],"mappings":";;;oDAUiBA,W;;AAVjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,EAAcC,mBAAd,QAAyD,iBAAzD;AACA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,qBAAhD;AACA,SAASC,WAAT,EAAoCC,cAApC,QAA0D,YAA1D;AAEA,IAAMC,MAAsB,GAAG;AAC3BC,EAAAA,UAAU,EAAE;AADe,CAA/B;AAIA,OAAO,SAAUX,WAAV,CAAsBY,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAE+BA,MAAM,CAACC,OAFtC,EAESC,IAFT,mBAESA,IAFT,EAEeC,KAFf,mBAEeA,KAFf,EAEsBC,IAFtB,mBAEsBA,IAFtB;AAGOC,UAAAA,YAHP,GAGsB;AACjBC,YAAAA,QAAQ,EAAE,mBADO;AAEjBC,YAAAA,SAAS,EAAE,oBAFM;AAGjBC,YAAAA,MAAM,EAAE;AAHS,WAHtB;AAQOC,UAAAA,MARP,GAQgBf,mBAAmB,CAACM,MAAM,CAACC,OAAR,CARnC;AAAA;AASc,iBAAMZ,IAAI,CAACG,GAAG,CAACkB,GAAJ,CAAQZ,MAAR,CAAD,YAAqBO,YAAY,CAACH,IAAD,CAAjC,cAA2CO,MAA3C,EAAV;;AATd;AASOE,UAAAA,IATP;AAWKC,UAAAA,cAXL,GAWsB,KAXtB;;AAAA,gBAaKT,KAAK,IAAIQ,IAAI,CAACE,MAAL,KAAgBV,KAb9B;AAAA;AAAA;AAAA;;AAcWW,UAAAA,iBAdX,mCAeYd,MAAM,CAACC,OAfnB;AAgBSG,YAAAA,IAAI,EAAE,CAACA,IAAI,GAAG,CAAR,IAAaD,KAhB5B;AAiBSA,YAAAA,KAAK,EAAE;AAjBhB;AAmBWY,UAAAA,UAnBX,GAmBwBrB,mBAAmB,CAACoB,iBAAD,CAnB3C;AAAA;AAoBuB,iBAAMzB,IAAI,CAACG,GAAG,CAACkB,GAAJ,CAAQZ,MAAR,CAAD,YAAqBO,YAAY,CAACH,IAAD,CAAjC,cAA2Ca,UAA3C,EAAV;;AApBvB;AAoBWC,UAAAA,SApBX;;AAsBK,cAAIA,SAAS,CAACH,MAAV,KAAqB,CAAzB,EAA4B;AACxBD,YAAAA,cAAc,GAAG,IAAjB;AACH;;AAxBN;AA0BKK,UAAAA,WA1BL,GA0BmBN,IA1BnB;;AA4BC,cAAIT,IAAI,KAAK,QAAb,EAAuB;AACnBe,YAAAA,WAAW,GAAGtB,UAAU,CAACgB,IAAD,EAAOlB,mBAAmB,EAA1B,CAAxB;AACH;;AA9BF;AAgCC,iBAAMH,GAAG,CAACO,cAAc,CAAC;AAAEqB,YAAAA,IAAI,EAAED,WAAR;AAAqBb,YAAAA,IAArB;AAA2BQ,YAAAA;AAA3B,WAAD,CAAf,CAAT;;AAhCD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkCC,iBAAMtB,GAAG,CAACC,SAAS,CAAC;AAChB4B,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAE1B;AADH;AAHE,WAAD,CAAV,CAAT;;AAlCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, defaultStorageLimit, RequestOptions } from '../../../../api';\nimport { getHistorySagaParam, sliceArray } from '../../../../helpers';\nimport { failHistory, HistoryFetch, successHistory } from '../actions';\n\nconst config: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* historySaga(action: HistoryFetch) {\n    try {\n        const { type, limit, page } = action.payload;\n        const coreEndpoint = {\n            deposits: '/account/deposits',\n            withdraws: '/account/withdraws',\n            trades: '/market/trades',\n        };\n        const params = getHistorySagaParam(action.payload);\n        const data = yield call(API.get(config), `${coreEndpoint[type]}?${params}`);\n\n        let nextPageExists = false;\n\n        if (limit && data.length === limit) {\n            const testActionPayload = {\n                ...action.payload,\n                page: (page + 1) * limit,\n                limit: 1,\n            };\n            const testParams = getHistorySagaParam(testActionPayload);\n            const checkData = yield call(API.get(config), `${coreEndpoint[type]}?${testParams}`);\n\n            if (checkData.length === 1) {\n                nextPageExists = true;\n            }\n        }\n        let updatedData = data;\n\n        if (type === 'trades') {\n            updatedData = sliceArray(data, defaultStorageLimit());\n        }\n\n        yield put(successHistory({ list: updatedData, page, nextPageExists }));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: failHistory,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}