{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/Customization/Themes/ColorSettings/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { handleConvertColorCode } from '../';\nimport { ArrowIcon } from '../../../../assets/images/customization/ArrowIcon';\nexport var ColorSettings = /*#__PURE__*/function (_React$Component) {\n  _inherits(ColorSettings, _React$Component);\n\n  var _super = _createSuper(ColorSettings);\n\n  function ColorSettings() {\n    var _this;\n\n    _classCallCheck(this, ColorSettings);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      currentItemColor: undefined\n    };\n\n    _this.getCurrentItemColor = function (item) {\n      var currentItemColor = _this.state.currentItemColor;\n      var bodyStyles = window.getComputedStyle(document.body);\n      var grbItemColor = handleConvertColorCode(item.key);\n      return currentItemColor || bodyStyles.getPropertyValue(grbItemColor);\n    };\n\n    _this.setCurrentItemColor = function (color) {\n      var _this$props = _this.props,\n          handleTriggerChartRebuild = _this$props.handleTriggerChartRebuild,\n          item = _this$props.item;\n      var rootElement = document.documentElement;\n      var newItemColor = color && color.rgb && \"\".concat(color.rgb.r, \", \").concat(color.rgb.g, \", \").concat(color.rgb.b);\n\n      if (rootElement && newItemColor) {\n        _this.handleSetCurrentItemColor(newItemColor);\n\n        rootElement.style.setProperty(item.key, newItemColor);\n        handleTriggerChartRebuild && handleTriggerChartRebuild();\n      }\n    };\n\n    _this.handleSetCurrentItemColor = function (colorToSet) {\n      if (colorToSet) {\n        _this.setState({\n          currentItemColor: \"rgb(\".concat(colorToSet, \")\")\n        });\n      } else {\n        _this.setState({\n          currentItemColor: ''\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ColorSettings, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var item = this.props.item;\n\n      if (item && prevProps.item && JSON.stringify(item) !== JSON.stringify(prevProps.item)) {\n        this.handleSetCurrentItemColor();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          handleCloseColorSettings = _this$props2.handleCloseColorSettings,\n          item = _this$props2.item,\n          translate = _this$props2.translate;\n      var settingsClass = classnames('pg-customization-color-settings', {\n        'pg-customization-color-settings--open': item.key\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: settingsClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-color-settings__header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-color-settings__header__chevron\",\n        onClick: function onClick(e) {\n          return handleCloseColorSettings();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ArrowIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      })), item.title ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 35\n        }\n      }, translate(item.title)) : null), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-color-settings__body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SketchPicker, {\n        color: this.getCurrentItemColor(item),\n        onChangeComplete: this.setCurrentItemColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return ColorSettings;\n}(React.Component);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/Customization/Themes/ColorSettings/index.tsx"],"names":["classnames","React","SketchPicker","handleConvertColorCode","ArrowIcon","ColorSettings","state","currentItemColor","undefined","getCurrentItemColor","item","bodyStyles","window","getComputedStyle","document","body","grbItemColor","key","getPropertyValue","setCurrentItemColor","color","props","handleTriggerChartRebuild","rootElement","documentElement","newItemColor","rgb","r","g","b","handleSetCurrentItemColor","style","setProperty","colorToSet","setState","prevProps","JSON","stringify","handleCloseColorSettings","translate","settingsClass","e","title","Component"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { handleConvertColorCode } from '../';\nimport { ArrowIcon } from '../../../../assets/images/customization/ArrowIcon';\nimport { ThemeColorTitleInterface } from '../../../../themes';\n\ninterface OwnProps {\n    handleCloseColorSettings: () => void;\n    item: ThemeColorTitleInterface;\n    translate: (key: string) => string;\n    handleTriggerChartRebuild?: () => void;\n}\n\ninterface State {\n    currentItemColor?: string;\n}\n\ntype Props = OwnProps;\n\nexport class ColorSettings extends React.Component<Props, State> {\n    public state = {\n        currentItemColor: undefined,\n    };\n\n    public componentDidUpdate(prevProps: Props) {\n        const { item } = this.props;\n\n        if (item && prevProps.item && JSON.stringify(item) !== JSON.stringify(prevProps.item)) {\n            this.handleSetCurrentItemColor();\n        }\n    }\n\n    public render() {\n        const {\n            handleCloseColorSettings,\n            item,\n            translate,\n        } = this.props;\n\n        const settingsClass = classnames('pg-customization-color-settings', {\n            'pg-customization-color-settings--open': item.key,\n        });\n\n        return (\n            <div className={settingsClass}>\n                <div className=\"pg-customization-color-settings__header\">\n                    <div\n                        className=\"pg-customization-color-settings__header__chevron\"\n                        onClick={e => handleCloseColorSettings()}\n                    >\n                        <ArrowIcon />\n                    </div>\n                    {item.title ? <span>{translate(item.title)}</span> : null}\n                </div>\n                <div className=\"pg-customization-color-settings__body\">\n                    <SketchPicker\n                        color={ this.getCurrentItemColor(item) }\n                        onChangeComplete={ this.setCurrentItemColor }\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private getCurrentItemColor = (item: ThemeColorTitleInterface) => {\n        const { currentItemColor } = this.state;\n        const bodyStyles = window.getComputedStyle(document.body);\n        const grbItemColor = handleConvertColorCode(item.key);\n\n        return currentItemColor || bodyStyles.getPropertyValue(grbItemColor);\n    };\n\n    private setCurrentItemColor = color => {\n        const { handleTriggerChartRebuild, item } = this.props;\n        const rootElement = document.documentElement;\n        const newItemColor = color && color.rgb && `${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}`;\n\n        if (rootElement && newItemColor) {\n            this.handleSetCurrentItemColor(newItemColor);\n            rootElement.style.setProperty(item.key, newItemColor);\n            handleTriggerChartRebuild && handleTriggerChartRebuild();\n        }\n    };\n\n    private handleSetCurrentItemColor = (colorToSet?: string) => {\n        if (colorToSet) {\n            this.setState({ currentItemColor: `rgb(${colorToSet})` });\n        } else {\n            this.setState({ currentItemColor: '' });\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}