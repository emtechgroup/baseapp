{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n// eslint-disable\nimport { Decimal } from '../components/Decimal';\nimport { DEFAULT_CCY_PRECISION } from '../constants';\nimport { handleCCYPrecision } from './';\n\nvar findMarket = function findMarket(askUnit, bidUnit, markets) {\n  var _iterator = _createForOfIteratorHelper(markets),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var market = _step.value;\n\n      if (market.base_unit === askUnit && market.quote_unit === bidUnit || market.base_unit === bidUnit && market.quote_unit === askUnit) {\n        return market;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n};\n\nvar isMarketPresent = function isMarketPresent(askUnit, bidUnit, markets) {\n  return findMarket(askUnit, bidUnit, markets) !== null;\n};\n\nvar findMarketTicker = function findMarketTicker(marketPair, marketTickers) {\n  return marketTickers[marketPair];\n};\n\nvar getWalletTotal = function getWalletTotal(wallet) {\n  return (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n};\n\nexport var estimateWithMarket = function estimateWithMarket(targetCurrency, walletCurrency, walletTotal, currencies, markets, marketTickers) {\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var formattedWalletCurrency = walletCurrency.toLowerCase();\n  var market = findMarket(formattedTargetCurrency, formattedWalletCurrency, markets);\n  var marketTicker = findMarketTicker(market && market.id || '', marketTickers);\n  var targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n\n  if (formattedTargetCurrency === formattedWalletCurrency) {\n    return Number(Decimal.format(walletTotal, targetCurrencyPrecision));\n  }\n\n  if (market && marketTicker) {\n    if (formattedTargetCurrency === market.base_unit) {\n      var precisedValue = Number(Decimal.format(walletTotal * (Number(marketTicker.last) !== 0 ? 1 / Number(marketTicker.last) : 0), targetCurrencyPrecision));\n      return precisedValue;\n    } else {\n      var _precisedValue = Number(Decimal.format(walletTotal * Number(marketTicker.last), targetCurrencyPrecision));\n\n      return _precisedValue;\n    }\n  }\n\n  return 0;\n};\n\nvar estimateWithoutMarket = function estimateWithoutMarket(targetCurrency, walletCurrency, walletTotal, currencies, markets, marketTickers) {\n  var secondaryCurrencies = [];\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var formattedWalletCurrency = walletCurrency.toLowerCase();\n\n  var _iterator2 = _createForOfIteratorHelper(markets),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _market = _step2.value;\n\n      if (_market.base_unit === formattedTargetCurrency) {\n        secondaryCurrencies.push(_market.quote_unit);\n      }\n\n      if (_market.quote_unit === formattedTargetCurrency) {\n        secondaryCurrencies.push(_market.base_unit);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var selectedSecondaryCurrency = '';\n\n  outer: for (var _i = 0, _secondaryCurrencies = secondaryCurrencies; _i < _secondaryCurrencies.length; _i++) {\n    var secondaryCurrency = _secondaryCurrencies[_i];\n\n    var _iterator3 = _createForOfIteratorHelper(markets),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var market = _step3.value;\n\n        if (market.base_unit === secondaryCurrency && market.quote_unit === formattedWalletCurrency || market.quote_unit === secondaryCurrency && market.base_unit === formattedWalletCurrency) {\n          selectedSecondaryCurrency = secondaryCurrency;\n          break outer;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  if (selectedSecondaryCurrency) {\n    var secondaryCurrencyValue = estimateWithMarket(selectedSecondaryCurrency, formattedWalletCurrency, walletTotal, currencies, markets, marketTickers);\n    return estimateWithMarket(targetCurrency, selectedSecondaryCurrency, secondaryCurrencyValue, currencies, markets, marketTickers);\n  } else {// 'No secondary currency found for', wallet.currency\n  }\n\n  return 0;\n};\n\nexport var estimateValue = function estimateValue(targetCurrency, currencies, wallets, markets, marketTickers) {\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var estimatedValue = 0;\n\n  if (wallets && wallets.length) {\n    var _iterator4 = _createForOfIteratorHelper(wallets),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var wallet = _step4.value;\n        var formattedWalletCurrency = wallet.currency.toLowerCase();\n\n        if (formattedWalletCurrency === formattedTargetCurrency) {\n          var walletTotal = (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n          estimatedValue += walletTotal;\n        } else if (isMarketPresent(formattedTargetCurrency, formattedWalletCurrency, markets)) {\n          estimatedValue += estimateWithMarket(formattedTargetCurrency, formattedWalletCurrency, getWalletTotal(wallet), currencies, markets, marketTickers);\n        } else {\n          estimatedValue += estimateWithoutMarket(formattedTargetCurrency, wallet.currency, getWalletTotal(wallet), currencies, markets, marketTickers);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n\n  var targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n  var precisedEstimatedValue = Decimal.format(estimatedValue, targetCurrencyPrecision);\n  return precisedEstimatedValue;\n};\nexport var estimateUnitValue = function estimateUnitValue(targetCurrency, currentCurrency, total, currencies, markets, marketTickers) {\n  var estimated = estimateWithMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers) || estimateWithoutMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers);\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n  return Decimal.format(estimated, targetCurrencyPrecision);\n};\nexport var findPrecision = function findPrecision(unit, markets) {\n  var _iterator5 = _createForOfIteratorHelper(markets),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var market = _step5.value;\n\n      if (market.base_unit === unit) {\n        return market.amount_precision;\n      }\n\n      if (market.quote_unit === unit) {\n        return market.price_precision;\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return 4;\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/helpers/estimateValue.ts"],"names":["Decimal","DEFAULT_CCY_PRECISION","handleCCYPrecision","findMarket","askUnit","bidUnit","markets","market","base_unit","quote_unit","isMarketPresent","findMarketTicker","marketPair","marketTickers","getWalletTotal","wallet","Number","balance","locked","estimateWithMarket","targetCurrency","walletCurrency","walletTotal","currencies","formattedTargetCurrency","toLowerCase","formattedWalletCurrency","marketTicker","id","targetCurrencyPrecision","format","precisedValue","last","estimateWithoutMarket","secondaryCurrencies","push","selectedSecondaryCurrency","outer","secondaryCurrency","secondaryCurrencyValue","estimateValue","wallets","estimatedValue","length","currency","precisedEstimatedValue","estimateUnitValue","currentCurrency","total","estimated","findPrecision","unit","amount_precision","price_precision"],"mappings":"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","sourcesContent":["// eslint-disable\nimport { Decimal } from '../components/Decimal';\nimport { WalletItemProps } from '../components/WalletItem';\nimport { DEFAULT_CCY_PRECISION } from '../constants';\nimport { Currency } from '../modules/public/currencies';\nimport { Market, Ticker } from '../modules/public/markets';\nimport { handleCCYPrecision } from './';\n\nexport interface MarketTicker {\n    [key: string]: Ticker;\n}\n\nconst findMarket = (askUnit: string, bidUnit: string, markets: Market[]): Market | null => {\n    for (const market of markets) {\n        if ((market.base_unit === askUnit && market.quote_unit === bidUnit) ||\n            (market.base_unit === bidUnit && market.quote_unit === askUnit)) {\n            return market;\n        }\n    }\n\n    return null;\n};\n\nconst isMarketPresent = (askUnit: string, bidUnit: string, markets: Market[]): boolean => {\n    return (findMarket(askUnit, bidUnit, markets) !== null);\n};\n\nconst findMarketTicker = (marketPair: string, marketTickers: MarketTicker) => {\n    return marketTickers[marketPair];\n};\n\nconst getWalletTotal = (wallet: WalletItemProps): number => {\n    return (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n};\n\nexport const estimateWithMarket = (targetCurrency: string, walletCurrency: string, walletTotal: number, currencies: Currency[], markets: Market[], marketTickers: MarketTicker): number => {\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    const formattedWalletCurrency = walletCurrency.toLowerCase();\n    const market = findMarket(formattedTargetCurrency, formattedWalletCurrency, markets);\n    const marketTicker = findMarketTicker((market && market.id) || '', marketTickers);\n    const targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n\n    if (formattedTargetCurrency === formattedWalletCurrency) {\n        return Number(Decimal.format(walletTotal, targetCurrencyPrecision));\n    }\n\n    if (market && marketTicker) {\n        if (formattedTargetCurrency === market.base_unit) {\n            const precisedValue = Number(Decimal.format(walletTotal * (Number(marketTicker.last) !== 0 ? 1 / Number(marketTicker.last) : 0), targetCurrencyPrecision));\n\n            return precisedValue;\n        } else {\n            const precisedValue = Number(Decimal.format(walletTotal * Number(marketTicker.last), targetCurrencyPrecision));\n\n            return precisedValue;\n        }\n    }\n\n    return 0;\n};\n\nconst estimateWithoutMarket = (targetCurrency: string, walletCurrency: string, walletTotal: number, currencies: Currency[], markets: Market[], marketTickers: MarketTicker): number => {\n    const secondaryCurrencies: string[] = [];\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    const formattedWalletCurrency = walletCurrency.toLowerCase();\n\n    for (const market of markets) {\n        if (market.base_unit === formattedTargetCurrency) {\n            secondaryCurrencies.push(market.quote_unit);\n        }\n        if (market.quote_unit === formattedTargetCurrency) {\n            secondaryCurrencies.push(market.base_unit);\n        }\n    }\n\n    let selectedSecondaryCurrency = '';\n    outer:\n        for (const secondaryCurrency of secondaryCurrencies) {\n            for (const market of markets) {\n                if ((market.base_unit === secondaryCurrency && market.quote_unit === formattedWalletCurrency) ||\n                    (market.quote_unit === secondaryCurrency && market.base_unit === formattedWalletCurrency)) {\n                    selectedSecondaryCurrency = secondaryCurrency;\n                    break outer;\n                }\n            }\n        }\n\n    if (selectedSecondaryCurrency) {\n        const secondaryCurrencyValue = estimateWithMarket(selectedSecondaryCurrency, formattedWalletCurrency, walletTotal, currencies, markets, marketTickers);\n\n        return estimateWithMarket(targetCurrency, selectedSecondaryCurrency, secondaryCurrencyValue, currencies, markets, marketTickers);\n    } else {\n        // 'No secondary currency found for', wallet.currency\n    }\n\n    return 0;\n};\n\nexport const estimateValue = (targetCurrency: string, currencies: Currency[], wallets: WalletItemProps[], markets: Market[], marketTickers: MarketTicker): string => {\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    let estimatedValue = 0;\n\n    if (wallets && wallets.length) {\n        for (const wallet of wallets) {\n            const formattedWalletCurrency = wallet.currency.toLowerCase();\n\n            if (formattedWalletCurrency === formattedTargetCurrency) {\n                const walletTotal = (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n                estimatedValue += walletTotal;\n            } else if (isMarketPresent(formattedTargetCurrency, formattedWalletCurrency, markets)) {\n                estimatedValue += estimateWithMarket(formattedTargetCurrency, formattedWalletCurrency, getWalletTotal(wallet), currencies, markets, marketTickers);\n            } else {\n                estimatedValue += estimateWithoutMarket(formattedTargetCurrency, wallet.currency, getWalletTotal(wallet), currencies, markets, marketTickers);\n            }\n        }\n    }\n\n    const targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n    const precisedEstimatedValue = Decimal.format(estimatedValue, targetCurrencyPrecision);\n\n    return precisedEstimatedValue;\n};\n\nexport const estimateUnitValue = (targetCurrency: string, currentCurrency: string, total: number, currencies: Currency[], markets: Market[], marketTickers: MarketTicker): string => {\n    const estimated = estimateWithMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers) || estimateWithoutMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers);\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    const targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n\n    return Decimal.format(estimated, targetCurrencyPrecision);\n};\n\nexport const findPrecision = (unit: string, markets: Market[]) => {\n    for (const market of markets) {\n        if (market.base_unit === unit) {\n            return market.amount_precision;\n        }\n        if (market.quote_unit === unit) {\n            return market.price_precision;\n        }\n    }\n\n    return 4;\n};\n"]},"metadata":{},"sourceType":"module"}