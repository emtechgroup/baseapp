{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logoutSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { signInRequire2FA } from '../../auth';\nimport { resetHistory } from '../../history';\nimport { userOpenOrdersReset } from '../../openOrders';\nimport { userReset } from '../../profile';\nimport { logoutError } from '../actions';\nvar requestOptions = {\n  apiVersion: 'barong'\n};\nexport function logoutSaga(action) {\n  return _regeneratorRuntime.wrap(function logoutSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.delete(requestOptions), '/identity/sessions');\n\n        case 3:\n          _context.next = 5;\n          return put(userReset());\n\n        case 5:\n          localStorage.removeItem('csrfToken');\n          _context.next = 8;\n          return put(userOpenOrdersReset());\n\n        case 8:\n          _context.next = 10;\n          return put(signInRequire2FA({\n            require2fa: false\n          }));\n\n        case 10:\n          _context.next = 12;\n          return put(resetHistory());\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 18;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: logoutError\n            }\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/auth/sagas/logoutSaga.ts"],"names":["logoutSaga","call","put","sendError","API","signInRequire2FA","resetHistory","userOpenOrdersReset","userReset","logoutError","requestOptions","apiVersion","action","delete","localStorage","removeItem","require2fa","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,U;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,WAAT,QAAyC,YAAzC;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUX,UAAV,CAAqBY,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMX,IAAI,CAACG,GAAG,CAACS,MAAJ,CAAWH,cAAX,CAAD,EAA6B,oBAA7B,CAAV;;AAFD;AAAA;AAGC,iBAAMR,GAAG,CAACM,SAAS,EAAV,CAAT;;AAHD;AAICM,UAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AAJD;AAKC,iBAAMb,GAAG,CAACK,mBAAmB,EAApB,CAAT;;AALD;AAAA;AAMC,iBAAML,GAAG,CAACG,gBAAgB,CAAC;AAAEW,YAAAA,UAAU,EAAE;AAAd,WAAD,CAAjB,CAAT;;AAND;AAAA;AAOC,iBAAMd,GAAG,CAACI,YAAY,EAAb,CAAT;;AAPD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASC,iBAAMJ,GAAG,CAACC,SAAS,CAAC;AAChBc,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEX;AADH;AAHE,WAAD,CAAV,CAAT;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { signInRequire2FA } from '../../auth';\nimport { resetHistory } from '../../history';\nimport { userOpenOrdersReset } from '../../openOrders';\nimport { userReset } from '../../profile';\nimport { logoutError, LogoutFetch } from '../actions';\n\nconst requestOptions: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* logoutSaga(action: LogoutFetch) {\n    try {\n        yield call(API.delete(requestOptions), '/identity/sessions');\n        yield put(userReset());\n        localStorage.removeItem('csrfToken');\n        yield put(userOpenOrdersReset());\n        yield put(signInRequire2FA({ require2fa: false }));\n        yield put(resetHistory());\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: logoutError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}