{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(recentTradesFetchSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { recentTradesData, recentTradesError } from '../actions';\nvar tradesOptions = {\n  apiVersion: 'peatio'\n};\nexport function recentTradesFetchSaga(action) {\n  var market, trades;\n  return _regeneratorRuntime.wrap(function recentTradesFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          market = action.payload;\n\n          if (market.id) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new Error(\"ERROR: Empty market provided to recentTradesFetchSaga\");\n\n        case 4:\n          _context.next = 6;\n          return call(API.get(tradesOptions), \"/public/markets/\".concat(market.id, \"/trades\"));\n\n        case 6:\n          trades = _context.sent;\n          _context.next = 9;\n          return put(recentTradesData(trades));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'console',\n            extraOptions: {\n              actionError: recentTradesError\n            }\n          }));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/recentTrades/sagas/recentTradesFetchSaga.ts"],"names":["recentTradesFetchSaga","call","put","sendError","API","recentTradesData","recentTradesError","tradesOptions","apiVersion","action","market","payload","id","Error","get","trades","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,qB;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAuE,YAAvE;AAEA,IAAMC,aAA6B,GAAG;AAClCC,EAAAA,UAAU,EAAE;AADsB,CAAtC;AAIA,OAAO,SAAUR,qBAAV,CAAgCS,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOC,UAAAA,MAFP,GAEgBD,MAAM,CAACE,OAFvB;;AAAA,cAGMD,MAAM,CAACE,EAHb;AAAA;AAAA;AAAA;;AAAA,gBAIW,IAAIC,KAAJ,yDAJX;;AAAA;AAAA;AAOgB,iBAAMZ,IAAI,CAACG,GAAG,CAACU,GAAJ,CAAQP,aAAR,CAAD,4BAA4CG,MAAM,CAACE,EAAnD,aAAV;;AAPhB;AAOOG,UAAAA,MAPP;AAAA;AAQC,iBAAMb,GAAG,CAACG,gBAAgB,CAACU,MAAD,CAAjB,CAAT;;AARD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUC,iBAAMb,GAAG,CAACC,SAAS,CAAC;AAChBa,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,SAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEb;AADH;AAHE,WAAD,CAAV,CAAT;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { recentTradesData, recentTradesError, RecentTradesFetch } from '../actions';\n\nconst tradesOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* recentTradesFetchSaga(action: RecentTradesFetch) {\n    try {\n        const market = action.payload;\n        if (!market.id) {\n            throw new Error(`ERROR: Empty market provided to recentTradesFetchSaga`);\n        }\n\n        const trades = yield call(API.get(tradesOptions), `/public/markets/${market.id}/trades`);\n        yield put(recentTradesData(trades));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'console',\n            extraOptions: {\n                actionError: recentTradesError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}