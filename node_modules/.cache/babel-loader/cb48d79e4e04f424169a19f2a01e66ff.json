{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleErrorSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleSentryError),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleAlertError),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleConsoleError);\n\nimport * as Sentry from '@sentry/browser';\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush } from '../../alert';\nimport { getErrorData } from '../actions';\nimport { getMetaMaskErrorMessage } from '../helpers/getMetaMaskErrorMessage';\nexport function handleErrorSaga(action) {\n  var _action$payload, processingType, extraOptions, error, actionError, params, type;\n\n  return _regeneratorRuntime.wrap(function handleErrorSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _action$payload = action.payload, processingType = _action$payload.processingType, extraOptions = _action$payload.extraOptions, error = _action$payload.error;\n          actionError = extraOptions.actionError;\n\n          if (!extraOptions) {\n            _context.next = 23;\n            break;\n          }\n\n          params = extraOptions.params, type = extraOptions.type;\n\n          if (!type) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.t0 = type;\n          _context.next = _context.t0 === 'METAMASK_HANDLE_ERROR' ? 8 : 13;\n          break;\n\n        case 8:\n          error.message = [getMetaMaskErrorMessage(error)];\n\n          if (!(error.message[0] === 'metamask.error.unknown')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 12;\n          return call(handleConsoleError, error);\n\n        case 12:\n          return _context.abrupt(\"break\", 15);\n\n        case 13:\n          window.console.log(\"Unexpected action with type: \".concat(type));\n          return _context.abrupt(\"break\", 15);\n\n        case 15:\n          if (!actionError) {\n            _context.next = 23;\n            break;\n          }\n\n          if (!params) {\n            _context.next = 21;\n            break;\n          }\n\n          _context.next = 19;\n          return put(actionError(params));\n\n        case 19:\n          _context.next = 23;\n          break;\n\n        case 21:\n          _context.next = 23;\n          return put(actionError(error));\n\n        case 23:\n          _context.t1 = processingType;\n          _context.next = _context.t1 === 'sentry' ? 26 : _context.t1 === 'alert' ? 29 : _context.t1 === 'console' ? 32 : 35;\n          break;\n\n        case 26:\n          _context.next = 28;\n          return call(handleSentryError, error);\n\n        case 28:\n          return _context.abrupt(\"break\", 36);\n\n        case 29:\n          _context.next = 31;\n          return call(handleAlertError, error);\n\n        case 31:\n          return _context.abrupt(\"break\", 36);\n\n        case 32:\n          _context.next = 34;\n          return call(handleConsoleError, error);\n\n        case 34:\n          return _context.abrupt(\"break\", 36);\n\n        case 35:\n          return _context.abrupt(\"break\", 36);\n\n        case 36:\n          _context.next = 38;\n          return put(getErrorData());\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleSentryError(error) {\n  var _iterator, _step, item;\n\n  return _regeneratorRuntime.wrap(function handleSentryError$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(error.message);\n          _context2.prev = 1;\n\n          _iterator.s();\n\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context2.next = 9;\n            break;\n          }\n\n          item = _step.value;\n          _context2.next = 7;\n          return call(Sentry.captureException, item);\n\n        case 7:\n          _context2.next = 3;\n          break;\n\n        case 9:\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n\n          _iterator.e(_context2.t0);\n\n        case 14:\n          _context2.prev = 14;\n\n          _iterator.f();\n\n          return _context2.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11, 14, 17]]);\n}\n\nfunction handleAlertError(error) {\n  return _regeneratorRuntime.wrap(function handleAlertError$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put(alertPush({\n            message: error.message,\n            code: error.code,\n            type: 'error'\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction handleConsoleError(error) {\n  return _regeneratorRuntime.wrap(function handleConsoleError$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return call(window.console.error, error.message[0]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/errorHandler/sagas/handleErrorSaga.ts"],"names":["handleErrorSaga","handleSentryError","handleAlertError","handleConsoleError","Sentry","call","put","alertPush","getErrorData","getMetaMaskErrorMessage","action","payload","processingType","extraOptions","error","actionError","params","type","message","window","console","log","item","captureException","code"],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/browser';\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush } from '../../alert';\nimport { ErrorHandlerFetch, getErrorData } from '../actions';\nimport { getMetaMaskErrorMessage } from '../helpers/getMetaMaskErrorMessage';\n\nexport function* handleErrorSaga(action: ErrorHandlerFetch) {\n    const { processingType, extraOptions, error } = action.payload;\n    const { actionError } = extraOptions;\n\n    if (extraOptions) {\n        const { params, type } = extraOptions;\n\n        if (type) {\n            switch (type) {\n                case 'METAMASK_HANDLE_ERROR':\n                    error.message = [getMetaMaskErrorMessage(error)];\n\n\n                    if (error.message[0] === 'metamask.error.unknown') {\n                        yield call(handleConsoleError, error);\n                    }\n\n                    break;\n                default:\n                    window.console.log(`Unexpected action with type: ${type}`);\n                    break;\n            }\n        }\n\n        if (actionError) {\n            params ? yield put(actionError(params)) : yield put(actionError(error));\n        }\n    }\n\n    switch (processingType) {\n        case 'sentry':\n            yield call(handleSentryError, error);\n            break;\n        case 'alert':\n            yield call(handleAlertError,  error);\n            break;\n        case 'console':\n            yield call(handleConsoleError, error);\n            break;\n        default:\n            break;\n    }\n\n\n    yield put(getErrorData());\n}\n\nfunction* handleSentryError(error) {\n    for (const item of error.message) {\n        yield call(Sentry.captureException, item);\n    }\n}\n\nfunction* handleAlertError(error) {\n    yield put(alertPush({\n        message: error.message,\n        code: error.code,\n        type: 'error',\n    }));\n}\n\nfunction* handleConsoleError(error) {\n    yield call(window.console.error, error.message[0]);\n}\n"]},"metadata":{},"sourceType":"module"}