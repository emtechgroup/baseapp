{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(beneficiariesResendPinSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { beneficiariesResendPinData, beneficiariesResendPinError } from '../actions';\n\nvar config = function config(csrfToken) {\n  return {\n    apiVersion: 'peatio',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function beneficiariesResendPinSaga(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function beneficiariesResendPinSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          id = action.payload.id;\n          _context.next = 4;\n          return call(API.patch(config(getCsrfToken())), \"/account/beneficiaries/\".concat(id, \"/resend_pin\"), action.payload);\n\n        case 4:\n          _context.next = 6;\n          return put(beneficiariesResendPinData(action.payload));\n\n        case 6:\n          _context.next = 8;\n          return put(alertPush({\n            message: ['success.beneficiaries.resent_pin'],\n            type: 'success'\n          }));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: beneficiariesResendPinError\n            }\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/beneficiaries/sagas/beneficiariesResendPinSaga.ts"],"names":["beneficiariesResendPinSaga","call","put","alertPush","sendError","API","getCsrfToken","beneficiariesResendPinData","beneficiariesResendPinError","config","csrfToken","apiVersion","headers","action","id","payload","patch","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,0B;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAAiCC,0BAAjC,EAA6DC,2BAA7D,QAAgG,YAAhG;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,SAAD,EAAwC;AACnD,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUV,0BAAV,CAAqCa,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAESC,UAAAA,EAFT,GAEgBD,MAAM,CAACE,OAFvB,CAESD,EAFT;AAAA;AAGC,iBAAMb,IAAI,CAACI,GAAG,CAACW,KAAJ,CAAUP,MAAM,CAACH,YAAY,EAAb,CAAhB,CAAD,mCAA8DQ,EAA9D,kBAA+ED,MAAM,CAACE,OAAtF,CAAV;;AAHD;AAAA;AAIC,iBAAMb,GAAG,CAACK,0BAA0B,CAACM,MAAM,CAACE,OAAR,CAA3B,CAAT;;AAJD;AAAA;AAKC,iBAAMb,GAAG,CAACC,SAAS,CAAC;AAACc,YAAAA,OAAO,EAAE,CAAC,kCAAD,CAAV;AAAgDC,YAAAA,IAAI,EAAE;AAAtD,WAAD,CAAV,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOC,iBAAMhB,GAAG,CAACE,SAAS,CAAC;AAChBe,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEd;AADH;AAHE,WAAD,CAAV,CAAT;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { BeneficiariesResendPin, beneficiariesResendPinData, beneficiariesResendPinError } from '../actions';\n\nconst config = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'peatio',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* beneficiariesResendPinSaga(action: BeneficiariesResendPin) {\n    try {\n        const { id } = action.payload;\n        yield call(API.patch(config(getCsrfToken())), `/account/beneficiaries/${id}/resend_pin`, action.payload);\n        yield put(beneficiariesResendPinData(action.payload));\n        yield put(alertPush({message: ['success.beneficiaries.resent_pin'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: beneficiariesResendPinError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}