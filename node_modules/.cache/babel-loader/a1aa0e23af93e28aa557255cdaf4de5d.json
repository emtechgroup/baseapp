{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(withdrawLimitSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { withdrawLimitData, withdrawLimitError } from '../actions';\nvar withdrawOption = {\n  apiVersion: 'applogic'\n};\nexport function withdrawLimitSaga(action) {\n  var withdrawLimit;\n  return _regeneratorRuntime.wrap(function withdrawLimitSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.get(withdrawOption), '/private/withdraws');\n\n        case 3:\n          withdrawLimit = _context.sent;\n          _context.next = 6;\n          return put(withdrawLimitData(withdrawLimit));\n\n        case 6:\n          _context.next = 8;\n          return put(alertPush({\n            message: ['success.withdraw.action'],\n            type: 'success'\n          }));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: withdrawLimitError\n            }\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/withdrawLimit/sagas/withdrawLimitSaga.ts"],"names":["withdrawLimitSaga","call","put","alertPush","sendError","API","withdrawLimitData","withdrawLimitError","withdrawOption","apiVersion","action","get","withdrawLimit","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDASiBA,iB;;AATjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAA0E,YAA1E;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUT,iBAAV,CAA4BU,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMT,IAAI,CAACI,GAAG,CAACM,GAAJ,CAAQH,cAAR,CAAD,EAA0B,oBAA1B,CAAV;;AAFvB;AAEOI,UAAAA,aAFP;AAAA;AAGC,iBAAMV,GAAG,CAACI,iBAAiB,CAACM,aAAD,CAAlB,CAAT;;AAHD;AAAA;AAIC,iBAAMV,GAAG,CAACC,SAAS,CAAC;AAACU,YAAAA,OAAO,EAAE,CAAC,yBAAD,CAAV;AAAuCC,YAAAA,IAAI,EAAE;AAA7C,WAAD,CAAV,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMZ,GAAG,CAACE,SAAS,CAAC;AAChBW,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEX;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { withdrawLimitData, withdrawLimitError, WithdrawLimitFetch } from '../actions';\n\nconst withdrawOption: RequestOptions = {\n    apiVersion: 'applogic',\n};\n\nexport function* withdrawLimitSaga(action: WithdrawLimitFetch) {\n    try {\n        const withdrawLimit = yield call(API.get(withdrawOption), '/private/withdraws');\n        yield put(withdrawLimitData(withdrawLimit));\n        yield put(alertPush({message: ['success.withdraw.action'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: withdrawLimitError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}