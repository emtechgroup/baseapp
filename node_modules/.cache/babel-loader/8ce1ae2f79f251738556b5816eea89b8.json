{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(beneficiariesDeleteSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { beneficiariesDeleteData, beneficiariesDeleteError } from '../actions';\n\nvar config = function config(csrfToken) {\n  return {\n    apiVersion: 'peatio',\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function beneficiariesDeleteSaga(action) {\n  return _regeneratorRuntime.wrap(function beneficiariesDeleteSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.delete(config(getCsrfToken())), \"/account/beneficiaries/\".concat(action.payload.id));\n\n        case 3:\n          _context.next = 5;\n          return put(beneficiariesDeleteData({\n            id: action.payload.id\n          }));\n\n        case 5:\n          _context.next = 7;\n          return put(alertPush({\n            message: ['success.beneficiaries.deleted'],\n            type: 'success'\n          }));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: beneficiariesDeleteError\n            }\n          }));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/beneficiaries/sagas/beneficiariesDeleteSaga.ts"],"names":["beneficiariesDeleteSaga","call","put","alertPush","sendError","API","getCsrfToken","beneficiariesDeleteData","beneficiariesDeleteError","config","csrfToken","apiVersion","headers","action","delete","payload","id","message","type","error","processingType","extraOptions","actionError"],"mappings":";;oDAaiBA,uB;;AAbjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAA8BC,uBAA9B,EAAuDC,wBAAvD,QAAuF,YAAvF;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,SAAD,EAAwC;AACnD,SAAO;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUV,uBAAV,CAAkCa,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMZ,IAAI,CAACI,GAAG,CAACS,MAAJ,CAAWL,MAAM,CAACH,YAAY,EAAb,CAAjB,CAAD,mCAA+DO,MAAM,CAACE,OAAP,CAAeC,EAA9E,EAAV;;AAFD;AAAA;AAGC,iBAAMd,GAAG,CAACK,uBAAuB,CAAC;AAAES,YAAAA,EAAE,EAAEH,MAAM,CAACE,OAAP,CAAeC;AAArB,WAAD,CAAxB,CAAT;;AAHD;AAAA;AAIC,iBAAMd,GAAG,CAACC,SAAS,CAAC;AAACc,YAAAA,OAAO,EAAE,CAAC,+BAAD,CAAV;AAA6CC,YAAAA,IAAI,EAAE;AAAnD,WAAD,CAAV,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMhB,GAAG,CAACE,SAAS,CAAC;AAChBe,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAEd;AADH;AAHE,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, RequestOptions } from '../../../../api';\nimport { getCsrfToken } from '../../../../helpers';\nimport { BeneficiariesDelete, beneficiariesDeleteData, beneficiariesDeleteError } from '../actions';\n\nconst config = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: 'peatio',\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* beneficiariesDeleteSaga(action: BeneficiariesDelete) {\n    try {\n        yield call(API.delete(config(getCsrfToken())), `/account/beneficiaries/${action.payload.id}`);\n        yield put(beneficiariesDeleteData({ id: action.payload.id }));\n        yield put(alertPush({message: ['success.beneficiaries.deleted'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: beneficiariesDeleteError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}