{"ast":null,"code":"import { incrementalOrderBook } from '../../../api';\nimport { store } from '../../../store';\nimport { depthIncrementSubscribe } from '../orderBook';\nimport { RANGER_CONNECT_DATA, RANGER_CONNECT_ERROR, RANGER_CONNECT_FETCH, RANGER_DIRECT_WRITE, RANGER_DISCONNECT_DATA, RANGER_DISCONNECT_FETCH, RANGER_SUBSCRIPTIONS_DATA, RANGER_USER_ORDER_UPDATE } from './constants';\nimport { marketKlineStreams } from './helpers';\nexport var rangerConnectFetch = function rangerConnectFetch(payload) {\n  return {\n    type: RANGER_CONNECT_FETCH,\n    payload\n  };\n};\nexport var rangerConnectData = function rangerConnectData() {\n  return {\n    type: RANGER_CONNECT_DATA\n  };\n};\nexport var rangerConnectError = function rangerConnectError(payload) {\n  return {\n    type: RANGER_CONNECT_ERROR,\n    payload\n  };\n};\nexport var rangerDisconnectData = function rangerDisconnectData() {\n  return {\n    type: RANGER_DISCONNECT_DATA\n  };\n};\nexport var rangerDirectMessage = function rangerDirectMessage(payload) {\n  return {\n    type: RANGER_DIRECT_WRITE,\n    payload\n  };\n};\nexport var rangerSubscribe = function rangerSubscribe(payload) {\n  return {\n    type: RANGER_DIRECT_WRITE,\n    payload: {\n      event: 'subscribe',\n      streams: payload.channels\n    }\n  };\n};\nexport var rangerUnsubscribe = function rangerUnsubscribe(payload) {\n  return {\n    type: RANGER_DIRECT_WRITE,\n    payload: {\n      event: 'unsubscribe',\n      streams: payload.channels\n    }\n  };\n};\nexport var rangerUserOrderUpdate = function rangerUserOrderUpdate(payload) {\n  return {\n    type: RANGER_USER_ORDER_UPDATE,\n    payload\n  };\n};\nexport var marketStreams = function marketStreams(market) {\n  var channels = [\"\".concat(market.id, \".trades\")];\n\n  if (incrementalOrderBook()) {\n    store.dispatch(depthIncrementSubscribe(market.id));\n    return {\n      channels: [].concat(channels, [\"\".concat(market.id, \".ob-inc\")])\n    };\n  }\n\n  return {\n    channels: [].concat(channels, [\"\".concat(market.id, \".update\")])\n  };\n};\nexport var subscriptionsUpdate = function subscriptionsUpdate(payload) {\n  return {\n    type: RANGER_SUBSCRIPTIONS_DATA,\n    payload\n  };\n};\nexport var rangerSubscribeMarket = function rangerSubscribeMarket(market) {\n  return rangerSubscribe(marketStreams(market));\n};\nexport var rangerUnsubscribeMarket = function rangerUnsubscribeMarket(market) {\n  return rangerUnsubscribe(marketStreams(market));\n};\nexport var rangerSubscribeKlineMarket = function rangerSubscribeKlineMarket(marketId, periodString) {\n  return rangerSubscribe(marketKlineStreams(marketId, periodString));\n};\nexport var rangerUnsubscribeKlineMarket = function rangerUnsubscribeKlineMarket(marketId, periodString) {\n  return rangerUnsubscribe(marketKlineStreams(marketId, periodString));\n};\nexport var rangerDisconnectFetch = function rangerDisconnectFetch() {\n  return {\n    type: RANGER_DISCONNECT_FETCH\n  };\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/ranger/actions.ts"],"names":["incrementalOrderBook","store","depthIncrementSubscribe","RANGER_CONNECT_DATA","RANGER_CONNECT_ERROR","RANGER_CONNECT_FETCH","RANGER_DIRECT_WRITE","RANGER_DISCONNECT_DATA","RANGER_DISCONNECT_FETCH","RANGER_SUBSCRIPTIONS_DATA","RANGER_USER_ORDER_UPDATE","marketKlineStreams","rangerConnectFetch","payload","type","rangerConnectData","rangerConnectError","rangerDisconnectData","rangerDirectMessage","rangerSubscribe","event","streams","channels","rangerUnsubscribe","rangerUserOrderUpdate","marketStreams","market","id","dispatch","subscriptionsUpdate","rangerSubscribeMarket","rangerUnsubscribeMarket","rangerSubscribeKlineMarket","marketId","periodString","rangerUnsubscribeKlineMarket","rangerDisconnectFetch"],"mappings":"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","sourcesContent":["import { incrementalOrderBook } from '../../../api';\nimport { store } from '../../../store';\nimport { CommonError, OrderEvent } from '../../types';\nimport { Market } from '../markets';\nimport { depthIncrementSubscribe } from '../orderBook';\nimport {\n    RANGER_CONNECT_DATA,\n    RANGER_CONNECT_ERROR,\n    RANGER_CONNECT_FETCH,\n    RANGER_DIRECT_WRITE,\n    RANGER_DISCONNECT_DATA,\n    RANGER_DISCONNECT_FETCH,\n    RANGER_SUBSCRIPTIONS_DATA,\n    RANGER_USER_ORDER_UPDATE,\n} from './constants';\nimport { marketKlineStreams } from './helpers';\n\nexport interface RangerConnectFetch {\n    type: typeof RANGER_CONNECT_FETCH;\n    payload: {\n        withAuth: boolean;\n    };\n}\n\nexport interface RangerConnectData {\n    type: typeof RANGER_CONNECT_DATA;\n}\n\nexport interface RangerDisconnectFetch {\n    type: typeof RANGER_DISCONNECT_FETCH;\n}\n\nexport interface RangerDisconnectData {\n    type: typeof RANGER_DISCONNECT_DATA;\n}\n\nexport interface RangerSubscribe {\n    type: typeof RANGER_DIRECT_WRITE;\n    payload: {\n        channels: string[];\n    };\n}\n\nexport interface RangerDirectMessage {\n    type: typeof RANGER_DIRECT_WRITE;\n    payload: { [pair: string]: any };\n}\n\nexport interface RangerConnectError {\n    type: typeof RANGER_CONNECT_ERROR;\n    payload?: {\n        code: number;\n        message: string[];\n    };\n}\n\nexport interface SubscriptionsUpdate {\n    type: typeof RANGER_SUBSCRIPTIONS_DATA;\n    payload: {\n        subscriptions: string[];\n    };\n}\n\nexport interface UserOrderUpdate {\n    type: typeof RANGER_USER_ORDER_UPDATE;\n    payload: OrderEvent;\n}\n\nexport type RangerAction = RangerConnectFetch |\n    RangerConnectData |\n    RangerConnectError |\n    RangerDisconnectData |\n    SubscriptionsUpdate;\n\nexport type RangerErrorType = typeof RANGER_CONNECT_ERROR;\n\nexport const rangerConnectFetch = (payload: RangerConnectFetch['payload']): RangerConnectFetch => ({\n    type: RANGER_CONNECT_FETCH,\n    payload,\n});\n\nexport const rangerConnectData = (): RangerConnectData => ({\n    type: RANGER_CONNECT_DATA,\n});\n\nexport const rangerConnectError = (payload: CommonError): RangerConnectError => ({\n    type: RANGER_CONNECT_ERROR,\n    payload,\n});\n\nexport const rangerDisconnectData = (): RangerDisconnectData => ({\n    type: RANGER_DISCONNECT_DATA,\n});\n\nexport const rangerDirectMessage = (payload: RangerDirectMessage['payload']): RangerDirectMessage => ({\n    type: RANGER_DIRECT_WRITE,\n    payload,\n});\n\nexport const rangerSubscribe = (payload: RangerSubscribe['payload']): RangerDirectMessage => ({\n    type: RANGER_DIRECT_WRITE,\n    payload: { event: 'subscribe', streams: payload.channels },\n});\n\nexport const rangerUnsubscribe = (payload: RangerSubscribe['payload']): RangerDirectMessage => ({\n    type: RANGER_DIRECT_WRITE,\n    payload: { event: 'unsubscribe', streams: payload.channels },\n});\n\nexport const rangerUserOrderUpdate = (payload: UserOrderUpdate['payload']): UserOrderUpdate => ({\n    type: RANGER_USER_ORDER_UPDATE,\n    payload,\n});\n\nexport const marketStreams = (market: Market) => {\n    const channels = [\n        `${market.id}.trades`,\n    ];\n\n    if (incrementalOrderBook()) {\n        store.dispatch(depthIncrementSubscribe(market.id));\n\n        return {\n            channels: [\n                ...channels,\n                `${market.id}.ob-inc`,\n            ],\n        };\n    }\n\n    return {\n        channels: [\n            ...channels,\n            `${market.id}.update`,\n        ],\n    };\n};\n\nexport const subscriptionsUpdate = (payload: SubscriptionsUpdate['payload']): SubscriptionsUpdate => ({\n    type: RANGER_SUBSCRIPTIONS_DATA,\n    payload,\n});\n\nexport const rangerSubscribeMarket = (market: Market): RangerDirectMessage => rangerSubscribe(marketStreams(market));\nexport const rangerUnsubscribeMarket = (market: Market): RangerDirectMessage => rangerUnsubscribe(marketStreams(market));\nexport const rangerSubscribeKlineMarket = (marketId: string, periodString: string): RangerDirectMessage => rangerSubscribe(marketKlineStreams(marketId, periodString));\nexport const rangerUnsubscribeKlineMarket = (marketId: string, periodString: string): RangerDirectMessage => rangerUnsubscribe(marketKlineStreams(marketId, periodString));\n\nexport const rangerDisconnectFetch = (): RangerDisconnectFetch => ({\n    type: RANGER_DISCONNECT_FETCH,\n});\n"]},"metadata":{},"sourceType":"module"}