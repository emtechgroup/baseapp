{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/Order/index.tsx\";\nimport * as React from 'react';\nimport { Decimal, OrderForm } from '../';\nimport { TabPanel } from '../../components';\nimport { getAmount, getTotalPrice } from '../../helpers';\nvar defaultOrderTypes = ['Limit', 'Market'];\nvar splitBorder = 449;\nvar defaultWidth = 635;\nexport var Order = /*#__PURE__*/function (_React$Component) {\n  _inherits(Order, _React$Component);\n\n  var _super = _createSuper(Order);\n\n  function Order() {\n    var _this;\n\n    _classCallCheck(this, Order);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      index: 0,\n      amountSell: '',\n      amountBuy: ''\n    };\n\n    _this.getPanel = function (type) {\n      var _this$props = _this.props,\n          availableBase = _this$props.availableBase,\n          availableQuote = _this$props.availableQuote,\n          disabled = _this$props.disabled,\n          priceMarketBuy = _this$props.priceMarketBuy,\n          priceMarketSell = _this$props.priceMarketSell,\n          priceLimit = _this$props.priceLimit,\n          from = _this$props.from,\n          to = _this$props.to,\n          currentMarketAskPrecision = _this$props.currentMarketAskPrecision,\n          currentMarketBidPrecision = _this$props.currentMarketBidPrecision,\n          orderTypes = _this$props.orderTypes,\n          orderTypesIndex = _this$props.orderTypesIndex,\n          asks = _this$props.asks,\n          bids = _this$props.bids,\n          currentMarketFilters = _this$props.currentMarketFilters,\n          isMobileDevice = _this$props.isMobileDevice,\n          listenInputPrice = _this$props.listenInputPrice,\n          translate = _this$props.translate;\n      var _this$state = _this.state,\n          amountSell = _this$state.amountSell,\n          amountBuy = _this$state.amountBuy;\n      var proposals = _this.isTypeSell(type) ? bids : asks;\n      var available = _this.isTypeSell(type) ? availableBase : availableQuote;\n      var priceMarket = _this.isTypeSell(type) ? priceMarketSell : priceMarketBuy;\n      var disabledData = _this.isTypeSell(type) ? {} : {\n        disabled\n      };\n      var amount = _this.isTypeSell(type) ? amountSell : amountBuy;\n      var preLabel = _this.isTypeSell(type) ? translate('page.body.trade.header.newOrder.content.tabs.sell') : translate('page.body.trade.header.newOrder.content.tabs.buy');\n      var label = _this.isTypeSell(type) ? 'Sell' : 'Buy';\n      return {\n        content: /*#__PURE__*/React.createElement(OrderForm, Object.assign({\n          type: type,\n          from: from\n        }, disabledData, {\n          to: to,\n          available: available,\n          priceMarket: priceMarket,\n          priceLimit: priceLimit,\n          onSubmit: _this.props.onSubmit,\n          orderTypes: orderTypes || defaultOrderTypes,\n          orderTypesIndex: orderTypesIndex || defaultOrderTypes,\n          currentMarketAskPrecision: currentMarketAskPrecision,\n          currentMarketBidPrecision: currentMarketBidPrecision,\n          totalPrice: getTotalPrice(amount, priceMarket, proposals),\n          amount: amount,\n          listenInputPrice: listenInputPrice,\n          handleAmountChange: _this.handleAmountChange,\n          handleChangeAmountByButton: _this.handleChangeAmountByButton,\n          currentMarketFilters: currentMarketFilters,\n          isMobileDevice: isMobileDevice,\n          translate: translate,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }\n        })),\n        label: preLabel || label\n      };\n    };\n\n    _this.getPanels = function () {\n      return [_this.getPanel('buy'), _this.getPanel('sell')];\n    };\n\n    _this.handleChangeTab = function (index, label) {\n      if (_this.props.handleSendType && label) {\n        _this.props.handleSendType(index, label);\n      }\n\n      _this.setState({\n        index: index\n      });\n    };\n\n    _this.handleAmountChange = function (amount, type) {\n      if (type === 'sell') {\n        _this.setState({\n          amountSell: amount\n        });\n      } else {\n        _this.setState({\n          amountBuy: amount\n        });\n      }\n    };\n\n    _this.handleChangeAmountByButton = function (value, orderType, price, type) {\n      var _this$props2 = _this.props,\n          bids = _this$props2.bids,\n          asks = _this$props2.asks,\n          availableBase = _this$props2.availableBase,\n          availableQuote = _this$props2.availableQuote;\n      var proposals = _this.isTypeSell(type) ? bids : asks;\n      var available = _this.isTypeSell(type) ? availableBase : availableQuote;\n      var newAmount = '';\n\n      switch (type) {\n        case 'buy':\n          switch (orderType) {\n            case 'Limit':\n              newAmount = available && +price ? Decimal.format(available / +price * value, _this.props.currentMarketAskPrecision) : '';\n              break;\n\n            case 'Market':\n              newAmount = available ? Decimal.format(getAmount(Number(available), proposals, value), _this.props.currentMarketAskPrecision) : '';\n              break;\n\n            default:\n              break;\n          }\n\n          break;\n\n        case 'sell':\n          newAmount = available ? Decimal.format(available * value, _this.props.currentMarketAskPrecision) : '';\n          break;\n\n        default:\n          break;\n      }\n\n      if (type === 'sell') {\n        _this.setState({\n          amountSell: newAmount\n        });\n      } else {\n        _this.setState({\n          amountBuy: newAmount\n        });\n      }\n    };\n\n    _this.isTypeSell = function (type) {\n      return type === 'sell';\n    };\n\n    return _this;\n  }\n\n  _createClass(Order, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var defaultTabIndex = this.props.defaultTabIndex;\n\n      if (defaultTabIndex !== undefined) {\n        this.handleChangeTab(defaultTabIndex);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$width = this.props.width,\n          width = _this$props$width === void 0 ? defaultWidth : _this$props$width;\n\n      if (width < splitBorder) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cr-order\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(TabPanel, {\n          fixed: true,\n          panels: this.getPanels(),\n          onTabChange: this.handleChangeTab,\n          currentTabIndex: this.state.index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order cr-order--extended\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order--extended__buy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TabPanel, {\n        fixed: true,\n        panels: [this.getPanel('buy')],\n        onTabChange: this.handleChangeTab,\n        currentTabIndex: this.state.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order--extended__sell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TabPanel, {\n        fixed: true,\n        panels: [this.getPanel('sell')],\n        onTabChange: this.handleChangeTab,\n        currentTabIndex: this.state.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return Order;\n}(React.Component);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/Order/index.tsx"],"names":["React","Decimal","OrderForm","TabPanel","getAmount","getTotalPrice","defaultOrderTypes","splitBorder","defaultWidth","Order","state","index","amountSell","amountBuy","getPanel","type","props","availableBase","availableQuote","disabled","priceMarketBuy","priceMarketSell","priceLimit","from","to","currentMarketAskPrecision","currentMarketBidPrecision","orderTypes","orderTypesIndex","asks","bids","currentMarketFilters","isMobileDevice","listenInputPrice","translate","proposals","isTypeSell","available","priceMarket","disabledData","amount","preLabel","label","content","onSubmit","handleAmountChange","handleChangeAmountByButton","getPanels","handleChangeTab","handleSendType","setState","value","orderType","price","newAmount","format","Number","defaultTabIndex","undefined","width","Component"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,KAAnC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,eAAzC;AAkGA,IAAMC,iBAAiC,GAAG,CACtC,OADsC,EAEtC,QAFsC,CAA1C;AAKA,IAAMC,WAAW,GAAG,GAApB;AACA,IAAMC,YAAY,GAAG,GAArB;AAEA,WAAaC,KAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACWC,KADX,GACmB;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,UAAU,EAAE,EAFD;AAGXC,MAAAA,SAAS,EAAE;AAHA,KADnB;;AAAA,UAuDWC,QAvDX,GAuDsB,UAACC,IAAD,EAAoB;AAAA,wBAoB9B,MAAKC,KApByB;AAAA,UAE9BC,aAF8B,eAE9BA,aAF8B;AAAA,UAG9BC,cAH8B,eAG9BA,cAH8B;AAAA,UAI9BC,QAJ8B,eAI9BA,QAJ8B;AAAA,UAK9BC,cAL8B,eAK9BA,cAL8B;AAAA,UAM9BC,eAN8B,eAM9BA,eAN8B;AAAA,UAO9BC,UAP8B,eAO9BA,UAP8B;AAAA,UAQ9BC,IAR8B,eAQ9BA,IAR8B;AAAA,UAS9BC,EAT8B,eAS9BA,EAT8B;AAAA,UAU9BC,yBAV8B,eAU9BA,yBAV8B;AAAA,UAW9BC,yBAX8B,eAW9BA,yBAX8B;AAAA,UAY9BC,UAZ8B,eAY9BA,UAZ8B;AAAA,UAa9BC,eAb8B,eAa9BA,eAb8B;AAAA,UAc9BC,IAd8B,eAc9BA,IAd8B;AAAA,UAe9BC,IAf8B,eAe9BA,IAf8B;AAAA,UAgB9BC,oBAhB8B,eAgB9BA,oBAhB8B;AAAA,UAiB9BC,cAjB8B,eAiB9BA,cAjB8B;AAAA,UAkB9BC,gBAlB8B,eAkB9BA,gBAlB8B;AAAA,UAmB9BC,SAnB8B,eAmB9BA,SAnB8B;AAAA,wBAqBA,MAAKxB,KArBL;AAAA,UAqB1BE,UArB0B,eAqB1BA,UArB0B;AAAA,UAqBdC,SArBc,eAqBdA,SArBc;AAuBlC,UAAMsB,SAAS,GAAG,MAAKC,UAAL,CAAgBrB,IAAhB,IAAwBe,IAAxB,GAA+BD,IAAjD;AACA,UAAMQ,SAAS,GAAG,MAAKD,UAAL,CAAgBrB,IAAhB,IAAwBE,aAAxB,GAAwCC,cAA1D;AACA,UAAMoB,WAAW,GAAG,MAAKF,UAAL,CAAgBrB,IAAhB,IAAwBM,eAAxB,GAA0CD,cAA9D;AACA,UAAMmB,YAAY,GAAG,MAAKH,UAAL,CAAgBrB,IAAhB,IAAwB,EAAxB,GAA6B;AAAEI,QAAAA;AAAF,OAAlD;AACA,UAAMqB,MAAM,GAAG,MAAKJ,UAAL,CAAgBrB,IAAhB,IAAwBH,UAAxB,GAAqCC,SAApD;AACA,UAAM4B,QAAQ,GAAG,MAAKL,UAAL,CAAgBrB,IAAhB,IACbmB,SAAS,CAAC,mDAAD,CADI,GAGbA,SAAS,CAAC,kDAAD,CAHb;AAKA,UAAMQ,KAAK,GAAG,MAAKN,UAAL,CAAgBrB,IAAhB,IAAwB,MAAxB,GAAiC,KAA/C;AAEA,aAAO;AACH4B,QAAAA,OAAO,eACH,oBAAC,SAAD;AACI,UAAA,IAAI,EAAE5B,IADV;AAEI,UAAA,IAAI,EAAEQ;AAFV,WAGQgB,YAHR;AAII,UAAA,EAAE,EAAEf,EAJR;AAKI,UAAA,SAAS,EAAEa,SALf;AAMI,UAAA,WAAW,EAAEC,WANjB;AAOI,UAAA,UAAU,EAAEhB,UAPhB;AAQI,UAAA,QAAQ,EAAE,MAAKN,KAAL,CAAW4B,QARzB;AASI,UAAA,UAAU,EAAEjB,UAAU,IAAIrB,iBAT9B;AAUI,UAAA,eAAe,EAAEsB,eAAe,IAAItB,iBAVxC;AAWI,UAAA,yBAAyB,EAAEmB,yBAX/B;AAYI,UAAA,yBAAyB,EAAEC,yBAZ/B;AAaI,UAAA,UAAU,EAAErB,aAAa,CAACmC,MAAD,EAASF,WAAT,EAAsBH,SAAtB,CAb7B;AAcI,UAAA,MAAM,EAAEK,MAdZ;AAeI,UAAA,gBAAgB,EAAEP,gBAftB;AAgBI,UAAA,kBAAkB,EAAE,MAAKY,kBAhB7B;AAiBI,UAAA,0BAA0B,EAAE,MAAKC,0BAjBrC;AAkBI,UAAA,oBAAoB,EAAEf,oBAlB1B;AAmBI,UAAA,cAAc,EAAEC,cAnBpB;AAoBI,UAAA,SAAS,EAAEE,SApBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFD;AAyBHQ,QAAAA,KAAK,EAAED,QAAQ,IAAIC;AAzBhB,OAAP;AA2BH,KArHL;;AAAA,UAuHYK,SAvHZ,GAuHwB,YAAM;AACtB,aAAO,CAAC,MAAKjC,QAAL,CAAc,KAAd,CAAD,EAAuB,MAAKA,QAAL,CAAc,MAAd,CAAvB,CAAP;AACH,KAzHL;;AAAA,UA2HYkC,eA3HZ,GA2H8B,UAACrC,KAAD,EAAgB+B,KAAhB,EAAmC;AACzD,UAAI,MAAK1B,KAAL,CAAWiC,cAAX,IAA6BP,KAAjC,EAAwC;AACtC,cAAK1B,KAAL,CAAWiC,cAAX,CAA0BtC,KAA1B,EAAiC+B,KAAjC;AACD;;AAED,YAAKQ,QAAL,CAAc;AACVvC,QAAAA,KAAK,EAAEA;AADG,OAAd;AAGH,KAnIL;;AAAA,UAqIYkC,kBArIZ,GAqIiC,UAACL,MAAD,EAASzB,IAAT,EAAkB;AAC3C,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACjB,cAAKmC,QAAL,CAAc;AAAEtC,UAAAA,UAAU,EAAE4B;AAAd,SAAd;AACH,OAFD,MAEO;AACH,cAAKU,QAAL,CAAc;AAAErC,UAAAA,SAAS,EAAE2B;AAAb,SAAd;AACH;AACJ,KA3IL;;AAAA,UA6IYM,0BA7IZ,GA6IyC,UAACK,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,EAA0BtC,IAA1B,EAAmC;AAAA,yBACd,MAAKC,KADS;AAAA,UAC5Dc,IAD4D,gBAC5DA,IAD4D;AAAA,UACtDD,IADsD,gBACtDA,IADsD;AAAA,UAChDZ,aADgD,gBAChDA,aADgD;AAAA,UACjCC,cADiC,gBACjCA,cADiC;AAEpE,UAAMiB,SAAS,GAAG,MAAKC,UAAL,CAAgBrB,IAAhB,IAAwBe,IAAxB,GAA+BD,IAAjD;AACA,UAAMQ,SAAS,GAAG,MAAKD,UAAL,CAAgBrB,IAAhB,IAAwBE,aAAxB,GAAwCC,cAA1D;AACA,UAAIoC,SAAS,GAAG,EAAhB;;AAEA,cAAQvC,IAAR;AACI,aAAK,KAAL;AACI,kBAAQqC,SAAR;AACI,iBAAK,OAAL;AACIE,cAAAA,SAAS,GAAGjB,SAAS,IAAI,CAACgB,KAAd,GACRpD,OAAO,CAACsD,MAAR,CAAelB,SAAS,GAAG,CAACgB,KAAb,GAAqBF,KAApC,EAA2C,MAAKnC,KAAL,CAAWS,yBAAtD,CADQ,GAER,EAFJ;AAIA;;AACJ,iBAAK,QAAL;AACI6B,cAAAA,SAAS,GAAGjB,SAAS,GACjBpC,OAAO,CAACsD,MAAR,CAAenD,SAAS,CAACoD,MAAM,CAACnB,SAAD,CAAP,EAAoBF,SAApB,EAA+BgB,KAA/B,CAAxB,EAA+D,MAAKnC,KAAL,CAAWS,yBAA1E,CADiB,GAEjB,EAFJ;AAIA;;AACJ;AACI;AAdR;;AAgBA;;AACJ,aAAK,MAAL;AACI6B,UAAAA,SAAS,GAAGjB,SAAS,GACjBpC,OAAO,CAACsD,MAAR,CAAelB,SAAS,GAAGc,KAA3B,EAAkC,MAAKnC,KAAL,CAAWS,yBAA7C,CADiB,GAEjB,EAFJ;AAIA;;AACJ;AACI;AA1BR;;AA6BA,UAAIV,IAAI,KAAK,MAAb,EAAqB;AACjB,cAAKmC,QAAL,CAAc;AAAEtC,UAAAA,UAAU,EAAE0C;AAAd,SAAd;AACH,OAFD,MAEO;AACH,cAAKJ,QAAL,CAAc;AAAErC,UAAAA,SAAS,EAAEyC;AAAb,SAAd;AACH;AACJ,KArLL;;AAAA,UAuLYlB,UAvLZ,GAuLyB,UAACrB,IAAD;AAAA,aAAkBA,IAAI,KAAK,MAA3B;AAAA,KAvLzB;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAO+B;AAAA,UACf0C,eADe,GACK,KAAKzC,KADV,CACfyC,eADe;;AAGvB,UAAIA,eAAe,KAAKC,SAAxB,EAAmC;AAC/B,aAAKV,eAAL,CAAqBS,eAArB;AACH;AACJ;AAbL;AAAA;AAAA,6BAeoB;AAAA,8BAGR,KAAKzC,KAHG,CAER2C,KAFQ;AAAA,UAERA,KAFQ,kCAEAnD,YAFA;;AAKZ,UAAImD,KAAK,GAAGpD,WAAZ,EAAyB;AACrB,4BACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,QAAD;AACI,UAAA,KAAK,EAAE,IADX;AAEI,UAAA,MAAM,EAAE,KAAKwC,SAAL,EAFZ;AAGI,UAAA,WAAW,EAAE,KAAKC,eAHtB;AAII,UAAA,eAAe,EAAE,KAAKtC,KAAL,CAAWC,KAJhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAUH;;AAED,0BACI;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,QAAD;AACI,QAAA,KAAK,EAAE,IADX;AAEI,QAAA,MAAM,EAAE,CAAC,KAAKG,QAAL,CAAc,KAAd,CAAD,CAFZ;AAGI,QAAA,WAAW,EAAE,KAAKkC,eAHtB;AAII,QAAA,eAAe,EAAE,KAAKtC,KAAL,CAAWC,KAJhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eASI;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,QAAD;AACI,QAAA,KAAK,EAAE,IADX;AAEI,QAAA,MAAM,EAAE,CAAC,KAAKG,QAAL,CAAc,MAAd,CAAD,CAFZ;AAGI,QAAA,WAAW,EAAE,KAAKkC,eAHtB;AAII,QAAA,eAAe,EAAE,KAAKtC,KAAL,CAAWC,KAJhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATJ,CADJ;AAoBH;AArDL;;AAAA;AAAA,EAA2BX,KAAK,CAAC4D,SAAjC","sourcesContent":["import * as React from 'react';\nimport { Decimal, OrderForm } from '../';\nimport { TabPanel } from '../../components';\nimport { FilterPrice } from '../../filters';\nimport { getAmount, getTotalPrice } from '../../helpers';\n\nexport type FormType = 'buy' | 'sell';\n\nexport type DropdownElem = number | string | React.ReactNode;\n\nexport interface OrderProps {\n    type: FormType;\n    orderType: string | React.ReactNode;\n    price: number | string;\n    amount: number | string;\n    available: number;\n}\n\nexport type OnSubmitCallback = (order: OrderProps) => void;\n\nexport interface OrderComponentProps {\n    /**\n     * Amount of money in base currency wallet\n     */\n    availableBase: number;\n    /**\n     * Amount of money in quote currency wallet\n     */\n    availableQuote: number;\n    /**\n     * Callback which is called when a form is submitted\n     */\n    onSubmit: OnSubmitCallback;\n    /**\n     * If orderType is 'Market' this value will be used as price for buy tab\n     */\n    priceMarketBuy: number;\n    /**\n     * If orderType is 'Market' this value will be used as price for sell tab\n     */\n    priceMarketSell: number;\n    /**\n     * If orderType is 'Limit' this value will be used as price\n     */\n    priceLimit?: number;\n    /**\n     * Name of currency for price field\n     */\n    from: string;\n    /**\n     * Name of currency for amount field\n     */\n    to: string;\n    /**\n     * Whether order is disabled to execute\n     */\n    disabled?: boolean;\n    handleSendType?: (index: number, label: string) => void;\n    /**\n     * Index of tab to switch on\n     */\n    /**\n     * Precision of amount, total, available, fee value\n     */\n    currentMarketAskPrecision: number;\n    /**\n     * Precision of price value\n     */\n    currentMarketBidPrecision: number;\n    orderTypes?: DropdownElem[];\n    orderTypesIndex?: DropdownElem[];\n    /**\n     *\n     */\n    width?: number;\n    /**\n     * proposals for buy\n     */\n    bids: string[][];\n    /**\n     * proposals for sell\n     */\n    asks: string[][];\n    /**\n     * start handling change price\n     */\n    listenInputPrice?: () => void;\n    /**\n     * default tab index\n     */\n    defaultTabIndex?: number;\n    isMobileDevice?: boolean;\n    currentMarketFilters: FilterPrice[];\n    translate: (id: string, value?: any) => string;\n}\n\ninterface State {\n    index: number;\n    amountSell: string;\n    amountBuy: string;\n}\n\nconst defaultOrderTypes: DropdownElem[] = [\n    'Limit',\n    'Market',\n];\n\nconst splitBorder = 449;\nconst defaultWidth = 635;\n\nexport class Order extends React.Component<OrderComponentProps, State> {\n    public state = {\n        index: 0,\n        amountSell: '',\n        amountBuy: '',\n    };\n\n    public componentDidMount() {\n        const { defaultTabIndex } = this.props;\n\n        if (defaultTabIndex !== undefined) {\n            this.handleChangeTab(defaultTabIndex);\n        }\n    }\n\n    public render() {\n        const {\n            width = defaultWidth,\n        } = this.props;\n\n        if (width < splitBorder) {\n            return (\n                <div className=\"cr-order\">\n                    <TabPanel\n                        fixed={true}\n                        panels={this.getPanels()}\n                        onTabChange={this.handleChangeTab}\n                        currentTabIndex={this.state.index}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"cr-order cr-order--extended\">\n                <div className=\"cr-order--extended__buy\">\n                    <TabPanel\n                        fixed={true}\n                        panels={[this.getPanel('buy')]}\n                        onTabChange={this.handleChangeTab}\n                        currentTabIndex={this.state.index}\n                    />\n                </div>\n                <div className=\"cr-order--extended__sell\">\n                    <TabPanel\n                        fixed={true}\n                        panels={[this.getPanel('sell')]}\n                        onTabChange={this.handleChangeTab}\n                        currentTabIndex={this.state.index}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    public getPanel = (type: FormType) => {\n        const {\n            availableBase,\n            availableQuote,\n            disabled,\n            priceMarketBuy,\n            priceMarketSell,\n            priceLimit,\n            from,\n            to,\n            currentMarketAskPrecision,\n            currentMarketBidPrecision,\n            orderTypes,\n            orderTypesIndex,\n            asks,\n            bids,\n            currentMarketFilters,\n            isMobileDevice,\n            listenInputPrice,\n            translate,\n        } = this.props;\n        const { amountSell, amountBuy } = this.state;\n\n        const proposals = this.isTypeSell(type) ? bids : asks;\n        const available = this.isTypeSell(type) ? availableBase : availableQuote;\n        const priceMarket = this.isTypeSell(type) ? priceMarketSell : priceMarketBuy;\n        const disabledData = this.isTypeSell(type) ? {} : { disabled };\n        const amount = this.isTypeSell(type) ? amountSell : amountBuy;\n        const preLabel = this.isTypeSell(type) ? (\n            translate('page.body.trade.header.newOrder.content.tabs.sell')\n        ) : (\n            translate('page.body.trade.header.newOrder.content.tabs.buy')\n        );\n        const label = this.isTypeSell(type) ? 'Sell' : 'Buy';\n\n        return {\n            content: (\n                <OrderForm\n                    type={type}\n                    from={from}\n                    {...disabledData}\n                    to={to}\n                    available={available}\n                    priceMarket={priceMarket}\n                    priceLimit={priceLimit}\n                    onSubmit={this.props.onSubmit}\n                    orderTypes={orderTypes || defaultOrderTypes}\n                    orderTypesIndex={orderTypesIndex || defaultOrderTypes}\n                    currentMarketAskPrecision={currentMarketAskPrecision}\n                    currentMarketBidPrecision={currentMarketBidPrecision}\n                    totalPrice={getTotalPrice(amount, priceMarket, proposals)}\n                    amount={amount}\n                    listenInputPrice={listenInputPrice}\n                    handleAmountChange={this.handleAmountChange}\n                    handleChangeAmountByButton={this.handleChangeAmountByButton}\n                    currentMarketFilters={currentMarketFilters}\n                    isMobileDevice={isMobileDevice}\n                    translate={translate}\n                />\n            ),\n            label: preLabel || label,\n        };\n    };\n\n    private getPanels = () => {\n        return [this.getPanel('buy'), this.getPanel('sell')];\n    };\n\n    private handleChangeTab = (index: number, label?: string) => {\n        if (this.props.handleSendType && label) {\n          this.props.handleSendType(index, label);\n        }\n\n        this.setState({\n            index: index,\n        });\n    };\n\n    private handleAmountChange = (amount, type) => {\n        if (type === 'sell') {\n            this.setState({ amountSell: amount });\n        } else {\n            this.setState({ amountBuy: amount });\n        }\n    };\n\n    private handleChangeAmountByButton = (value, orderType, price, type) => {\n        const { bids, asks, availableBase, availableQuote } = this.props;\n        const proposals = this.isTypeSell(type) ? bids : asks;\n        const available = this.isTypeSell(type) ? availableBase : availableQuote;\n        let newAmount = '';\n\n        switch (type) {\n            case 'buy':\n                switch (orderType) {\n                    case 'Limit':\n                        newAmount = available && +price ? (\n                            Decimal.format(available / +price * value, this.props.currentMarketAskPrecision)\n                        ) : '';\n\n                        break;\n                    case 'Market':\n                        newAmount = available ? (\n                            Decimal.format(getAmount(Number(available), proposals, value), this.props.currentMarketAskPrecision)\n                        ) : '';\n\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'sell':\n                newAmount = available ? (\n                    Decimal.format(available * value, this.props.currentMarketAskPrecision)\n                ) : '';\n\n                break;\n            default:\n                break;\n        }\n\n        if (type === 'sell') {\n            this.setState({ amountSell: newAmount });\n        } else {\n            this.setState({ amountBuy: newAmount });\n        }\n    };\n\n    private isTypeSell = (type: string) => type === 'sell';\n}\n"]},"metadata":{},"sourceType":"module"}