{"ast":null,"code":"import _toConsumableArray from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { defaultStorageLimit } from '../../../api';\nimport { sliceArray } from '../../../helpers';\nimport { RANGER_CONNECT_DATA, RANGER_CONNECT_ERROR, RANGER_CONNECT_FETCH, RANGER_DISCONNECT_DATA, RANGER_SUBSCRIPTIONS_DATA } from './constants';\nvar initialRangerState = {\n  withAuth: false,\n  connected: false,\n  connecting: false,\n  subscriptions: []\n};\nexport var rangerReducer = function rangerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialRangerState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RANGER_CONNECT_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        withAuth: action.payload.withAuth,\n        connected: false,\n        connecting: true,\n        timestamp: Math.floor(Date.now() / 1000)\n      });\n\n    case RANGER_SUBSCRIPTIONS_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        subscriptions: sliceArray(_toConsumableArray(action.payload.subscriptions), defaultStorageLimit())\n      });\n\n    case RANGER_CONNECT_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        connected: true,\n        connecting: false\n      });\n\n    case RANGER_CONNECT_ERROR:\n    case RANGER_DISCONNECT_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        connected: false,\n        connecting: false\n      });\n\n    default:\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/public/ranger/reducer.ts"],"names":["defaultStorageLimit","sliceArray","RANGER_CONNECT_DATA","RANGER_CONNECT_ERROR","RANGER_CONNECT_FETCH","RANGER_DISCONNECT_DATA","RANGER_SUBSCRIPTIONS_DATA","initialRangerState","withAuth","connected","connecting","subscriptions","rangerReducer","state","action","type","payload","timestamp","Math","floor","Date","now"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,cAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SACIC,mBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,sBAJJ,EAKIC,yBALJ,QAMO,aANP;AAgBA,IAAMC,kBAA+B,GAAG;AACpCC,EAAAA,QAAQ,EAAE,KAD0B;AAEpCC,EAAAA,SAAS,EAAE,KAFyB;AAGpCC,EAAAA,UAAU,EAAE,KAHwB;AAIpCC,EAAAA,aAAa,EAAE;AAJqB,CAAxC;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAmE;AAAA,MAAlEC,KAAkE,uEAA1DN,kBAA0D;AAAA,MAAtCO,MAAsC;;AAC5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,oBAAL;AACI,6CACOS,KADP;AAEIL,QAAAA,QAAQ,EAAEM,MAAM,CAACE,OAAP,CAAeR,QAF7B;AAGIC,QAAAA,SAAS,EAAE,KAHf;AAIIC,QAAAA,UAAU,EAAE,IAJhB;AAKIO,QAAAA,SAAS,EAAEC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB;AALf;;AAOJ,SAAKf,yBAAL;AACI,6CACOO,KADP;AAEIF,QAAAA,aAAa,EAAEV,UAAU,oBAAKa,MAAM,CAACE,OAAP,CAAeL,aAApB,GAAoCX,mBAAmB,EAAvD;AAF7B;;AAIJ,SAAKE,mBAAL;AACI,6CACOW,KADP;AAEIJ,QAAAA,SAAS,EAAE,IAFf;AAGIC,QAAAA,UAAU,EAAE;AAHhB;;AAMJ,SAAKP,oBAAL;AACA,SAAKE,sBAAL;AACI,6CACOQ,KADP;AAEIJ,QAAAA,SAAS,EAAE,KAFf;AAGIC,QAAAA,UAAU,EAAE;AAHhB;;AAMJ;AA7BJ;;AAgCA,SAAOG,KAAP;AACH,CAlCM","sourcesContent":["import { defaultStorageLimit } from '../../../api';\nimport { sliceArray } from '../../../helpers';\nimport { RangerAction } from './actions';\nimport {\n    RANGER_CONNECT_DATA,\n    RANGER_CONNECT_ERROR,\n    RANGER_CONNECT_FETCH,\n    RANGER_DISCONNECT_DATA,\n    RANGER_SUBSCRIPTIONS_DATA,\n} from './constants';\n\nexport interface RangerState {\n    withAuth: boolean;\n    connected: boolean;\n    connecting: boolean;\n    subscriptions: string[];\n    timestamp?: number;\n}\n\nconst initialRangerState: RangerState = {\n    withAuth: false,\n    connected: false,\n    connecting: false,\n    subscriptions: [],\n};\nexport const rangerReducer = (state = initialRangerState, action: RangerAction): RangerState => {\n    switch (action.type) {\n        case RANGER_CONNECT_FETCH:\n            return {\n                ...state,\n                withAuth: action.payload.withAuth,\n                connected: false,\n                connecting: true,\n                timestamp: Math.floor(Date.now() / 1000),\n            };\n        case RANGER_SUBSCRIPTIONS_DATA:\n            return {\n                ...state,\n                subscriptions: sliceArray([...action.payload.subscriptions], defaultStorageLimit()),\n            };\n        case RANGER_CONNECT_DATA:\n            return {\n                ...state,\n                connected: true,\n                connecting: false,\n            };\n\n        case RANGER_CONNECT_ERROR:\n        case RANGER_DISCONNECT_DATA:\n            return {\n                ...state,\n                connected: false,\n                connecting: false,\n            };\n\n        default:\n    }\n\n    return state;\n};\n"]},"metadata":{},"sourceType":"module"}