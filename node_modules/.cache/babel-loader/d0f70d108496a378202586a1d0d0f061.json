{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/MarketDepths/index.tsx\";\n\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { colors } from '../../constants';\nimport { convertRgbToHex, getStylesValueByKey } from '../../helpers';\n\nvar getColorSettings = function getColorSettings(colorTheme) {\n  if (colorTheme === 'light') {\n    return {\n      strokeAreaAskColor: colors.light.depth.strokeAreaAsk,\n      strokeAreaBidColor: colors.light.depth.strokeAreaBid,\n      strokeAxisColor: colors.light.depth.strokeAxis,\n      strokeGridColor: colors.light.depth.strokeGrid,\n      fillAreaAskColor: colors.light.depth.fillAreaAsk,\n      fillAreaBidColor: colors.light.depth.fillAreaBid,\n      gridBackgroundStartColor: colors.light.depth.gridBackgroundStart,\n      gridBackgroundEndColor: colors.light.depth.gridBackgroundEnd\n    };\n  }\n\n  return {\n    strokeAreaAskColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeAreaAsk)),\n    strokeAreaBidColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeAreaBid)),\n    strokeAxisColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeAxis)),\n    strokeGridColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeGrid)),\n    fillAreaAskColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.fillAreaAsk)),\n    fillAreaBidColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.fillAreaBid)),\n    gridBackgroundStartColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.gridBackgroundStart)),\n    gridBackgroundEndColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.gridBackgroundEnd))\n  };\n};\n\nvar CustomTooltip = function CustomTooltip(props) {\n  var defaultToolTipColors = {\n    backgroundColor: 'rgba(255, 255, 255, 0.4)',\n    color: 'black',\n    border: '1px solid #ccc'\n  };\n  var active = props.active,\n      payload = props.payload,\n      external = props.external,\n      _props$toolTipColors = props.toolTipColors,\n      toolTipColors = _props$toolTipColors === void 0 ? defaultToolTipColors : _props$toolTipColors;\n  var backgroundColor = toolTipColors.backgroundColor,\n      color = toolTipColors.color,\n      border = toolTipColors.border;\n\n  var renderPayload = function renderPayload() {\n    if (!payload || !payload[0]) {\n      return '';\n    }\n\n    var _payload$ = payload[0],\n        name = _payload$.name,\n        value = _payload$.value;\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 16\n      }\n    }, \"\".concat(name, \" : \"), /*#__PURE__*/React.createElement(\"em\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }, value));\n  };\n\n  if (active) {\n    var style = {\n      padding: 6,\n      backgroundColor,\n      border,\n      color,\n      fontSize: 13,\n      boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)'\n    };\n    var payloadData = payload && payload[0] ? payload[0].payload : null;\n    var currData = payloadData ? external.find(function (entry) {\n      return entry.name === payloadData.name;\n    }) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"area-chart-tooltip\",\n      style: style,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, !currData ? renderPayload() : null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, currData ? currData.name : null));\n  }\n\n  return null;\n};\n/**\n * Component to display MarketDepths component.\n * It gives a visualization of demand or supply of a particular stock or commodity or a cryptocurrency.\n */\n\n\nexport var MarketDepths = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(MarketDepths, _React$PureComponent);\n\n  var _super = _createSuper(MarketDepths);\n\n  function MarketDepths() {\n    var _this2;\n\n    _classCallCheck(this, MarketDepths);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.defaultSettings = {\n      dataKeyX: 'ask',\n      dataKeyY: 'bid',\n      tooltip: true,\n      height: '100%',\n      activeDot: {\n        stroke: 'rgba(31,42,52,1)',\n        strokeWidth: 1,\n        r: 4,\n        fill: 'rgba(91,165,132,1)'\n      }\n    };\n\n    _this2.defineGradient = function (colorSettings, value) {\n      if (value) {\n        return /*#__PURE__*/React.createElement(\"defs\", {\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n          id: \"bidChartColor\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: \"0\",\n          y2: \"1\",\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"stop\", {\n          stopColor: colorSettings.fillAreaBidColor,\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n          id: \"askChartColor\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: \"0\",\n          y2: \"1\",\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"stop\", {\n          stopColor: colorSettings.fillAreaAskColor,\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n          id: \"fillGrid\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: \"0\",\n          y2: \"1\",\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"stop\", {\n          offset: \"5%\",\n          stopColor: colorSettings.gridBackgroundStartColor,\n          stopOpacity: 0,\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"stop\", {\n          offset: \"95%\",\n          stopColor: colorSettings.gridBackgroundEndColor,\n          stopOpacity: 1,\n          __self: _assertThisInitialized(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 25\n          }\n        })));\n      }\n\n      return /*#__PURE__*/React.createElement(\"defs\", {\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n        id: \"bidChartColor\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"0\",\n        y2: \"1\",\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"5%\",\n        stopColor: colorSettings.fillAreaBidColor,\n        stopOpacity: 1,\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"95%\",\n        stopColor: colorSettings.fillAreaBidColor,\n        stopOpacity: 0,\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n        id: \"askChartColor\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"0\",\n        y2: \"1\",\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"5%\",\n        stopColor: colorSettings.fillAreaAskColor,\n        stopOpacity: 1,\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"95%\",\n        stopColor: colorSettings.fillAreaAskColor,\n        stopOpacity: 0,\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n        id: \"fillGrid\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"0\",\n        y2: \"1\",\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"5%\",\n        stopColor: colorSettings.gridBackgroundStartColor,\n        stopOpacity: 0,\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"95%\",\n        stopColor: colorSettings.gridBackgroundEndColor,\n        stopOpacity: 1,\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }\n      })));\n    };\n\n    return _this2;\n  }\n\n  _createClass(MarketDepths, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chartType = _this$props.chartType,\n          colorTheme = _this$props.colorTheme,\n          className = _this$props.className,\n          data = _this$props.data,\n          hideCartesianGrid = _this$props.hideCartesianGrid,\n          intervalX = _this$props.intervalX,\n          intervalY = _this$props.intervalY,\n          toolTipColors = _this$props.toolTipColors,\n          _this$props$settings = _this$props.settings,\n          settings = _this$props$settings === void 0 ? this.defaultSettings : _this$props$settings,\n          orientation = _this$props.orientation,\n          gradientHide = _this$props.gradientHide;\n      var cx = classnames('cr-market-depths', className);\n      var colorSettings = getColorSettings(colorTheme);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n        width: \"100%\",\n        height: settings.height,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AreaChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 0,\n          bottom: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }\n      }, this.defineGradient(colorSettings, gradientHide), hideCartesianGrid ? null : /*#__PURE__*/React.createElement(CartesianGrid, {\n        stroke: colorSettings.strokeGridColor,\n        strokeDasharray: \"1 1\",\n        fill: \"url(#fillGrid)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 54\n        }\n      }), /*#__PURE__*/React.createElement(XAxis, {\n        dataKey: settings.dataKeyX || 'ask',\n        interval: intervalX || 'preserveStartEnd',\n        stroke: colorSettings.strokeAxisColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(YAxis, {\n        orientation: orientation ? orientation : 'left',\n        dataKey: settings.dataKeyY || 'bid',\n        interval: intervalY || 'preserveStartEnd',\n        stroke: colorSettings.strokeAxisColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }\n      }), settings.tooltip ? /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(CustomTooltip, {\n          toolTipColors: toolTipColors,\n          external: data,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 42\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 29\n        }\n      }) : null, /*#__PURE__*/React.createElement(Area, {\n        type: chartType ? chartType : 'step',\n        dataKey: \"bid\",\n        stroke: colorSettings.strokeAreaBidColor,\n        fill: \"url(#bidChartColor)\",\n        activeDot: settings.activeDot,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Area, {\n        type: chartType ? chartType : 'step',\n        dataKey: \"ask\",\n        stroke: colorSettings.strokeAreaAskColor,\n        fill: \"url(#askChartColor)\",\n        activeDot: settings.activeDot,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return MarketDepths;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/MarketDepths/index.tsx"],"names":["classnames","React","Area","AreaChart","CartesianGrid","ResponsiveContainer","Tooltip","XAxis","YAxis","colors","convertRgbToHex","getStylesValueByKey","getColorSettings","colorTheme","strokeAreaAskColor","light","depth","strokeAreaAsk","strokeAreaBidColor","strokeAreaBid","strokeAxisColor","strokeAxis","strokeGridColor","strokeGrid","fillAreaAskColor","fillAreaAsk","fillAreaBidColor","fillAreaBid","gridBackgroundStartColor","gridBackgroundStart","gridBackgroundEndColor","gridBackgroundEnd","dark","CustomTooltip","props","defaultToolTipColors","backgroundColor","color","border","active","payload","external","toolTipColors","renderPayload","name","value","style","padding","fontSize","boxShadow","payloadData","currData","find","entry","MarketDepths","defaultSettings","dataKeyX","dataKeyY","tooltip","height","activeDot","stroke","strokeWidth","r","fill","defineGradient","colorSettings","chartType","className","data","hideCartesianGrid","intervalX","intervalY","settings","orientation","gradientHide","cx","top","right","left","bottom","PureComponent"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\n\nimport {\n    Area,\n    AreaChart,\n    CartesianGrid,\n    ResponsiveContainer,\n    Tooltip,\n    TooltipPayload,\n    XAxis,\n    YAxis,\n} from 'recharts';\nimport { colors } from '../../constants';\nimport { convertRgbToHex, getStylesValueByKey } from '../../helpers';\n\nexport interface KeyValuePairMarketDepths {\n    x: string | number;\n    amt?: number;\n    ask?: number;\n    bid?: number;\n    name?: string | number;\n}\n\nexport interface TooltipColors {\n    backgroundColor: string;\n    color: string;\n    border: string;\n}\n\ntype TooltipPayloadProp = TooltipPayload & { payload?: TooltipPayload };\n\ninterface CustomToolTipProps {\n    toolTipColors?: TooltipColors;\n    active?: boolean;\n    external: KeyValuePairMarketDepths[];\n    payload?: TooltipPayloadProp[];\n}\n\ninterface CustomActiveDotProps {\n    stroke: string;\n    strokeWidth: number;\n    r: number;\n    fill: string;\n}\n\nexport interface MarketDepthsProps {\n    /**\n     * Additional class name for styling. By default element receives `cr-market-depths`\n     * class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * MarketDepths details data for building the plot\n     */\n    data: KeyValuePairMarketDepths[];\n    /**\n     * Defines colors of tooltip\n     */\n    toolTipColors?: TooltipColors;\n    /**\n     * Settings to be applied to a chart\n     */\n    settings?: MarketDepthsSettings;\n    /**\n     * If true, grid will be hidden\n     * @default false\n     */\n    hideCartesianGrid?: boolean;\n    /**\n     * Defines interval of values that should be displayed on x-axis\n     */\n    intervalX?: number | 'preserveStartEnd' | 'preserveStart' | 'preserveEnd' | undefined;\n    /**\n     * Defines interval of values that should be displayed on y-axis\n     */\n    intervalY?: number | 'preserveStartEnd' | 'preserveStart' | 'preserveEnd' | undefined;\n    /**\n     * Orientation for y-axis\n     * @default 'left'\n     */\n    orientation?: 'left' | 'right';\n    /**\n     * Chart type\n     * @default 'step'\n     */\n    chartType?: 'basis' | 'basisClosed' | 'basisOpen' | 'linear' | 'linearClosed' | 'natural' | 'monotoneX' | 'monotoneY' | 'monotone' | 'step' | 'stepBefore' | 'stepAfter';\n    /**\n     * Property for gradient of background of ask or bid\n     * @default false\n     */\n    gradientHide?: boolean;\n    /**\n     * Current color theme mode\n     *  @default 'dark'\n     */\n    colorTheme?: string;\n}\n\nexport interface MarketDepthsSettings {\n    /**\n     * Defines what value should be displayed on x-axis\n     */\n    dataKeyX?: string;\n    /**\n     * Defines what value should be displayed on y-axis\n     */\n    dataKeyY?: string;\n    /**\n     * Defines whether tooltip is shown or nor\n     * @default true\n     */\n    tooltip?: boolean;\n    /**\n     * Defines height of chart\n     * @default 100%\n     */\n    height?: string;\n    /**\n     * Defines properties for active dot\n     */\n    activeDot?: CustomActiveDotProps;\n}\n\nconst getColorSettings = (colorTheme?: string) => {\n    if (colorTheme === 'light') {\n        return {\n            strokeAreaAskColor: colors.light.depth.strokeAreaAsk,\n            strokeAreaBidColor: colors.light.depth.strokeAreaBid,\n            strokeAxisColor: colors.light.depth.strokeAxis,\n            strokeGridColor: colors.light.depth.strokeGrid,\n            fillAreaAskColor: colors.light.depth.fillAreaAsk,\n            fillAreaBidColor: colors.light.depth.fillAreaBid,\n            gridBackgroundStartColor: colors.light.depth.gridBackgroundStart,\n            gridBackgroundEndColor: colors.light.depth.gridBackgroundEnd,\n        };\n    }\n\n    return {\n        strokeAreaAskColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeAreaAsk)),\n        strokeAreaBidColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeAreaBid)),\n        strokeAxisColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeAxis)),\n        strokeGridColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.strokeGrid)),\n        fillAreaAskColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.fillAreaAsk)),\n        fillAreaBidColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.fillAreaBid)),\n        gridBackgroundStartColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.gridBackgroundStart)),\n        gridBackgroundEndColor: convertRgbToHex(getStylesValueByKey(colors.dark.depth.gridBackgroundEnd)),\n    };\n};\n\nconst CustomTooltip = (props: CustomToolTipProps) => {\n    const defaultToolTipColors = {\n        backgroundColor: 'rgba(255, 255, 255, 0.4)',\n        color: 'black',\n        border: '1px solid #ccc',\n    };\n    const { active, payload, external, toolTipColors = defaultToolTipColors} = props;\n    const { backgroundColor, color, border } = toolTipColors;\n    const renderPayload = () => {\n        if (!payload || !payload[0]) {\n            return '';\n        }\n\n        const { name, value } = payload[0];\n\n        return <p>{`${name} : `}<em>{value}</em></p>;\n    };\n\n    if (active) {\n        const style = {\n            padding: 6,\n            backgroundColor,\n            border,\n            color,\n            fontSize: 13,\n            boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\n        };\n        const payloadData = payload && payload[0] ? payload[0].payload : null;\n        const currData = payloadData ?\n            external.find((entry: KeyValuePairMarketDepths) => (entry.name === payloadData.name)) :\n            null;\n\n        return (\n            <div className=\"area-chart-tooltip\" style={style}>\n                {!currData ? renderPayload() : null}\n                <p>{currData ? currData.name : null}</p>\n            </div>\n        );\n    }\n\n    return null;\n};\n\n/**\n * Component to display MarketDepths component.\n * It gives a visualization of demand or supply of a particular stock or commodity or a cryptocurrency.\n */\nexport class MarketDepths extends React.PureComponent<MarketDepthsProps> {\n    public defaultSettings = {\n        dataKeyX: 'ask',\n        dataKeyY: 'bid',\n        tooltip: true,\n        height: '100%',\n        activeDot: {\n            stroke: 'rgba(31,42,52,1)',\n            strokeWidth: 1,\n            r: 4,\n            fill: 'rgba(91,165,132,1)',\n        },\n    };\n\n    public render() {\n        const {\n            chartType,\n            colorTheme,\n            className,\n            data,\n            hideCartesianGrid,\n            intervalX,\n            intervalY,\n            toolTipColors,\n            settings = this.defaultSettings,\n            orientation,\n            gradientHide,\n        } = this.props;\n        const cx = classnames('cr-market-depths', className);\n        const colorSettings = getColorSettings(colorTheme);\n\n        return (\n            <div className={cx}>\n                <ResponsiveContainer\n                    width=\"100%\"\n                    height={settings.height}\n                >\n                    <AreaChart\n                        data={data}\n                        margin={{ top: 20, right: 30, left: 0, bottom: 20 }}\n                    >\n                        {this.defineGradient(colorSettings, gradientHide)}\n                        {hideCartesianGrid ? null : (<CartesianGrid stroke={colorSettings.strokeGridColor} strokeDasharray=\"1 1\" fill=\"url(#fillGrid)\" />)}\n                        <XAxis\n                            dataKey={settings.dataKeyX || 'ask'}\n                            interval={intervalX || 'preserveStartEnd'}\n                            stroke={colorSettings.strokeAxisColor}\n                        />\n                        <YAxis\n                            orientation={orientation ? orientation : 'left'}\n                            dataKey={settings.dataKeyY || 'bid'}\n                            interval={intervalY || 'preserveStartEnd'}\n                            stroke={colorSettings.strokeAxisColor}\n                        />\n                        {settings.tooltip ?\n                            <Tooltip\n                                content={<CustomTooltip toolTipColors={toolTipColors} external={data} />}\n                            /> : null}\n                        <Area\n                            type={chartType ? chartType : 'step'}\n                            dataKey=\"bid\"\n                            stroke={colorSettings.strokeAreaBidColor}\n                            fill=\"url(#bidChartColor)\"\n                            activeDot={settings.activeDot}\n                        />\n                        <Area\n                            type={chartType ? chartType : 'step'}\n                            dataKey=\"ask\"\n                            stroke={colorSettings.strokeAreaAskColor}\n                            fill=\"url(#askChartColor)\"\n                            activeDot={settings.activeDot}\n                        />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        );\n    }\n\n    public defineGradient = (colorSettings, value?: boolean) => {\n        if (value) {\n            return (\n                <defs>\n                    <linearGradient id=\"bidChartColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop stopColor={colorSettings.fillAreaBidColor} />\n                    </linearGradient>\n                    <linearGradient id=\"askChartColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop stopColor={colorSettings.fillAreaAskColor} />\n                    </linearGradient>\n                    <linearGradient id=\"fillGrid\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={colorSettings.gridBackgroundStartColor} stopOpacity={0} />\n                        <stop offset=\"95%\" stopColor={colorSettings.gridBackgroundEndColor} stopOpacity={1} />\n                    </linearGradient>\n                </defs>\n            );\n        }\n\n        return (\n            <defs>\n                <linearGradient id=\"bidChartColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor={colorSettings.fillAreaBidColor} stopOpacity={1} />\n                    <stop offset=\"95%\" stopColor={colorSettings.fillAreaBidColor} stopOpacity={0} />\n                </linearGradient>\n                <linearGradient id=\"askChartColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor={colorSettings.fillAreaAskColor} stopOpacity={1} />\n                    <stop offset=\"95%\" stopColor={colorSettings.fillAreaAskColor} stopOpacity={0} />\n                </linearGradient>\n                <linearGradient id=\"fillGrid\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor={colorSettings.gridBackgroundStartColor} stopOpacity={0} />\n                    <stop offset=\"95%\" stopColor={colorSettings.gridBackgroundEndColor} stopOpacity={1} />\n                </linearGradient>\n            </defs>\n        );\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}