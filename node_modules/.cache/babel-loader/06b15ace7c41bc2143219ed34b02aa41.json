{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { finexUrl, isFinexEnabled, tradeUrl } from '../../api/config';\nimport { buildQueryString, getTimestampPeriod } from '../../helpers';\nimport { klineArrayToObject, klineUpdatePeriod, klineUpdateTimeRange } from '../../modules';\nimport { periodMinutesToString } from '../../modules/public/ranger/helpers';\nimport { store } from '../../store';\nexport var print = function print() {\n  for (var _len = arguments.length, x = new Array(_len), _key = 0; _key < _len; _key++) {\n    x[_key] = arguments[_key];\n  }\n\n  return window.console.log.apply(null, ['>>>> TC'].concat(x));\n};\n\nvar getHistoryApi = function getHistoryApi() {\n  return isFinexEnabled() ? finexUrl() : tradeUrl();\n};\n\nvar makeHistoryUrl = function makeHistoryUrl(market, resolution, from, to) {\n  var payload = {\n    period: resolution,\n    time_from: getTimestampPeriod(from, resolution),\n    time_to: getTimestampPeriod(to, resolution)\n  };\n  var endPoint = \"/public/markets/\".concat(market, \"/k-line\");\n\n  if (payload) {\n    endPoint = \"\".concat(endPoint, \"?\").concat(buildQueryString(payload));\n  }\n\n  return \"\".concat(getHistoryApi()).concat(endPoint);\n};\n\nvar resolutionToSeconds = function resolutionToSeconds(r) {\n  var minutes = parseInt(r, 10);\n\n  if (r === '1D') {\n    return 1440;\n  } else if (r === 'D') {\n    return 4320;\n  } else if (!isNaN(minutes)) {\n    return minutes;\n  } else {\n    return 1;\n  }\n};\n\nvar config = {\n  supports_timescale_marks: true,\n  supports_time: false,\n  supported_resolutions: ['1', '5', '15', '30', '60', '120', '240', '360', '720', 'd', '3d']\n};\nexport var dataFeedObject = function dataFeedObject(tradingChart, markets) {\n  var dataFeed = {\n    onReady: function onReady(cb) {\n      setTimeout(function () {\n        return cb(config);\n      }, 0);\n    },\n    searchSymbols: function searchSymbols(userInput, exchange, symbolType, onResultReadyCallback) {\n      var symbols = markets.map(function (m) {\n        return {\n          symbol: m.id,\n          full_name: m.name,\n          description: m.name,\n          exchange: 'Cryptobase',\n          ticker: m.id,\n          type: 'bitcoin',\n          currency_code: m.quote_unit.toUpperCase()\n        };\n      });\n      setTimeout(function () {\n        return onResultReadyCallback(symbols);\n      }, 0);\n    },\n    resolveSymbol: function resolveSymbol(symbolName, onSymbolResolvedCallback, onResolveErrorCallback) {\n      var symbol = markets.find(function (m) {\n        return m.id === symbolName || m.name === symbolName;\n      });\n\n      if (!symbol) {\n        return setTimeout(function () {\n          return onResolveErrorCallback('Symbol not found');\n        }, 0);\n      }\n\n      var symbolStub = {\n        name: symbol.name,\n        currency_code: symbol.quote_unit.toUpperCase(),\n        description: '',\n        type: 'bitcoin',\n        session: '24x7',\n        timezone: 'Etc/UTC',\n        ticker: symbol.id,\n        minmov: 1,\n        pricescale: Math.pow(10, symbol.price_precision),\n        has_intraday: true,\n        intraday_multipliers: ['1', '5', '15', '30', '60', '120', '240', '360', '720', 'd', '3d'],\n        supported_resolutions: ['1', '5', '15', '30', '60', '120', '240', '360', '720', 'd', '3d'],\n        volume_precision: 8,\n        data_status: 'streaming'\n      };\n      return setTimeout(function () {\n        return onSymbolResolvedCallback(symbolStub);\n      }, 0);\n    },\n    getTimescaleMarks: function () {\n      var _getTimescaleMarks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(symbolInfo, from, to, onDataCallback, resolution) {\n        var range, period;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                range = tradingChart.tvWidget.activeChart().getVisibleRange();\n                period = tradingChart.tvWidget.activeChart().resolution();\n                store.dispatch(klineUpdateTimeRange(range));\n                store.dispatch(klineUpdatePeriod(period));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getTimescaleMarks(_x, _x2, _x3, _x4, _x5) {\n        return _getTimescaleMarks.apply(this, arguments);\n      }\n\n      return getTimescaleMarks;\n    }(),\n    getBars: function () {\n      var _getBars = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(symbolInfo, resolution, from, to, onHistoryCallback, onErrorCallback, firstDataRequest) {\n        var url;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = makeHistoryUrl(symbolInfo.ticker || symbolInfo.name.toLowerCase(), resolutionToSeconds(resolution), from, to);\n                return _context2.abrupt(\"return\", axios.get(url).then(function (_ref) {\n                  var data = _ref.data;\n\n                  if (data.length < 1) {\n                    return onHistoryCallback([], {\n                      noData: true\n                    });\n                  }\n\n                  var bars = data.map(klineArrayToObject);\n                  return onHistoryCallback(bars, {\n                    noData: false\n                  });\n                }).catch(function (e) {\n                  return onHistoryCallback([], {\n                    noData: true\n                  });\n                }));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getBars(_x6, _x7, _x8, _x9, _x10, _x11, _x12) {\n        return _getBars.apply(this, arguments);\n      }\n\n      return getBars;\n    }(),\n    subscribeBars: function subscribeBars(symbolInfo, resolution, onRealtimeCallback, subscribeUID, onResetCacheNeededCallback) {\n      dataFeed.onRealtimeCallback = function (kline) {\n        if (kline.last && kline.marketId === tradingChart.currentKlineSubscription.marketId && kline.period === tradingChart.currentKlineSubscription.periodString) {\n          onRealtimeCallback(kline.last);\n        }\n      };\n\n      var marketId = symbolInfo.ticker;\n      var periodString = periodMinutesToString(resolutionToSeconds(resolution));\n      tradingChart.props.subscribeKline(marketId, periodString);\n      tradingChart.currentKlineSubscription = {\n        marketId,\n        periodString\n      };\n    },\n    unsubscribeBars: function unsubscribeBars(subscribeUID) {\n      var _tradingChart$current = tradingChart.currentKlineSubscription,\n          marketId = _tradingChart$current.marketId,\n          periodString = _tradingChart$current.periodString;\n\n      if (marketId && periodString) {\n        tradingChart.props.unSubscribeKline(marketId, periodString);\n      }\n\n      tradingChart.currentKlineSubscription = {};\n    },\n    onRealtimeCallback: function onRealtimeCallback(kline) {// window.console.log(`default onRealtimeCallback called with ${JSON.stringify(bar)}`);\n    }\n  };\n  return dataFeed;\n};","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/containers/TradingChart/api.ts"],"names":["axios","finexUrl","isFinexEnabled","tradeUrl","buildQueryString","getTimestampPeriod","klineArrayToObject","klineUpdatePeriod","klineUpdateTimeRange","periodMinutesToString","store","print","x","window","console","log","apply","getHistoryApi","makeHistoryUrl","market","resolution","from","to","payload","period","time_from","time_to","endPoint","resolutionToSeconds","r","minutes","parseInt","isNaN","config","supports_timescale_marks","supports_time","supported_resolutions","dataFeedObject","tradingChart","markets","dataFeed","onReady","cb","setTimeout","searchSymbols","userInput","exchange","symbolType","onResultReadyCallback","symbols","map","m","symbol","id","full_name","name","description","ticker","type","currency_code","quote_unit","toUpperCase","resolveSymbol","symbolName","onSymbolResolvedCallback","onResolveErrorCallback","find","symbolStub","session","timezone","minmov","pricescale","Math","pow","price_precision","has_intraday","intraday_multipliers","volume_precision","data_status","getTimescaleMarks","symbolInfo","onDataCallback","range","tvWidget","activeChart","getVisibleRange","dispatch","getBars","onHistoryCallback","onErrorCallback","firstDataRequest","url","toLowerCase","get","then","data","length","noData","bars","catch","e","subscribeBars","onRealtimeCallback","subscribeUID","onResetCacheNeededCallback","kline","last","marketId","currentKlineSubscription","periodString","props","subscribeKline","unsubscribeBars","unSubscribeKline"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { TradingChartComponent } from '.';\nimport { finexUrl, isFinexEnabled, tradeUrl } from '../../api/config';\nimport { LibrarySymbolInfo } from '../../charting_library/datafeed-api';\nimport { buildQueryString, getTimestampPeriod } from '../../helpers';\nimport {\n    klineArrayToObject,\n    KlineState,\n    klineUpdatePeriod,\n    klineUpdateTimeRange,\n} from '../../modules';\nimport { Market } from '../../modules/public/markets';\nimport { periodMinutesToString } from '../../modules/public/ranger/helpers';\nimport { store } from '../../store';\n\nexport const print = (...x) => window.console.log.apply(null, ['>>>> TC', ...x]);\nexport interface CurrentKlineSubscription {\n    marketId?: string;\n    periodString?: string;\n}\n\nconst getHistoryApi = (): string => isFinexEnabled() ? finexUrl() : tradeUrl();\n\nconst makeHistoryUrl = (market: string, resolution: number, from: number, to: number) => {\n    const payload = {\n        period: resolution,\n        time_from: getTimestampPeriod(from, resolution),\n        time_to: getTimestampPeriod(to, resolution),\n    };\n    let endPoint = `/public/markets/${market}/k-line`;\n\n    if (payload) {\n        endPoint = `${endPoint}?${buildQueryString(payload)}`;\n    }\n\n    return `${getHistoryApi()}${endPoint}`;\n};\n\nconst resolutionToSeconds = (r: string): number => {\n    const minutes = parseInt(r, 10);\n    if (r === '1D') {\n        return 1440;\n    } else if (r === 'D') {\n        return 4320;\n    } else if (!isNaN(minutes)) {\n        return minutes;\n    } else {\n        return 1;\n    }\n};\n\nconst config = {\n    supports_timescale_marks: true,\n    supports_time: false,\n    supported_resolutions: ['1', '5', '15', '30', '60', '120', '240', '360', '720', 'd', '3d'],\n};\n\nexport const dataFeedObject = (tradingChart: TradingChartComponent, markets: Market[]) => {\n    const dataFeed = {\n        onReady: cb => {\n            setTimeout(() => cb(config), 0);\n        },\n        searchSymbols: (userInput, exchange, symbolType, onResultReadyCallback) => {\n            const symbols = markets.map(m => ({\n                symbol: m.id,\n                full_name: m.name,\n                description: m.name,\n                exchange: 'Cryptobase',\n                ticker: m.id,\n                type: 'bitcoin',\n                currency_code: m.quote_unit.toUpperCase(),\n            }));\n            setTimeout(() => onResultReadyCallback(symbols), 0);\n        },\n        resolveSymbol: (symbolName, onSymbolResolvedCallback, onResolveErrorCallback) => {\n            const symbol = markets.find(m => m.id === symbolName || m.name === symbolName);\n\n            if (!symbol) {\n                return setTimeout(() => onResolveErrorCallback('Symbol not found'), 0);\n            }\n\n            const symbolStub = {\n                name: symbol.name,\n                currency_code: symbol.quote_unit.toUpperCase(),\n                description: '',\n                type: 'bitcoin',\n                session: '24x7',\n                timezone: 'Etc/UTC',\n                ticker: symbol.id,\n                minmov: 1,\n                pricescale: Math.pow(10, symbol.price_precision),\n                has_intraday: true,\n                intraday_multipliers: ['1', '5', '15', '30', '60', '120', '240', '360', '720', 'd', '3d'],\n                supported_resolutions: ['1', '5', '15', '30', '60', '120', '240', '360', '720', 'd', '3d'],\n                volume_precision: 8,\n                data_status: 'streaming',\n            };\n\n            return setTimeout(() => onSymbolResolvedCallback(symbolStub), 0);\n        },\n        getTimescaleMarks: async (\n            symbolInfo: LibrarySymbolInfo,\n            from,\n            to,\n            onDataCallback,\n            resolution,\n        ) => {\n            const range = tradingChart.tvWidget!.activeChart().getVisibleRange();\n            const period = tradingChart.tvWidget!.activeChart().resolution();\n            store.dispatch(klineUpdateTimeRange(range));\n            store.dispatch(klineUpdatePeriod(period));\n        },\n        getBars: async (\n            symbolInfo: LibrarySymbolInfo,\n            resolution,\n            from,\n            to,\n            onHistoryCallback,\n            onErrorCallback,\n            firstDataRequest,\n        ) => {\n            const url = makeHistoryUrl(\n                symbolInfo.ticker || symbolInfo.name.toLowerCase(),\n                resolutionToSeconds(resolution),\n                from,\n                to,\n            );\n\n            return axios\n                .get(url)\n                .then(({ data }) => {\n                    if (data.length < 1) {\n                        return onHistoryCallback([], { noData: true });\n                    }\n                    const bars = data.map(klineArrayToObject);\n\n                    return onHistoryCallback(bars, { noData: false });\n                })\n                .catch(e => {\n                    return onHistoryCallback([], { noData: true });\n                });\n        },\n        subscribeBars: (\n            symbolInfo: LibrarySymbolInfo,\n            resolution,\n            onRealtimeCallback,\n            subscribeUID: string,\n            onResetCacheNeededCallback,\n        ) => {\n            dataFeed.onRealtimeCallback = (kline: KlineState) => {\n                if (\n                    kline.last &&\n                    kline.marketId === tradingChart.currentKlineSubscription.marketId &&\n                    kline.period === tradingChart.currentKlineSubscription.periodString\n                ) {\n                    onRealtimeCallback(kline.last);\n                }\n            };\n            const marketId: string = symbolInfo.ticker!;\n            const periodString = periodMinutesToString(resolutionToSeconds(resolution));\n\n            tradingChart.props.subscribeKline(marketId, periodString);\n            tradingChart.currentKlineSubscription = {\n                marketId,\n                periodString,\n            };\n        },\n        unsubscribeBars: (subscribeUID: string) => {\n            const { marketId, periodString } = tradingChart.currentKlineSubscription;\n            if (marketId && periodString) {\n                tradingChart.props.unSubscribeKline(marketId, periodString);\n            }\n            tradingChart.currentKlineSubscription = {};\n        },\n        onRealtimeCallback: (kline: KlineState) => {\n            // window.console.log(`default onRealtimeCallback called with ${JSON.stringify(bar)}`);\n        },\n    };\n\n    return dataFeed;\n};\n"]},"metadata":{},"sourceType":"module"}