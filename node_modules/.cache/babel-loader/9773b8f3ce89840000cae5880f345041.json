{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/screens/SignUpScreen/index.tsx\";\nimport cx from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { Captcha, Modal, SignUpForm } from '../../components';\nimport { EMAIL_REGEX, ERROR_INVALID_EMAIL, ERROR_INVALID_PASSWORD, ERROR_PASSWORD_CONFIRMATION, PASSWORD_REGEX, passwordErrorFirstSolution, passwordErrorSecondSolution, passwordErrorThirdSolution, setDocumentTitle } from '../../helpers';\nimport { entropyPasswordFetch, resetCaptchaState as _resetCaptchaState, selectCaptchaResponse, selectConfigs, selectCurrentLanguage, selectCurrentPasswordEntropy, selectGeetestCaptchaSuccess, selectRecaptchaSuccess, selectSignUpError, selectSignUpRequireVerification, signUp as _signUp } from '../../modules';\nexport var extractRefID = function extractRefID(props) {\n  return new URLSearchParams(props.location.search).get('refid');\n};\n\nvar SignUp = /*#__PURE__*/function (_React$Component) {\n  _inherits(SignUp, _React$Component);\n\n  var _super = _createSuper(SignUp);\n\n  function SignUp() {\n    var _this;\n\n    _classCallCheck(this, SignUp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      showModal: false,\n      email: '',\n      password: '',\n      confirmPassword: '',\n      refId: '',\n      hasConfirmed: false,\n      emailError: '',\n      passwordError: '',\n      confirmationError: '',\n      emailFocused: false,\n      passwordFocused: false,\n      confirmPasswordFocused: false,\n      refIdFocused: false,\n      typingTimeout: 0,\n      passwordErrorFirstSolved: false,\n      passwordErrorSecondSolved: false,\n      passwordErrorThirdSolved: false,\n      passwordPopUp: false\n    };\n    _this.myRef = React.createRef();\n    _this.passwordWrapper = React.createRef();\n\n    _this.renderCaptcha = function () {\n      var signUpError = _this.props.signUpError;\n      var _this$state = _this.state,\n          confirmationError = _this$state.confirmationError,\n          emailError = _this$state.emailError;\n      var error = signUpError || confirmationError || emailError;\n      return /*#__PURE__*/React.createElement(Captcha, {\n        error: error,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 16\n        }\n      });\n    };\n\n    _this.translate = function (key) {\n      return _this.props.intl.formatMessage({\n        id: key\n      });\n    };\n\n    _this.handleOutsideClick = function (event) {\n      var wrapperElement = _this.passwordWrapper.current;\n\n      if (wrapperElement && !wrapperElement.contains(event.target)) {\n        _this.setState({\n          passwordPopUp: false\n        });\n      }\n    };\n\n    _this.handleCheckboxClick = function (event) {\n      if (event) {\n        event.preventDefault();\n\n        _this.setState({\n          hasConfirmed: !_this.state.hasConfirmed\n        });\n      }\n    };\n\n    _this.handleChangeEmail = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n\n    _this.handleChangePassword = function (value) {\n      var _this$state2 = _this.state,\n          passwordErrorFirstSolved = _this$state2.passwordErrorFirstSolved,\n          passwordErrorSecondSolved = _this$state2.passwordErrorSecondSolved,\n          passwordErrorThirdSolved = _this$state2.passwordErrorThirdSolved;\n\n      if (passwordErrorFirstSolution(value) && !passwordErrorFirstSolved) {\n        _this.setState({\n          passwordErrorFirstSolved: true\n        });\n      } else if (!passwordErrorFirstSolution(value) && passwordErrorFirstSolved) {\n        _this.setState({\n          passwordErrorFirstSolved: false\n        });\n      }\n\n      if (passwordErrorSecondSolution(value) && !passwordErrorSecondSolved) {\n        _this.setState({\n          passwordErrorSecondSolved: true\n        });\n      } else if (!passwordErrorSecondSolution(value) && passwordErrorSecondSolved) {\n        _this.setState({\n          passwordErrorSecondSolved: false\n        });\n      }\n\n      if (passwordErrorThirdSolution(value) && !passwordErrorThirdSolved) {\n        _this.setState({\n          passwordErrorThirdSolved: true\n        });\n      } else if (!passwordErrorThirdSolution(value) && passwordErrorThirdSolved) {\n        _this.setState({\n          passwordErrorThirdSolved: false\n        });\n      }\n\n      if (_this.state.typingTimeout) {\n        clearTimeout(_this.state.typingTimeout);\n      }\n\n      _this.setState({\n        password: value,\n        typingTimeout: setTimeout(function () {\n          _this.props.fetchCurrentPasswordEntropy({\n            password: value\n          });\n        }, 500)\n      });\n    };\n\n    _this.handleChangeConfirmPassword = function (value) {\n      _this.setState({\n        confirmPassword: value\n      });\n    };\n\n    _this.handleChangeRefId = function (value) {\n      _this.setState({\n        refId: value\n      });\n    };\n\n    _this.handleFocusEmail = function () {\n      _this.setState({\n        emailFocused: !_this.state.emailFocused\n      });\n    };\n\n    _this.handleFocusPassword = function () {\n      _this.setState({\n        passwordFocused: !_this.state.passwordFocused,\n        passwordPopUp: !_this.state.passwordPopUp\n      });\n    };\n\n    _this.handleFocusConfirmPassword = function () {\n      _this.setState({\n        confirmPasswordFocused: !_this.state.confirmPasswordFocused\n      });\n    };\n\n    _this.handleFocusRefId = function () {\n      _this.setState({\n        refIdFocused: !_this.state.refIdFocused\n      });\n    };\n\n    _this.handleSignIn = function () {\n      _this.props.history.push('/signin');\n    };\n\n    _this.handleSignUp = function () {\n      var _this$props = _this.props,\n          configs = _this$props.configs,\n          i18n = _this$props.i18n,\n          captcha_response = _this$props.captcha_response;\n      var _this$state3 = _this.state,\n          email = _this$state3.email,\n          password = _this$state3.password,\n          refId = _this$state3.refId;\n\n      if (refId) {\n        switch (configs.captcha_type) {\n          case 'recaptcha':\n          case 'geetest':\n            _this.props.signUp({\n              email,\n              password,\n              captcha_response,\n              refid: refId,\n              data: JSON.stringify({\n                language: i18n\n              })\n            });\n\n            break;\n\n          default:\n            _this.props.signUp({\n              email,\n              password,\n              refid: refId,\n              data: JSON.stringify({\n                language: i18n\n              })\n            });\n\n            break;\n        }\n      } else {\n        switch (configs.captcha_type) {\n          case 'recaptcha':\n          case 'geetest':\n            _this.props.signUp({\n              email,\n              password,\n              captcha_response,\n              data: JSON.stringify({\n                language: i18n\n              })\n            });\n\n            break;\n\n          default:\n            _this.props.signUp({\n              email,\n              password,\n              data: JSON.stringify({\n                language: i18n\n              })\n            });\n\n            break;\n        }\n      }\n\n      _this.props.resetCaptchaState();\n    };\n\n    _this.renderModalHeader = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-header\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.header'\n      }));\n    };\n\n    _this.renderModalBody = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-body\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 17\n        }\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.body'\n      })));\n    };\n\n    _this.renderModalFooter = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-footer\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        onClick: _this.closeModal,\n        size: \"lg\",\n        variant: \"primary\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 17\n        }\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.footer'\n      })));\n    };\n\n    _this.closeModal = function () {\n      _this.setState({\n        showModal: false\n      });\n\n      _this.props.history.push('/signin');\n    };\n\n    _this.extractRefID = function (url) {\n      return new URLSearchParams(url).get('refid');\n    };\n\n    _this.handleValidateForm = function () {\n      var _this$state4 = _this.state,\n          email = _this$state4.email,\n          password = _this$state4.password,\n          confirmPassword = _this$state4.confirmPassword;\n      var isEmailValid = email.match(EMAIL_REGEX);\n      var isPasswordValid = password.match(PASSWORD_REGEX);\n      var isConfirmPasswordValid = password === confirmPassword;\n\n      if (!isEmailValid && !isPasswordValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_PASSWORD\n          }),\n          hasConfirmed: false\n        });\n\n        return;\n      }\n\n      if (!isEmailValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: '',\n          hasConfirmed: false\n        });\n\n        return;\n      }\n\n      if (!isPasswordValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: '',\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_PASSWORD\n          }),\n          hasConfirmed: false\n        });\n\n        return;\n      }\n\n      if (!isConfirmPasswordValid) {\n        _this.setState({\n          confirmationError: _this.props.intl.formatMessage({\n            id: ERROR_PASSWORD_CONFIRMATION\n          }),\n          emailError: '',\n          passwordError: '',\n          hasConfirmed: false\n        });\n\n        return;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SignUp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Sign Up');\n      var localReferralCode = localStorage.getItem('referralCode');\n      var refId = this.extractRefID(this.props.location.search);\n      var referralCode = refId || localReferralCode || '';\n      this.setState({\n        refId: referralCode\n      });\n\n      if (refId && refId !== localReferralCode) {\n        localStorage.setItem('referralCode', referralCode);\n      }\n\n      document.addEventListener('click', this.handleOutsideClick, false);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var email = this.state.email;\n\n      if (nextProps.requireVerification) {\n        nextProps.history.push('/email-verification', {\n          email: email\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          configs = _this$props2.configs,\n          loading = _this$props2.loading,\n          currentPasswordEntropy = _this$props2.currentPasswordEntropy,\n          captcha_response = _this$props2.captcha_response,\n          reCaptchaSuccess = _this$props2.reCaptchaSuccess,\n          geetestCaptchaSuccess = _this$props2.geetestCaptchaSuccess;\n      var _this$state5 = this.state,\n          email = _this$state5.email,\n          password = _this$state5.password,\n          confirmPassword = _this$state5.confirmPassword,\n          refId = _this$state5.refId,\n          hasConfirmed = _this$state5.hasConfirmed,\n          emailError = _this$state5.emailError,\n          passwordError = _this$state5.passwordError,\n          confirmationError = _this$state5.confirmationError,\n          emailFocused = _this$state5.emailFocused,\n          passwordFocused = _this$state5.passwordFocused,\n          confirmPasswordFocused = _this$state5.confirmPasswordFocused,\n          refIdFocused = _this$state5.refIdFocused,\n          passwordErrorFirstSolved = _this$state5.passwordErrorFirstSolved,\n          passwordErrorSecondSolved = _this$state5.passwordErrorSecondSolved,\n          passwordErrorThirdSolved = _this$state5.passwordErrorThirdSolved,\n          passwordPopUp = _this$state5.passwordPopUp;\n      var className = cx('pg-sign-up-screen__container', {\n        loading\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-sign-up-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SignUpForm, {\n        labelSignIn: this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        labelSignUp: this.props.intl.formatMessage({\n          id: 'page.header.signUp'\n        }),\n        emailLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.email'\n        }),\n        passwordLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.password'\n        }),\n        confirmPasswordLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.confirmPassword'\n        }),\n        referalCodeLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.referalCode'\n        }),\n        termsMessage: this.props.intl.formatMessage({\n          id: 'page.header.signUp.terms'\n        }),\n        refId: refId,\n        handleChangeRefId: this.handleChangeRefId,\n        isLoading: loading,\n        onSignIn: this.handleSignIn,\n        onSignUp: this.handleSignUp,\n        email: email,\n        handleChangeEmail: this.handleChangeEmail,\n        password: password,\n        handleChangePassword: this.handleChangePassword,\n        confirmPassword: confirmPassword,\n        handleChangeConfirmPassword: this.handleChangeConfirmPassword,\n        hasConfirmed: hasConfirmed,\n        clickCheckBox: this.handleCheckboxClick,\n        validateForm: this.handleValidateForm,\n        emailError: emailError,\n        passwordError: passwordError,\n        confirmationError: confirmationError,\n        confirmPasswordFocused: confirmPasswordFocused,\n        refIdFocused: refIdFocused,\n        emailFocused: emailFocused,\n        passwordFocused: passwordFocused,\n        handleFocusEmail: this.handleFocusEmail,\n        handleFocusPassword: this.handleFocusPassword,\n        handleFocusConfirmPassword: this.handleFocusConfirmPassword,\n        handleFocusRefId: this.handleFocusRefId,\n        captchaType: configs.captcha_type,\n        renderCaptcha: this.renderCaptcha(),\n        reCaptchaSuccess: reCaptchaSuccess,\n        geetestCaptchaSuccess: geetestCaptchaSuccess,\n        captcha_response: captcha_response,\n        currentPasswordEntropy: currentPasswordEntropy,\n        minPasswordEntropy: configs.password_min_entropy,\n        passwordErrorFirstSolved: passwordErrorFirstSolved,\n        passwordErrorSecondSolved: passwordErrorSecondSolved,\n        passwordErrorThirdSolved: passwordErrorThirdSolved,\n        passwordPopUp: passwordPopUp,\n        myRef: this.myRef,\n        passwordWrapper: this.passwordWrapper,\n        translate: this.translate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.showModal,\n        header: this.renderModalHeader(),\n        content: this.renderModalBody(),\n        footer: this.renderModalFooter(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return SignUp;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    configs: selectConfigs(state),\n    i18n: selectCurrentLanguage(state),\n    requireVerification: selectSignUpRequireVerification(state),\n    signUpError: selectSignUpError(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signUp: function signUp(credentials) {\n      return dispatch(_signUp(credentials));\n    },\n    fetchCurrentPasswordEntropy: function fetchCurrentPasswordEntropy(payload) {\n      return dispatch(entropyPasswordFetch(payload));\n    },\n    resetCaptchaState: function resetCaptchaState() {\n      return dispatch(_resetCaptchaState());\n    }\n  };\n};\n\nexport var SignUpScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(SignUp);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/screens/SignUpScreen/index.tsx"],"names":["cx","React","Button","injectIntl","connect","withRouter","compose","Captcha","Modal","SignUpForm","EMAIL_REGEX","ERROR_INVALID_EMAIL","ERROR_INVALID_PASSWORD","ERROR_PASSWORD_CONFIRMATION","PASSWORD_REGEX","passwordErrorFirstSolution","passwordErrorSecondSolution","passwordErrorThirdSolution","setDocumentTitle","entropyPasswordFetch","resetCaptchaState","selectCaptchaResponse","selectConfigs","selectCurrentLanguage","selectCurrentPasswordEntropy","selectGeetestCaptchaSuccess","selectRecaptchaSuccess","selectSignUpError","selectSignUpRequireVerification","signUp","extractRefID","props","URLSearchParams","location","search","get","SignUp","state","showModal","email","password","confirmPassword","refId","hasConfirmed","emailError","passwordError","confirmationError","emailFocused","passwordFocused","confirmPasswordFocused","refIdFocused","typingTimeout","passwordErrorFirstSolved","passwordErrorSecondSolved","passwordErrorThirdSolved","passwordPopUp","myRef","createRef","passwordWrapper","renderCaptcha","signUpError","error","translate","key","intl","formatMessage","id","handleOutsideClick","event","wrapperElement","current","contains","target","setState","handleCheckboxClick","preventDefault","handleChangeEmail","value","handleChangePassword","clearTimeout","setTimeout","fetchCurrentPasswordEntropy","handleChangeConfirmPassword","handleChangeRefId","handleFocusEmail","handleFocusPassword","handleFocusConfirmPassword","handleFocusRefId","handleSignIn","history","push","handleSignUp","configs","i18n","captcha_response","captcha_type","refid","data","JSON","stringify","language","renderModalHeader","renderModalBody","renderModalFooter","closeModal","url","handleValidateForm","isEmailValid","match","isPasswordValid","isConfirmPasswordValid","localReferralCode","localStorage","getItem","referralCode","setItem","document","addEventListener","nextProps","requireVerification","removeEventListener","loading","currentPasswordEntropy","reCaptchaSuccess","geetestCaptchaSuccess","className","password_min_entropy","Component","mapStateToProps","mapDispatchToProps","dispatch","credentials","payload","SignUpScreen"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport { History } from 'history';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n    injectIntl,\n} from 'react-intl';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { Captcha, Modal, SignUpForm } from '../../components';\nimport {\n    EMAIL_REGEX,\n    ERROR_INVALID_EMAIL,\n    ERROR_INVALID_PASSWORD,\n    ERROR_PASSWORD_CONFIRMATION,\n    PASSWORD_REGEX,\n    passwordErrorFirstSolution,\n    passwordErrorSecondSolution,\n    passwordErrorThirdSolution,\n    setDocumentTitle,\n} from '../../helpers';\nimport {\n    Configs,\n    entropyPasswordFetch, GeetestCaptchaResponse,\n    LanguageState,\n    resetCaptchaState,\n    RootState,\n    selectCaptchaResponse,\n    selectConfigs,\n    selectCurrentLanguage,\n    selectCurrentPasswordEntropy,\n    selectGeetestCaptchaSuccess,\n    selectRecaptchaSuccess,\n    selectSignUpError,\n    selectSignUpRequireVerification,\n    signUp,\n} from '../../modules';\n\ninterface ReduxProps {\n    configs: Configs;\n    requireVerification?: boolean;\n    loading?: boolean;\n    currentPasswordEntropy: number;\n    captcha_response?: string | GeetestCaptchaResponse;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n}\n\ninterface DispatchProps {\n    signUp: typeof signUp;\n    fetchCurrentPasswordEntropy: typeof entropyPasswordFetch;\n    resetCaptchaState: typeof resetCaptchaState;\n}\n\ninterface RouterProps {\n    location: {\n        search: string;\n    };\n    history: History;\n}\n\ninterface OwnProps {\n    signUpError: boolean;\n    i18n: LanguageState['lang'];\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps & OwnProps;\n\nexport const extractRefID = (props: RouterProps) => new URLSearchParams(props.location.search).get('refid');\n\nclass SignUp extends React.Component<Props> {\n    public readonly state = {\n        showModal: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        refId: '',\n        hasConfirmed: false,\n        emailError: '',\n        passwordError: '',\n        confirmationError: '',\n        emailFocused: false,\n        passwordFocused: false,\n        confirmPasswordFocused: false,\n        refIdFocused: false,\n        typingTimeout: 0,\n        passwordErrorFirstSolved: false,\n        passwordErrorSecondSolved: false,\n        passwordErrorThirdSolved: false,\n        passwordPopUp: false,\n    };\n\n    private myRef = React.createRef<HTMLInputElement>();\n    private passwordWrapper = React.createRef<HTMLDivElement>();\n\n    public componentDidMount() {\n        setDocumentTitle('Sign Up');\n        const localReferralCode = localStorage.getItem('referralCode');\n        const refId = this.extractRefID(this.props.location.search);\n        const referralCode = refId || localReferralCode || '';\n        this.setState({\n            refId: referralCode,\n        });\n        if (refId && refId !== localReferralCode) {\n            localStorage.setItem('referralCode', referralCode);\n        }\n\n        document.addEventListener('click', this.handleOutsideClick, false);\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        const { email } = this.state;\n\n        if (nextProps.requireVerification) {\n            nextProps.history.push('/email-verification', {email: email});\n        }\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    public renderCaptcha = () => {\n        const { signUpError } = this.props;\n        const { confirmationError, emailError } = this.state;\n\n        const error = signUpError || confirmationError || emailError;\n\n        return <Captcha error={error} />;\n    };\n\n    public render() {\n        const {\n            configs,\n            loading,\n            currentPasswordEntropy,\n            captcha_response,\n            reCaptchaSuccess,\n            geetestCaptchaSuccess,\n        } = this.props;\n        const {\n            email,\n            password,\n            confirmPassword,\n            refId,\n            hasConfirmed,\n            emailError,\n            passwordError,\n            confirmationError,\n            emailFocused,\n            passwordFocused,\n            confirmPasswordFocused,\n            refIdFocused,\n            passwordErrorFirstSolved,\n            passwordErrorSecondSolved,\n            passwordErrorThirdSolved,\n            passwordPopUp,\n        } = this.state;\n\n        const className = cx('pg-sign-up-screen__container', { loading });\n\n        return (\n            <div className=\"pg-sign-up-screen\">\n                <div className={className}>\n                    <SignUpForm\n                        labelSignIn={this.props.intl.formatMessage({ id: 'page.header.signIn'})}\n                        labelSignUp={this.props.intl.formatMessage({ id: 'page.header.signUp'})}\n                        emailLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.email'})}\n                        passwordLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.password'})}\n                        confirmPasswordLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.confirmPassword'})}\n                        referalCodeLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.referalCode'})}\n                        termsMessage={this.props.intl.formatMessage({ id: 'page.header.signUp.terms'})}\n                        refId={refId}\n                        handleChangeRefId={this.handleChangeRefId}\n                        isLoading={loading}\n                        onSignIn={this.handleSignIn}\n                        onSignUp={this.handleSignUp}\n                        email={email}\n                        handleChangeEmail={this.handleChangeEmail}\n                        password={password}\n                        handleChangePassword={this.handleChangePassword}\n                        confirmPassword={confirmPassword}\n                        handleChangeConfirmPassword={this.handleChangeConfirmPassword}\n                        hasConfirmed={hasConfirmed}\n                        clickCheckBox={this.handleCheckboxClick}\n                        validateForm={this.handleValidateForm}\n                        emailError={emailError}\n                        passwordError={passwordError}\n                        confirmationError={confirmationError}\n                        confirmPasswordFocused={confirmPasswordFocused}\n                        refIdFocused={refIdFocused}\n                        emailFocused={emailFocused}\n                        passwordFocused={passwordFocused}\n                        handleFocusEmail={this.handleFocusEmail}\n                        handleFocusPassword={this.handleFocusPassword}\n                        handleFocusConfirmPassword={this.handleFocusConfirmPassword}\n                        handleFocusRefId={this.handleFocusRefId}\n                        captchaType={configs.captcha_type}\n                        renderCaptcha={this.renderCaptcha()}\n                        reCaptchaSuccess={reCaptchaSuccess}\n                        geetestCaptchaSuccess={geetestCaptchaSuccess}\n                        captcha_response={captcha_response}\n                        currentPasswordEntropy={currentPasswordEntropy}\n                        minPasswordEntropy={configs.password_min_entropy}\n                        passwordErrorFirstSolved={passwordErrorFirstSolved}\n                        passwordErrorSecondSolved={passwordErrorSecondSolved}\n                        passwordErrorThirdSolved={passwordErrorThirdSolved}\n                        passwordPopUp={passwordPopUp}\n                        myRef={this.myRef}\n                        passwordWrapper={this.passwordWrapper}\n                        translate={this.translate}\n                    />\n                    <Modal\n                        show={this.state.showModal}\n                        header={this.renderModalHeader()}\n                        content={this.renderModalBody()}\n                        footer={this.renderModalFooter()}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private translate = (key: string) => this.props.intl.formatMessage({id: key});\n\n    private handleOutsideClick = event => {\n        const wrapperElement = this.passwordWrapper.current;\n\n        if (wrapperElement && !wrapperElement.contains(event.target)) {\n            this.setState({\n                passwordPopUp: false,\n            });\n        }\n    };\n\n    private handleCheckboxClick = event => {\n        if (event) {\n            event.preventDefault();\n\n            this.setState({\n                hasConfirmed: !this.state.hasConfirmed,\n            });\n        }\n    };\n\n    private handleChangeEmail = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private handleChangePassword = (value: string) => {\n        const { passwordErrorFirstSolved, passwordErrorSecondSolved, passwordErrorThirdSolved } = this.state;\n\n        if (passwordErrorFirstSolution(value) && !passwordErrorFirstSolved) {\n            this.setState({\n                passwordErrorFirstSolved: true,\n            });\n        } else if (!passwordErrorFirstSolution(value) && passwordErrorFirstSolved) {\n            this.setState({\n                passwordErrorFirstSolved: false,\n            });\n        }\n\n        if (passwordErrorSecondSolution(value) && !passwordErrorSecondSolved) {\n            this.setState({\n                passwordErrorSecondSolved: true,\n            });\n        } else if (!passwordErrorSecondSolution(value) && passwordErrorSecondSolved) {\n            this.setState({\n                passwordErrorSecondSolved: false,\n            });\n        }\n\n        if (passwordErrorThirdSolution(value) && !passwordErrorThirdSolved) {\n            this.setState({\n                passwordErrorThirdSolved: true,\n            });\n        } else if (!passwordErrorThirdSolution(value) && passwordErrorThirdSolved) {\n            this.setState({\n                passwordErrorThirdSolved: false,\n            });\n        }\n\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout);\n         }\n\n        this.setState({\n            password: value,\n            typingTimeout: setTimeout(() => {\n                this.props.fetchCurrentPasswordEntropy({ password: value });\n            }, 500),\n        });\n    };\n\n    private handleChangeConfirmPassword = (value: string) => {\n        this.setState({\n            confirmPassword: value,\n        });\n    };\n\n    private handleChangeRefId = (value: string) => {\n        this.setState({\n            refId: value,\n        });\n    };\n\n    private handleFocusEmail = () => {\n        this.setState({\n            emailFocused: !this.state.emailFocused,\n        });\n    };\n\n    private handleFocusPassword = () => {\n        this.setState({\n            passwordFocused: !this.state.passwordFocused,\n            passwordPopUp: !this.state.passwordPopUp,\n        });\n    };\n\n    private handleFocusConfirmPassword = () => {\n        this.setState({\n            confirmPasswordFocused: !this.state.confirmPasswordFocused,\n        });\n    };\n\n    private handleFocusRefId = () => {\n        this.setState({\n            refIdFocused: !this.state.refIdFocused,\n        });\n    };\n\n    private handleSignIn = () => {\n        this.props.history.push('/signin');\n    };\n\n    private handleSignUp = () => {\n        const { configs, i18n, captcha_response } = this.props;\n        const {\n            email,\n            password,\n            refId,\n        } = this.state;\n\n        if (refId) {\n            switch (configs.captcha_type) {\n                case 'recaptcha':\n                case 'geetest':\n                    this.props.signUp({\n                        email,\n                        password,\n                        captcha_response,\n                        refid: refId,\n                        data: JSON.stringify({\n                            language: i18n,\n                        }),\n                    } as any);\n                    break;\n                default:\n                    this.props.signUp({\n                        email,\n                        password,\n                        refid: refId,\n                        data: JSON.stringify({\n                            language: i18n,\n                        }),\n                    });\n                    break;\n            }\n        } else {\n            switch (configs.captcha_type) {\n                case 'recaptcha':\n                case 'geetest':\n                    this.props.signUp({\n                        email,\n                        password,\n                        captcha_response,\n                        data: JSON.stringify({\n                            language: i18n,\n                        }),\n                    });\n                    break;\n                default:\n                    this.props.signUp({\n                        email,\n                        password,\n                        data: JSON.stringify({\n                            language: i18n,\n                        }),\n                    });\n                    break;\n            }\n        }\n\n        this.props.resetCaptchaState();\n    };\n\n    private renderModalHeader = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-header\">\n                {this.props.intl.formatMessage({id: 'page.header.signUp.modal.header'})}\n            </div>\n        );\n    };\n\n    private renderModalBody = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-body\">\n                <h2>\n                    {this.props.intl.formatMessage({id: 'page.header.signUp.modal.body'})}\n                </h2>\n            </div>\n        );\n    };\n\n    private renderModalFooter = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-footer\">\n                <Button\n                    block={true}\n                    onClick={this.closeModal}\n                    size=\"lg\"\n                    variant=\"primary\"\n                >\n                    {this.props.intl.formatMessage({id: 'page.header.signUp.modal.footer'})}\n                </Button>\n            </div>\n        );\n    };\n\n    private closeModal = () => {\n        this.setState({showModal: false});\n        this.props.history.push('/signin');\n    };\n\n    private extractRefID = (url: string) => new URLSearchParams(url).get('refid');\n\n    private handleValidateForm = () => {\n        const {email, password, confirmPassword} = this.state;\n        const isEmailValid = email.match(EMAIL_REGEX);\n        const isPasswordValid = password.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = password === confirmPassword;\n\n        if (!isEmailValid && !isPasswordValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: this.props.intl.formatMessage({ id: ERROR_INVALID_PASSWORD }),\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n\n        if (!isEmailValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: '',\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n\n        if (!isPasswordValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: '',\n                passwordError: this.props.intl.formatMessage({ id: ERROR_INVALID_PASSWORD }),\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n\n        if (!isConfirmPasswordValid) {\n            this.setState({\n                confirmationError: this.props.intl.formatMessage({ id: ERROR_PASSWORD_CONFIRMATION }),\n                emailError: '',\n                passwordError: '',\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    configs: selectConfigs(state),\n    i18n: selectCurrentLanguage(state),\n    requireVerification: selectSignUpRequireVerification(state),\n    signUpError: selectSignUpError(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        signUp: credentials => dispatch(signUp(credentials)),\n        fetchCurrentPasswordEntropy: payload => dispatch(entropyPasswordFetch(payload)),\n        resetCaptchaState: () => dispatch(resetCaptchaState()),\n    });\n\nexport const SignUpScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(SignUp) as React.ComponentClass;\n"]},"metadata":{},"sourceType":"module"}