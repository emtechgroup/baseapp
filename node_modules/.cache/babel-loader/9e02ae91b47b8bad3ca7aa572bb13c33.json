{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(ordersExecuteSaga);\n\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, isFinexEnabled } from '../../../../api';\nimport { getCsrfToken, getOrderAPI } from '../../../../helpers';\nimport { userOpenOrdersAppend } from '../../openOrders';\nimport { orderExecuteData, orderExecuteError } from '../actions';\n\nvar executeOptions = function executeOptions(csrfToken) {\n  return {\n    apiVersion: getOrderAPI(),\n    headers: {\n      'X-CSRF-Token': csrfToken\n    }\n  };\n};\n\nexport function ordersExecuteSaga(action) {\n  var _action$payload, market, side, volume, price, ord_type, params, order;\n\n  return _regeneratorRuntime.wrap(function ordersExecuteSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, market = _action$payload.market, side = _action$payload.side, volume = _action$payload.volume, price = _action$payload.price, ord_type = _action$payload.ord_type;\n          params = isFinexEnabled() ? {\n            market: market,\n            side: side,\n            amount: volume,\n            price: price,\n            type: ord_type\n          } : action.payload;\n          _context.next = 5;\n          return call(API.post(executeOptions(getCsrfToken())), '/market/orders', params);\n\n        case 5:\n          order = _context.sent;\n          _context.next = 8;\n          return put(orderExecuteData());\n\n        case 8:\n          if (!(getOrderAPI() === 'finex')) {\n            _context.next = 14;\n            break;\n          }\n\n          if (!(order.type !== 'market')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 12;\n          return put(userOpenOrdersAppend(order));\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          if (!(order.ord_type !== 'market')) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 17;\n          return put(userOpenOrdersAppend(order));\n\n        case 17:\n          _context.next = 19;\n          return put(alertPush({\n            message: ['success.order.created'],\n            type: 'success'\n          }));\n\n        case 19:\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 25;\n          return put(sendError({\n            error: _context.t0,\n            processingType: 'alert',\n            extraOptions: {\n              actionError: orderExecuteError\n            }\n          }));\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 21]]);\n}","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/modules/user/orders/sagas/ordersExecuteSaga.ts"],"names":["ordersExecuteSaga","call","put","alertPush","sendError","API","isFinexEnabled","getCsrfToken","getOrderAPI","userOpenOrdersAppend","orderExecuteData","orderExecuteError","executeOptions","csrfToken","apiVersion","headers","action","payload","market","side","volume","price","ord_type","params","amount","type","post","order","message","error","processingType","extraOptions","actionError"],"mappings":";;oDAciBA,iB;;AAdjB,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AACA,SAASC,GAAT,EAAcC,cAAd,QAAoD,iBAApD;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,qBAA1C;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAuE,YAAvE;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAwC;AAC3D,SAAO;AACHC,IAAAA,UAAU,EAAEN,WAAW,EADpB;AAEHO,IAAAA,OAAO,EAAE;AAAE,sBAAgBF;AAAlB;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,SAAUb,iBAAV,CAA4BgB,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEmDA,MAAM,CAACC,OAF1D,EAESC,MAFT,mBAESA,MAFT,EAEiBC,IAFjB,mBAEiBA,IAFjB,EAEuBC,MAFvB,mBAEuBA,MAFvB,EAE+BC,KAF/B,mBAE+BA,KAF/B,EAEsCC,QAFtC,mBAEsCA,QAFtC;AAGOC,UAAAA,MAHP,GAGgBjB,cAAc,KAAK;AAC9BY,YAAAA,MAAM,EAAEA,MADsB;AAE9BC,YAAAA,IAAI,EAAEA,IAFwB;AAG9BK,YAAAA,MAAM,EAAEJ,MAHsB;AAI9BC,YAAAA,KAAK,EAAEA,KAJuB;AAK9BI,YAAAA,IAAI,EAAEH;AALwB,WAAL,GAMzBN,MAAM,CAACC,OATZ;AAAA;AAUe,iBAAMhB,IAAI,CAACI,GAAG,CAACqB,IAAJ,CAASd,cAAc,CAACL,YAAY,EAAb,CAAvB,CAAD,EAA2C,gBAA3C,EAA6DgB,MAA7D,CAAV;;AAVf;AAUOI,UAAAA,KAVP;AAAA;AAWC,iBAAMzB,GAAG,CAACQ,gBAAgB,EAAjB,CAAT;;AAXD;AAAA,gBAaKF,WAAW,OAAO,OAbvB;AAAA;AAAA;AAAA;;AAAA,gBAcSmB,KAAK,CAACF,IAAN,KAAe,QAdxB;AAAA;AAAA;AAAA;;AAAA;AAeS,iBAAMvB,GAAG,CAACO,oBAAoB,CAACkB,KAAD,CAArB,CAAT;;AAfT;AAAA;AAAA;;AAAA;AAAA,gBAkBSA,KAAK,CAACL,QAAN,KAAmB,QAlB5B;AAAA;AAAA;AAAA;;AAAA;AAmBS,iBAAMpB,GAAG,CAACO,oBAAoB,CAACkB,KAAD,CAArB,CAAT;;AAnBT;AAAA;AAuBC,iBAAMzB,GAAG,CAACC,SAAS,CAAC;AAAEyB,YAAAA,OAAO,EAAE,CAAC,uBAAD,CAAX;AAAsCH,YAAAA,IAAI,EAAE;AAA5C,WAAD,CAAV,CAAT;;AAvBD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAyBC,iBAAMvB,GAAG,CAACE,SAAS,CAAC;AAChByB,YAAAA,KAAK,aADW;AAEhBC,YAAAA,cAAc,EAAE,OAFA;AAGhBC,YAAAA,YAAY,EAAE;AACVC,cAAAA,WAAW,EAAErB;AADH;AAHE,WAAD,CAAV,CAAT;;AAzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { alertPush, sendError } from '../../../';\nimport { API, isFinexEnabled, RequestOptions } from '../../../../api';\nimport { getCsrfToken, getOrderAPI } from '../../../../helpers';\nimport { userOpenOrdersAppend } from '../../openOrders';\nimport { orderExecuteData, orderExecuteError, OrderExecuteFetch } from '../actions';\n\nconst executeOptions = (csrfToken?: string): RequestOptions => {\n    return {\n        apiVersion: getOrderAPI(),\n        headers: { 'X-CSRF-Token': csrfToken },\n    };\n};\n\nexport function* ordersExecuteSaga(action: OrderExecuteFetch) {\n    try {\n        const { market, side, volume, price, ord_type } = action.payload;\n        const params = isFinexEnabled() ? {\n            market: market,\n            side: side,\n            amount: volume,\n            price: price,\n            type: ord_type,\n        } : action.payload;\n        const order = yield call(API.post(executeOptions(getCsrfToken())), '/market/orders', params);\n        yield put(orderExecuteData());\n\n        if (getOrderAPI() === 'finex') {\n            if (order.type !== 'market') {\n                yield put(userOpenOrdersAppend(order));\n            }\n        } else {\n            if (order.ord_type !== 'market') {\n                yield put(userOpenOrdersAppend(order));\n            }\n        }\n\n        yield put(alertPush({ message: ['success.order.created'], type: 'success'}));\n    } catch (error) {\n        yield put(sendError({\n            error,\n            processingType: 'alert',\n            extraOptions: {\n                actionError: orderExecuteError,\n            },\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}