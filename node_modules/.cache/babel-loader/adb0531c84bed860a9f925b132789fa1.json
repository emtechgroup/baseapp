{"ast":null,"code":"import _classCallCheck from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/anthonypafundi/Desktop/baseapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/anthonypafundi/Desktop/baseapp/src/components/Customization/Themes/index.tsx\";\nimport * as React from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { SettingsIcon } from '../../../assets/images/customization/SettingsIcon';\nimport { DropdownComponent } from '../../../components';\nimport { AVAILABLE_COLOR_THEMES, AVAILABLE_COLORS_TITLES } from '../../../themes';\nimport { ColorSettings } from './ColorSettings';\nexport var handleConvertColorCode = function handleConvertColorCode(value, fromRGB) {\n  return fromRGB ? \"--grb-\".concat(value.slice(2)) : \"--\".concat(value.slice(6));\n};\nvar defaultColorSettingsItem = {\n  key: '',\n  title: ''\n};\nexport var CustomizationThemes = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomizationThemes, _React$Component);\n\n  var _super = _createSuper(CustomizationThemes);\n\n  function CustomizationThemes() {\n    var _this;\n\n    _classCallCheck(this, CustomizationThemes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      colorSettingsItem: defaultColorSettingsItem,\n      currentThemeIndex: 0\n    };\n\n    _this.handleGetThemesTitlesList = function () {\n      var translate = _this.props.translate;\n      return AVAILABLE_COLOR_THEMES.map(function (item) {\n        return translate(item.title);\n      });\n    };\n\n    _this.handleSetColorSettingsItem = function (item) {\n      var newSettings = defaultColorSettingsItem;\n\n      if (item) {\n        newSettings = item;\n      }\n\n      _this.setState({\n        colorSettingsItem: newSettings\n      });\n    };\n\n    _this.handleChangeCurrentTheme = function (index) {\n      var handleTriggerChartRebuild = _this.props.handleTriggerChartRebuild;\n      var rootElement = document.documentElement;\n      var themeToSet = AVAILABLE_COLOR_THEMES[index];\n\n      if (rootElement) {\n        AVAILABLE_COLORS_TITLES.reduce(function (result, item) {\n          var newItemColor = AVAILABLE_COLOR_THEMES[index].theme.find(function (theme) {\n            return theme.key === item.key;\n          });\n\n          if (newItemColor) {\n            rootElement.style.setProperty(item.key, newItemColor.value);\n          }\n\n          return result;\n        }, {});\n      }\n\n      _this.handleSetCurrentTheme(index);\n\n      if (themeToSet) {\n        _this.props.handleSetCurrentCustomization('theme_id', themeToSet.id);\n      }\n\n      handleTriggerChartRebuild && handleTriggerChartRebuild();\n    };\n\n    _this.handleSetCurrentTheme = function (themeIndex) {\n      _this.setState({\n        currentThemeIndex: themeIndex\n      });\n    };\n\n    _this.handleApplyCustomizationSettings = function (customization) {\n      var parsedSettings = customization.settings ? JSON.parse(customization.settings) : null;\n\n      if (parsedSettings && parsedSettings.theme_id) {\n        var themeIndexToSet = AVAILABLE_COLOR_THEMES.findIndex(function (theme) {\n          return theme.id === +parsedSettings.theme_id;\n        });\n\n        if (themeIndexToSet >= 0) {\n          _this.handleSetCurrentTheme(themeIndexToSet);\n\n          _this.props.handleSetCurrentCustomization('theme_id', +parsedSettings.theme_id);\n        }\n      }\n    };\n\n    _this.handleResetCustomizationSettings = function (customization) {\n      var handleTriggerChartRebuild = _this.props.handleTriggerChartRebuild;\n      var rootElement = document.documentElement;\n      var parsedSettings = customization && customization.settings ? JSON.parse(customization.settings) : null;\n\n      _this.handleApplyCustomizationSettings(customization);\n\n      if (rootElement && parsedSettings && parsedSettings.theme_colors) {\n        parsedSettings.theme_colors.reduce(function (result, item) {\n          var newItemColor = item.value;\n\n          if (newItemColor) {\n            rootElement.style.setProperty(item.key, item.value);\n          }\n\n          return result;\n        }, {});\n        handleTriggerChartRebuild && handleTriggerChartRebuild();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomizationThemes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          currentCustomization = _this$props.currentCustomization,\n          customization = _this$props.customization;\n\n      if (currentCustomization && currentCustomization.theme_id >= 0) {\n        var themeIndexToSet = AVAILABLE_COLOR_THEMES.findIndex(function (item) {\n          return item.id === currentCustomization.theme_id;\n        });\n\n        if (themeIndexToSet >= 0) {\n          this.handleSetCurrentTheme(themeIndexToSet);\n        }\n      } else {\n        if (customization) {\n          this.handleApplyCustomizationSettings(customization);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          customization = _this$props2.customization,\n          resetToDefault = _this$props2.resetToDefault;\n\n      if (customization && customization !== prevProps.customization) {\n        this.handleApplyCustomizationSettings(customization);\n      }\n\n      if (resetToDefault !== prevProps.resetToDefault) {\n        if (customization && customization.settings) {\n          this.handleResetCustomizationSettings(customization);\n        } else {\n          this.handleChangeCurrentTheme(0);\n        }\n      }\n    }\n  }, {\n    key: \"renderThemesDropdown\",\n    value: function renderThemesDropdown() {\n      var translate = this.props.translate;\n      var currentThemeIndex = this.state.currentThemeIndex;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-themes__themes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"pg-customization-themes__themes__dropdown-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, translate('page.body.customization.themes.selector.label')), /*#__PURE__*/React.createElement(DropdownComponent, {\n        className: \"pg-customization-themes__themes__dropdown\",\n        list: this.handleGetThemesTitlesList(),\n        onSelect: this.handleChangeCurrentTheme,\n        placeholder: translate(AVAILABLE_COLOR_THEMES[currentThemeIndex].title),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"renderColorsItem\",\n    value: function renderColorsItem(item, index) {\n      var _this2 = this;\n\n      var translate = this.props.translate;\n      var grbItemKey = handleConvertColorCode(item.key);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"pg-customization-themes__colors__item\",\n        onClick: function onClick(e) {\n          return _this2.handleSetColorSettingsItem(item);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-themes__colors__item__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pg-customization-themes__colors__item__content__circle\",\n        style: {\n          backgroundColor: \"var(\".concat(grbItemKey, \")\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pg-customization-themes__colors__item__content__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, translate(item.title))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-themes__colors__item__settings-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SettingsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      })));\n    }\n  }, {\n    key: \"renderColors\",\n    value: function renderColors() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-themes__colors\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, AVAILABLE_COLORS_TITLES.map(function (item, index) {\n        return _this3.renderColorsItem(item, index);\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          handleTriggerChartRebuild = _this$props3.handleTriggerChartRebuild,\n          translate = _this$props3.translate;\n      var colorSettingsItem = this.state.colorSettingsItem;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-customization-themes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, this.renderThemesDropdown(), this.renderColors(), /*#__PURE__*/React.createElement(ColorSettings, {\n        handleCloseColorSettings: this.handleSetColorSettingsItem,\n        item: colorSettingsItem,\n        translate: translate,\n        handleTriggerChartRebuild: handleTriggerChartRebuild,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return CustomizationThemes;\n}(React.Component);","map":{"version":3,"sources":["/Users/anthonypafundi/Desktop/baseapp/src/components/Customization/Themes/index.tsx"],"names":["React","PerfectScrollbar","SettingsIcon","DropdownComponent","AVAILABLE_COLOR_THEMES","AVAILABLE_COLORS_TITLES","ColorSettings","handleConvertColorCode","value","fromRGB","slice","defaultColorSettingsItem","key","title","CustomizationThemes","state","colorSettingsItem","currentThemeIndex","handleGetThemesTitlesList","translate","props","map","item","handleSetColorSettingsItem","newSettings","setState","handleChangeCurrentTheme","index","handleTriggerChartRebuild","rootElement","document","documentElement","themeToSet","reduce","result","newItemColor","theme","find","style","setProperty","handleSetCurrentTheme","handleSetCurrentCustomization","id","themeIndex","handleApplyCustomizationSettings","customization","parsedSettings","settings","JSON","parse","theme_id","themeIndexToSet","findIndex","handleResetCustomizationSettings","theme_colors","currentCustomization","prevProps","resetToDefault","grbItemKey","e","backgroundColor","renderColorsItem","renderThemesDropdown","renderColors","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { SettingsIcon } from '../../../assets/images/customization/SettingsIcon';\nimport { DropdownComponent } from '../../../components';\nimport {\n    CustomizationCurrentDataInterface,\n    CustomizationDataInterface,\n} from '../../../modules';\nimport {\n    AVAILABLE_COLOR_THEMES,\n    AVAILABLE_COLORS_TITLES,\n    ThemeColorTitleInterface,\n} from '../../../themes';\nimport { ColorSettings } from './ColorSettings';\n\nexport const handleConvertColorCode = (value: string, fromRGB?: boolean) => (\n    fromRGB ? `--grb-${value.slice(2)}` :  `--${value.slice(6)}`\n);\n\ninterface OwnProps {\n    translate: (key: string) => string;\n    resetToDefault: boolean;\n    handleTriggerChartRebuild?: () => void;\n    handleSetCurrentCustomization: (key: string, value: string | number) => void;\n    currentCustomization?: CustomizationCurrentDataInterface;\n    customization?: CustomizationDataInterface;\n}\n\ntype Props = OwnProps;\n\ninterface State {\n    colorSettingsItem: ThemeColorTitleInterface;\n    currentThemeIndex: number;\n}\n\nconst defaultColorSettingsItem = {\n    key: '',\n    title: '',\n};\n\nexport class CustomizationThemes extends React.Component<Props, State> {\n    public state = {\n        colorSettingsItem: defaultColorSettingsItem,\n        currentThemeIndex: 0,\n    };\n\n    public componentDidMount() {\n        const {\n            currentCustomization,\n            customization,\n        } = this.props;\n\n        if (currentCustomization && currentCustomization.theme_id >= 0) {\n            const themeIndexToSet = AVAILABLE_COLOR_THEMES.findIndex(item => item.id === currentCustomization.theme_id);\n\n            if (themeIndexToSet >= 0) {\n                this.handleSetCurrentTheme(themeIndexToSet);\n            }\n        } else {\n            if (customization) {\n                this.handleApplyCustomizationSettings(customization);\n            }\n        }\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        const { customization, resetToDefault } = this.props;\n\n        if (customization && customization !== prevProps.customization) {\n            this.handleApplyCustomizationSettings(customization);\n        }\n\n        if (resetToDefault !== prevProps.resetToDefault) {\n            if (customization && customization.settings) {\n                this.handleResetCustomizationSettings(customization);\n            } else {\n                this.handleChangeCurrentTheme(0);\n            }\n        }\n    }\n\n    public renderThemesDropdown() {\n        const { translate } = this.props;\n        const { currentThemeIndex } = this.state;\n\n        return (\n            <div className=\"pg-customization-themes__themes\">\n                <label className=\"pg-customization-themes__themes__dropdown-label\">\n                    {translate('page.body.customization.themes.selector.label')}\n                </label>\n                <DropdownComponent\n                    className=\"pg-customization-themes__themes__dropdown\"\n                    list={this.handleGetThemesTitlesList()}\n                    onSelect={this.handleChangeCurrentTheme}\n                    placeholder={translate(AVAILABLE_COLOR_THEMES[currentThemeIndex].title)}\n                />\n            </div>\n        );\n    }\n\n    public renderColorsItem(item: ThemeColorTitleInterface, index: number) {\n        const { translate } = this.props;\n        const grbItemKey = handleConvertColorCode(item.key);\n\n        return (\n            <div key={index} className=\"pg-customization-themes__colors__item\" onClick={e => this.handleSetColorSettingsItem(item)}>\n                <div className=\"pg-customization-themes__colors__item__content\">\n                    <span\n                        className=\"pg-customization-themes__colors__item__content__circle\"\n                        style={{backgroundColor: `var(${grbItemKey})`}}\n                    />\n                    <span className=\"pg-customization-themes__colors__item__content__title\">{translate(item.title)}</span>\n                </div>\n                <div className=\"pg-customization-themes__colors__item__settings-icon\">\n                    <SettingsIcon />\n                </div>\n            </div>\n        );\n    }\n\n    public renderColors() {\n        return (\n            <div className=\"pg-customization-themes__colors\">\n                <PerfectScrollbar>\n                    {AVAILABLE_COLORS_TITLES.map((item, index) => this.renderColorsItem(item, index))}\n                </PerfectScrollbar>\n            </div>\n        );\n    }\n\n    public render() {\n        const { handleTriggerChartRebuild, translate } = this.props;\n        const { colorSettingsItem } = this.state;\n\n        return (\n            <div className=\"pg-customization-themes\">\n                {this.renderThemesDropdown()}\n                {this.renderColors()}\n                <ColorSettings\n                    handleCloseColorSettings={this.handleSetColorSettingsItem}\n                    item={colorSettingsItem}\n                    translate={translate}\n                    handleTriggerChartRebuild={handleTriggerChartRebuild}\n                />\n            </div>\n        );\n    }\n\n    private handleGetThemesTitlesList = () => {\n        const { translate } = this.props;\n\n        return AVAILABLE_COLOR_THEMES.map(item => translate(item.title));\n    };\n\n    private handleSetColorSettingsItem = (item?: ThemeColorTitleInterface) => {\n        let newSettings: ThemeColorTitleInterface = defaultColorSettingsItem;\n\n        if (item) {\n            newSettings = item;\n        }\n\n        this.setState({ colorSettingsItem: newSettings });\n    };\n\n\n    private handleChangeCurrentTheme = (index: number) => {\n        const { handleTriggerChartRebuild } = this.props;\n        const rootElement = document.documentElement;\n        const themeToSet = AVAILABLE_COLOR_THEMES[index];\n\n        if (rootElement) {\n            AVAILABLE_COLORS_TITLES.reduce((result, item) => {\n                const newItemColor = AVAILABLE_COLOR_THEMES[index].theme.find(theme => theme.key === item.key);\n\n                if (newItemColor) {\n                    rootElement.style.setProperty(item.key, newItemColor.value);\n                }\n\n                return result;\n            }, {});\n        }\n\n        this.handleSetCurrentTheme(index);\n\n        if (themeToSet) {\n            this.props.handleSetCurrentCustomization('theme_id', themeToSet.id);\n        }\n\n        handleTriggerChartRebuild && handleTriggerChartRebuild();\n    };\n\n    private handleSetCurrentTheme = (themeIndex: number) => {\n        this.setState({ currentThemeIndex: themeIndex });\n    };\n\n    private handleApplyCustomizationSettings = (customization: CustomizationDataInterface) => {\n        const parsedSettings = customization.settings ? JSON.parse(customization.settings) : null;\n\n        if (parsedSettings && parsedSettings.theme_id) {\n            const themeIndexToSet = AVAILABLE_COLOR_THEMES.findIndex(theme => theme.id === +parsedSettings.theme_id);\n\n            if (themeIndexToSet >= 0) {\n                this.handleSetCurrentTheme(themeIndexToSet);\n                this.props.handleSetCurrentCustomization('theme_id', +parsedSettings.theme_id);\n            }\n        }\n    };\n\n    private handleResetCustomizationSettings = (customization: CustomizationDataInterface) => {\n        const { handleTriggerChartRebuild } = this.props;\n        const rootElement = document.documentElement;\n        const parsedSettings = customization && customization.settings ? JSON.parse(customization.settings) : null;\n\n        this.handleApplyCustomizationSettings(customization);\n\n        if (rootElement && parsedSettings && parsedSettings.theme_colors) {\n            parsedSettings.theme_colors.reduce((result, item) => {\n                const newItemColor = item.value;\n\n                if (newItemColor) {\n                    rootElement.style.setProperty(item.key, item.value);\n                }\n\n                return result;\n            }, {});\n\n            handleTriggerChartRebuild && handleTriggerChartRebuild();\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}